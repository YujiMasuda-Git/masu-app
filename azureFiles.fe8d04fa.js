// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEmptyPipeline = createEmptyPipeline;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const ValidPhaseNames = new Set(["Deserialize", "Serialize", "Retry", "Sign"]);
/**
 * A private implementation of Pipeline.
 * Do not export this class from the package.
 * @internal
 */
class HttpPipeline {
  constructor(policies) {
    var _a;
    this._policies = [];
    this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];
    this._orderedPolicies = undefined;
  }
  addPolicy(policy, options = {}) {
    if (options.phase && options.afterPhase) {
      throw new Error("Policies inside a phase cannot specify afterPhase.");
    }
    if (options.phase && !ValidPhaseNames.has(options.phase)) {
      throw new Error(`Invalid phase name: ${options.phase}`);
    }
    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {
      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);
    }
    this._policies.push({
      policy,
      options
    });
    this._orderedPolicies = undefined;
  }
  removePolicy(options) {
    const removedPolicies = [];
    this._policies = this._policies.filter(policyDescriptor => {
      if (options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) {
        removedPolicies.push(policyDescriptor.policy);
        return false;
      } else {
        return true;
      }
    });
    this._orderedPolicies = undefined;
    return removedPolicies;
  }
  sendRequest(httpClient, request) {
    const policies = this.getOrderedPolicies();
    const pipeline = policies.reduceRight((next, policy) => {
      return req => {
        return policy.sendRequest(req, next);
      };
    }, req => httpClient.sendRequest(req));
    return pipeline(request);
  }
  getOrderedPolicies() {
    if (!this._orderedPolicies) {
      this._orderedPolicies = this.orderPolicies();
    }
    return this._orderedPolicies;
  }
  clone() {
    return new HttpPipeline(this._policies);
  }
  static create() {
    return new HttpPipeline();
  }
  orderPolicies() {
    /**
     * The goal of this method is to reliably order pipeline policies
     * based on their declared requirements when they were added.
     *
     * Order is first determined by phase:
     *
     * 1. Serialize Phase
     * 2. Policies not in a phase
     * 3. Deserialize Phase
     * 4. Retry Phase
     * 5. Sign Phase
     *
     * Within each phase, policies are executed in the order
     * they were added unless they were specified to execute
     * before/after other policies or after a particular phase.
     *
     * To determine the final order, we will walk the policy list
     * in phase order multiple times until all dependencies are
     * satisfied.
     *
     * `afterPolicies` are the set of policies that must be
     * executed before a given policy. This requirement is
     * considered satisfied when each of the listed policies
     * have been scheduled.
     *
     * `beforePolicies` are the set of policies that must be
     * executed after a given policy. Since this dependency
     * can be expressed by converting it into a equivalent
     * `afterPolicies` declarations, they are normalized
     * into that form for simplicity.
     *
     * An `afterPhase` dependency is considered satisfied when all
     * policies in that phase have scheduled.
     *
     */
    const result = [];
    // Track all policies we know about.
    const policyMap = new Map();
    function createPhase(name) {
      return {
        name,
        policies: new Set(),
        hasRun: false,
        hasAfterPolicies: false
      };
    }
    // Track policies for each phase.
    const serializePhase = createPhase("Serialize");
    const noPhase = createPhase("None");
    const deserializePhase = createPhase("Deserialize");
    const retryPhase = createPhase("Retry");
    const signPhase = createPhase("Sign");
    // a list of phases in order
    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];
    // Small helper function to map phase name to each Phase
    function getPhase(phase) {
      if (phase === "Retry") {
        return retryPhase;
      } else if (phase === "Serialize") {
        return serializePhase;
      } else if (phase === "Deserialize") {
        return deserializePhase;
      } else if (phase === "Sign") {
        return signPhase;
      } else {
        return noPhase;
      }
    }
    // First walk each policy and create a node to track metadata.
    for (const descriptor of this._policies) {
      const policy = descriptor.policy;
      const options = descriptor.options;
      const policyName = policy.name;
      if (policyMap.has(policyName)) {
        throw new Error("Duplicate policy names not allowed in pipeline");
      }
      const node = {
        policy,
        dependsOn: new Set(),
        dependants: new Set()
      };
      if (options.afterPhase) {
        node.afterPhase = getPhase(options.afterPhase);
        node.afterPhase.hasAfterPolicies = true;
      }
      policyMap.set(policyName, node);
      const phase = getPhase(options.phase);
      phase.policies.add(node);
    }
    // Now that each policy has a node, connect dependency references.
    for (const descriptor of this._policies) {
      const {
        policy,
        options
      } = descriptor;
      const policyName = policy.name;
      const node = policyMap.get(policyName);
      if (!node) {
        throw new Error(`Missing node for policy ${policyName}`);
      }
      if (options.afterPolicies) {
        for (const afterPolicyName of options.afterPolicies) {
          const afterNode = policyMap.get(afterPolicyName);
          if (afterNode) {
            // Linking in both directions helps later
            // when we want to notify dependants.
            node.dependsOn.add(afterNode);
            afterNode.dependants.add(node);
          }
        }
      }
      if (options.beforePolicies) {
        for (const beforePolicyName of options.beforePolicies) {
          const beforeNode = policyMap.get(beforePolicyName);
          if (beforeNode) {
            // To execute before another node, make it
            // depend on the current node.
            beforeNode.dependsOn.add(node);
            node.dependants.add(beforeNode);
          }
        }
      }
    }
    function walkPhase(phase) {
      phase.hasRun = true;
      // Sets iterate in insertion order
      for (const node of phase.policies) {
        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {
          // If this node is waiting on a phase to complete,
          // we need to skip it for now.
          // Even if the phase is empty, we should wait for it
          // to be walked to avoid re-ordering policies.
          continue;
        }
        if (node.dependsOn.size === 0) {
          // If there's nothing else we're waiting for, we can
          // add this policy to the result list.
          result.push(node.policy);
          // Notify anything that depends on this policy that
          // the policy has been scheduled.
          for (const dependant of node.dependants) {
            dependant.dependsOn.delete(node);
          }
          policyMap.delete(node.policy.name);
          phase.policies.delete(node);
        }
      }
    }
    function walkPhases() {
      for (const phase of orderedPhases) {
        walkPhase(phase);
        // if the phase isn't complete
        if (phase.policies.size > 0 && phase !== noPhase) {
          if (!noPhase.hasRun) {
            // Try running noPhase to see if that unblocks this phase next tick.
            // This can happen if a phase that happens before noPhase
            // is waiting on a noPhase policy to complete.
            walkPhase(noPhase);
          }
          // Don't proceed to the next phase until this phase finishes.
          return;
        }
        if (phase.hasAfterPolicies) {
          // Run any policies unblocked by this phase
          walkPhase(noPhase);
        }
      }
    }
    // Iterate until we've put every node in the result list.
    let iteration = 0;
    while (policyMap.size > 0) {
      iteration++;
      const initialResultLength = result.length;
      // Keep walking each phase in order until we can order every node.
      walkPhases();
      // The result list *should* get at least one larger each time
      // after the first full pass.
      // Otherwise, we're going to loop forever.
      if (result.length <= initialResultLength && iteration > 1) {
        throw new Error("Cannot satisfy policy dependencies due to requirements cycle.");
      }
    }
    return result;
  }
}
/**
 * Creates a totally empty pipeline.
 * Useful for testing or creating a custom one.
 */
function createEmptyPipeline() {
  return HttpPipeline.create();
}
},{}],"node_modules/@azure/logger/dist/browser/log.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = log;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function log(...args) {
  if (args.length > 0) {
    const firstArg = String(args[0]);
    if (firstArg.includes(":error")) {
      console.error(...args);
    } else if (firstArg.includes(":warning")) {
      console.warn(...args);
    } else if (firstArg.includes(":info")) {
      console.info(...args);
    } else if (firstArg.includes(":verbose")) {
      console.debug(...args);
    } else {
      console.debug(...args);
    }
  }
}
},{}],"node_modules/@azure/logger/dist/browser/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "log", {
  enumerable: true,
  get: function () {
    return _logCommon.log;
  }
});
var _logCommon = require("./log.common.js");
},{"./log.common.js":"node_modules/@azure/logger/dist/browser/log.common.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"node_modules/@azure/logger/dist/browser/debug.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _log = require("./log.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const debugEnvVariable = typeof process !== "undefined" && process.env && undefined || undefined;
let enabledString;
let enabledNamespaces = [];
let skippedNamespaces = [];
const debuggers = [];
if (debugEnvVariable) {
  enable(debugEnvVariable);
}
const debugObj = Object.assign(namespace => {
  return createDebugger(namespace);
}, {
  enable,
  enabled,
  disable,
  log: _log.log
});
function enable(namespaces) {
  enabledString = namespaces;
  enabledNamespaces = [];
  skippedNamespaces = [];
  const wildcard = /\*/g;
  const namespaceList = namespaces.split(",").map(ns => ns.trim().replace(wildcard, ".*?"));
  for (const ns of namespaceList) {
    if (ns.startsWith("-")) {
      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));
    } else {
      enabledNamespaces.push(new RegExp(`^${ns}$`));
    }
  }
  for (const instance of debuggers) {
    instance.enabled = enabled(instance.namespace);
  }
}
function enabled(namespace) {
  if (namespace.endsWith("*")) {
    return true;
  }
  for (const skipped of skippedNamespaces) {
    if (skipped.test(namespace)) {
      return false;
    }
  }
  for (const enabledNamespace of enabledNamespaces) {
    if (enabledNamespace.test(namespace)) {
      return true;
    }
  }
  return false;
}
function disable() {
  const result = enabledString || "";
  enable("");
  return result;
}
function createDebugger(namespace) {
  const newDebugger = Object.assign(debug, {
    enabled: enabled(namespace),
    destroy,
    log: debugObj.log,
    namespace,
    extend
  });
  function debug(...args) {
    if (!newDebugger.enabled) {
      return;
    }
    if (args.length > 0) {
      args[0] = `${namespace} ${args[0]}`;
    }
    newDebugger.log(...args);
  }
  debuggers.push(newDebugger);
  return newDebugger;
}
function destroy() {
  const index = debuggers.indexOf(this);
  if (index >= 0) {
    debuggers.splice(index, 1);
    return true;
  }
  return false;
}
function extend(namespace) {
  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
  newDebugger.log = this.log;
  return newDebugger;
}
var _default = exports.default = debugObj;
},{"./log.js":"node_modules/@azure/logger/dist/browser/log.js","process":"node_modules/process/browser.js"}],"node_modules/@azure/logger/dist/browser/index.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AzureLogger = void 0;
exports.createClientLogger = createClientLogger;
exports.getLogLevel = getLogLevel;
exports.setLogLevel = setLogLevel;
var _debug = _interopRequireDefault(require("./debug.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const registeredLoggers = new Set();
const logLevelFromEnv = typeof process !== "undefined" && process.env && undefined || undefined;
let azureLogLevel;
/**
 * The AzureLogger provides a mechanism for overriding where logs are output to.
 * By default, logs are sent to stderr.
 * Override the `log` method to redirect logs to another location.
 */
const AzureLogger = exports.AzureLogger = (0, _debug.default)("azure");
AzureLogger.log = (...args) => {
  _debug.default.log(...args);
};
const AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
if (logLevelFromEnv) {
  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
  if (isAzureLogLevel(logLevelFromEnv)) {
    setLogLevel(logLevelFromEnv);
  } else {
    console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
  }
}
/**
 * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.
 * @param level - The log level to enable for logging.
 * Options from most verbose to least verbose are:
 * - verbose
 * - info
 * - warning
 * - error
 */
function setLogLevel(level) {
  if (level && !isAzureLogLevel(level)) {
    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
  }
  azureLogLevel = level;
  const enabledNamespaces = [];
  for (const logger of registeredLoggers) {
    if (shouldEnable(logger)) {
      enabledNamespaces.push(logger.namespace);
    }
  }
  _debug.default.enable(enabledNamespaces.join(","));
}
/**
 * Retrieves the currently specified log level.
 */
function getLogLevel() {
  return azureLogLevel;
}
const levelMap = {
  verbose: 400,
  info: 300,
  warning: 200,
  error: 100
};
/**
 * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
 * @param namespace - The name of the SDK package.
 * @hidden
 */
function createClientLogger(namespace) {
  const clientRootLogger = AzureLogger.extend(namespace);
  patchLogMethod(AzureLogger, clientRootLogger);
  return {
    error: createLogger(clientRootLogger, "error"),
    warning: createLogger(clientRootLogger, "warning"),
    info: createLogger(clientRootLogger, "info"),
    verbose: createLogger(clientRootLogger, "verbose")
  };
}
function patchLogMethod(parent, child) {
  child.log = (...args) => {
    parent.log(...args);
  };
}
function createLogger(parent, level) {
  const logger = Object.assign(parent.extend(level), {
    level
  });
  patchLogMethod(parent, logger);
  if (shouldEnable(logger)) {
    const enabledNamespaces = _debug.default.disable();
    _debug.default.enable(enabledNamespaces + "," + logger.namespace);
  }
  registeredLoggers.add(logger);
  return logger;
}
function shouldEnable(logger) {
  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);
}
function isAzureLogLevel(logLevel) {
  return AZURE_LOG_LEVELS.includes(logLevel);
}
},{"./debug.js":"node_modules/@azure/logger/dist/browser/debug.js","process":"node_modules/process/browser.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
var _logger = require("@azure/logger");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const logger = exports.logger = (0, _logger.createClientLogger)("core-rest-pipeline");
},{"@azure/logger":"node_modules/@azure/logger/dist/browser/index.js"}],"node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/browser/AbortError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortError = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */
class AbortError extends Error {
  constructor(message) {
    super(message);
    this.name = "AbortError";
  }
}
exports.AbortError = AbortError;
},{}],"node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbortError", {
  enumerable: true,
  get: function () {
    return _AbortError.AbortError;
  }
});
var _AbortError = require("./AbortError.js");
},{"./AbortError.js":"node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/browser/AbortError.js"}],"node_modules/@azure/core-util/dist/browser/createAbortablePromise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAbortablePromise = createAbortablePromise;
var _abortController = require("@azure/abort-controller");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates an abortable promise.
 * @param buildPromise - A function that takes the resolve and reject functions as parameters.
 * @param options - The options for the abortable promise.
 * @returns A promise that can be aborted.
 */
function createAbortablePromise(buildPromise, options) {
  const {
    cleanupBeforeAbort,
    abortSignal,
    abortErrorMsg
  } = options !== null && options !== void 0 ? options : {};
  return new Promise((resolve, reject) => {
    function rejectOnAbort() {
      reject(new _abortController.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
    }
    function removeListeners() {
      abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", onAbort);
    }
    function onAbort() {
      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
      removeListeners();
      rejectOnAbort();
    }
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      return rejectOnAbort();
    }
    try {
      buildPromise(x => {
        removeListeners();
        resolve(x);
      }, x => {
        removeListeners();
        reject(x);
      });
    } catch (err) {
      reject(err);
    }
    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", onAbort);
  });
}
},{"@azure/abort-controller":"node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/browser/index.js"}],"node_modules/@azure/core-util/dist/browser/delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = delay;
var _createAbortablePromise = require("./createAbortablePromise.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const StandardAbortMessage = "The delay was aborted.";
/**
 * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.
 * @param timeInMs - The number of milliseconds to be delayed.
 * @param options - The options for delay - currently abort options
 * @returns Promise that is resolved after timeInMs
 */
function delay(timeInMs, options) {
  let token;
  const {
    abortSignal,
    abortErrorMsg
  } = options !== null && options !== void 0 ? options : {};
  return (0, _createAbortablePromise.createAbortablePromise)(resolve => {
    token = setTimeout(resolve, timeInMs);
  }, {
    cleanupBeforeAbort: () => clearTimeout(token),
    abortSignal,
    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage
  });
}
},{"./createAbortablePromise.js":"node_modules/@azure/core-util/dist/browser/createAbortablePromise.js"}],"node_modules/@azure/core-util/dist/browser/aborterUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelablePromiseRace = cancelablePromiseRace;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.
 */
async function cancelablePromiseRace(abortablePromiseBuilders, options) {
  var _a, _b;
  const aborter = new AbortController();
  function abortHandler() {
    aborter.abort();
  }
  (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", abortHandler);
  try {
    return await Promise.race(abortablePromiseBuilders.map(p => p({
      abortSignal: aborter.signal
    })));
  } finally {
    aborter.abort();
    (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener("abort", abortHandler);
  }
}
},{}],"node_modules/@azure/core-util/dist/browser/random.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRandomIntegerInclusive = getRandomIntegerInclusive;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Returns a random integer value between a lower and upper bound,
 * inclusive of both bounds.
 * Note that this uses Math.random and isn't secure. If you need to use
 * this for any kind of security purpose, find a better source of random.
 * @param min - The smallest integer value allowed.
 * @param max - The largest integer value allowed.
 */
function getRandomIntegerInclusive(min, max) {
  // Make sure inputs are integers.
  min = Math.ceil(min);
  max = Math.floor(max);
  // Pick a random offset from zero to the size of the range.
  // Since Math.random() can never return 1, we have to make the range one larger
  // in order to be inclusive of the maximum value after we take the floor.
  const offset = Math.floor(Math.random() * (max - min + 1));
  return offset + min;
}
},{}],"node_modules/@azure/core-util/dist/browser/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObject = isObject;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Helper to determine when an input is a generic JS object.
 * @returns true when input is an object type that is not null, Array, RegExp, or Date.
 */
function isObject(input) {
  return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
}
},{}],"node_modules/@azure/core-util/dist/browser/error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorMessage = getErrorMessage;
exports.isError = isError;
var _object = require("./object.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Typeguard for an error object shape (has name and message)
 * @param e - Something caught by a catch clause.
 */
function isError(e) {
  if ((0, _object.isObject)(e)) {
    const hasName = typeof e.name === "string";
    const hasMessage = typeof e.message === "string";
    return hasName && hasMessage;
  }
  return false;
}
/**
 * Given what is thought to be an error object, return the message if possible.
 * If the message is missing, returns a stringified version of the input.
 * @param e - Something thrown from a try block
 * @returns The error message or a string of the input
 */
function getErrorMessage(e) {
  if (isError(e)) {
    return e.message;
  } else {
    let stringified;
    try {
      if (typeof e === "object" && e) {
        stringified = JSON.stringify(e);
      } else {
        stringified = String(e);
      }
    } catch (err) {
      stringified = "[unable to stringify input]";
    }
    return `Unknown error ${stringified}`;
  }
}
},{"./object.js":"node_modules/@azure/core-util/dist/browser/object.js"}],"node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base64ToUint8Array = base64ToUint8Array;
exports.base64UrlToUint8Array = base64UrlToUint8Array;
exports.hexStringToUint8Array = hexStringToUint8Array;
exports.stringToUint8Array = stringToUint8Array;
exports.uint8ArrayToBase64 = uint8ArrayToBase64;
exports.uint8ArrayToBase64Url = uint8ArrayToBase64Url;
exports.uint8ArrayToHexString = uint8ArrayToHexString;
exports.uint8ArrayToString = uint8ArrayToString;
exports.uint8ArrayToUtf8String = uint8ArrayToUtf8String;
exports.utf8StringToUint8Array = utf8StringToUint8Array;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The helper that transforms bytes with specific character encoding into string
 * @param bytes - the uint8array bytes
 * @param format - the format we use to encode the byte
 * @returns a string of the encoded string
 */
function uint8ArrayToString(bytes, format) {
  switch (format) {
    case "utf-8":
      return uint8ArrayToUtf8String(bytes);
    case "base64":
      return uint8ArrayToBase64(bytes);
    case "base64url":
      return uint8ArrayToBase64Url(bytes);
    case "hex":
      return uint8ArrayToHexString(bytes);
  }
}
/**
 * The helper that transforms string to specific character encoded bytes array.
 * @param value - the string to be converted
 * @param format - the format we use to decode the value
 * @returns a uint8array
 */
function stringToUint8Array(value, format) {
  switch (format) {
    case "utf-8":
      return utf8StringToUint8Array(value);
    case "base64":
      return base64ToUint8Array(value);
    case "base64url":
      return base64UrlToUint8Array(value);
    case "hex":
      return hexStringToUint8Array(value);
  }
}
/**
 * Decodes a Uint8Array into a Base64 string.
 * @internal
 */
function uint8ArrayToBase64(bytes) {
  return btoa([...bytes].map(x => String.fromCharCode(x)).join(""));
}
/**
 * Decodes a Uint8Array into a Base64Url string.
 * @internal
 */
function uint8ArrayToBase64Url(bytes) {
  return uint8ArrayToBase64(bytes).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
/**
 * Decodes a Uint8Array into a javascript string.
 * @internal
 */
function uint8ArrayToUtf8String(bytes) {
  const decoder = new TextDecoder();
  const dataString = decoder.decode(bytes);
  return dataString;
}
/**
 * Decodes a Uint8Array into a hex string
 * @internal
 */
function uint8ArrayToHexString(bytes) {
  return [...bytes].map(x => x.toString(16).padStart(2, "0")).join("");
}
/**
 * Encodes a JavaScript string into a Uint8Array.
 * @internal
 */
function utf8StringToUint8Array(value) {
  return new TextEncoder().encode(value);
}
/**
 * Encodes a Base64 string into a Uint8Array.
 * @internal
 */
function base64ToUint8Array(value) {
  return new Uint8Array([...atob(value)].map(x => x.charCodeAt(0)));
}
/**
 * Encodes a Base64Url string into a Uint8Array.
 * @internal
 */
function base64UrlToUint8Array(value) {
  const base64String = value.replace(/-/g, "+").replace(/_/g, "/");
  return base64ToUint8Array(base64String);
}
const hexDigits = new Set("0123456789abcdefABCDEF");
/**
 * Encodes a hex string into a Uint8Array
 * @internal
 */
function hexStringToUint8Array(value) {
  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior
  const bytes = new Uint8Array(value.length / 2);
  for (let i = 0; i < value.length / 2; ++i) {
    const highNibble = value[2 * i];
    const lowNibble = value[2 * i + 1];
    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {
      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte
      return bytes.slice(0, i);
    }
    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);
  }
  return bytes;
}
},{}],"node_modules/@azure/core-util/dist/browser/bytesEncoding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _bytesEncodingCommon = require("./bytesEncoding.common.js");
Object.keys(_bytesEncodingCommon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bytesEncodingCommon[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bytesEncodingCommon[key];
    }
  });
});
},{"./bytesEncoding.common.js":"node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js"}],"node_modules/@azure/core-util/dist/browser/sha256.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeSha256Hash = computeSha256Hash;
exports.computeSha256Hmac = computeSha256Hmac;
var _bytesEncoding = require("./bytesEncoding.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

let subtleCrypto;
/**
 * Returns a cached reference to the Web API crypto.subtle object.
 * @internal
 */
function getCrypto() {
  if (subtleCrypto) {
    return subtleCrypto;
  }
  if (!self.crypto || !self.crypto.subtle) {
    throw new Error("Your browser environment does not support cryptography functions.");
  }
  subtleCrypto = self.crypto.subtle;
  return subtleCrypto;
}
/**
 * Generates a SHA-256 HMAC signature.
 * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.
 * @param stringToSign - The data to be signed.
 * @param encoding - The textual encoding to use for the returned HMAC digest.
 */
async function computeSha256Hmac(key, stringToSign, encoding) {
  const crypto = getCrypto();
  const keyBytes = (0, _bytesEncoding.stringToUint8Array)(key, "base64");
  const stringToSignBytes = (0, _bytesEncoding.stringToUint8Array)(stringToSign, "utf-8");
  const cryptoKey = await crypto.importKey("raw", keyBytes, {
    name: "HMAC",
    hash: {
      name: "SHA-256"
    }
  }, false, ["sign"]);
  const signature = await crypto.sign({
    name: "HMAC",
    hash: {
      name: "SHA-256"
    }
  }, cryptoKey, stringToSignBytes);
  return (0, _bytesEncoding.uint8ArrayToString)(new Uint8Array(signature), encoding);
}
/**
 * Generates a SHA-256 hash.
 * @param content - The data to be included in the hash.
 * @param encoding - The textual encoding to use for the returned hash.
 */
async function computeSha256Hash(content, encoding) {
  const contentBytes = (0, _bytesEncoding.stringToUint8Array)(content, "utf-8");
  const digest = await getCrypto().digest({
    name: "SHA-256"
  }, contentBytes);
  return (0, _bytesEncoding.uint8ArrayToString)(new Uint8Array(digest), encoding);
}
},{"./bytesEncoding.js":"node_modules/@azure/core-util/dist/browser/bytesEncoding.js"}],"node_modules/@azure/core-util/dist/browser/sha256.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _sha256Common = require("./sha256.common.js");
Object.keys(_sha256Common).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sha256Common[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sha256Common[key];
    }
  });
});
},{"./sha256.common.js":"node_modules/@azure/core-util/dist/browser/sha256.common.js"}],"node_modules/@azure/core-util/dist/browser/typeGuards.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDefined = isDefined;
exports.isObjectWithProperties = isObjectWithProperties;
exports.objectHasProperty = objectHasProperty;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Helper TypeGuard that checks if something is defined or not.
 * @param thing - Anything
 */
function isDefined(thing) {
  return typeof thing !== "undefined" && thing !== null;
}
/**
 * Helper TypeGuard that checks if the input is an object with the specified properties.
 * @param thing - Anything.
 * @param properties - The name of the properties that should appear in the object.
 */
function isObjectWithProperties(thing, properties) {
  if (!isDefined(thing) || typeof thing !== "object") {
    return false;
  }
  for (const property of properties) {
    if (!objectHasProperty(thing, property)) {
      return false;
    }
  }
  return true;
}
/**
 * Helper TypeGuard that checks if the input is an object with the specified property.
 * @param thing - Any object.
 * @param property - The name of the property that should appear in the object.
 */
function objectHasProperty(thing, property) {
  return isDefined(thing) && typeof thing === "object" && property in thing;
}
},{}],"node_modules/@azure/core-util/dist/browser/uuidUtils.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateUUID = generateUUID;
exports.randomUUID = randomUUID;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Generated Universally Unique Identifier
 *
 * @returns RFC4122 v4 UUID.
 */
function generateUUID() {
  let uuid = "";
  for (let i = 0; i < 32; i++) {
    // Generate a random number between 0 and 15
    const randomNumber = Math.floor(Math.random() * 16);
    // Set the UUID version to 4 in the 13th position
    if (i === 12) {
      uuid += "4";
    } else if (i === 16) {
      // Set the UUID variant to "10" in the 17th position
      uuid += randomNumber & 0x3 | 0x8;
    } else {
      // Add a random hexadecimal digit to the UUID string
      uuid += randomNumber.toString(16);
    }
    // Add hyphens to the UUID string at the appropriate positions
    if (i === 7 || i === 11 || i === 15 || i === 19) {
      uuid += "-";
    }
  }
  return uuid;
}
/**
 * Generated Universally Unique Identifier
 *
 * @returns RFC4122 v4 UUID.
 */
function randomUUID() {
  return generateUUID();
}
},{}],"node_modules/@azure/core-util/dist/browser/uuidUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomUUID = randomUUID;
var _uuidUtilsCommon = require("./uuidUtils.common.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _a;
// NOTE: This could be undefined if not used in a secure context
const uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === "function" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : _uuidUtilsCommon.generateUUID;
/**
 * Generated Universally Unique Identifier
 *
 * @returns RFC4122 v4 UUID.
 */
function randomUUID() {
  return uuidFunction();
}
},{"./uuidUtils.common.js":"node_modules/@azure/core-util/dist/browser/uuidUtils.common.js"}],"node_modules/@azure/core-util/dist/browser/checkEnvironment.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWebWorker = exports.isReactNative = exports.isNodeRuntime = exports.isNodeLike = exports.isNode = exports.isDeno = exports.isBun = exports.isBrowser = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _a, _b, _c, _d;
/**
 * A constant that indicates whether the environment the code is running is a Web Browser.
 */
// eslint-disable-next-line @azure/azure-sdk/ts-no-window
const isBrowser = exports.isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
/**
 * A constant that indicates whether the environment the code is running is a Web Worker.
 */
const isWebWorker = exports.isWebWorker = typeof self === "object" && typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
/**
 * A constant that indicates whether the environment the code is running is Deno.
 */
const isDeno = exports.isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
/**
 * A constant that indicates whether the environment the code is running is Bun.sh.
 */
const isBun = exports.isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
/**
 * A constant that indicates whether the environment the code is running is a Node.js compatible environment.
 */
const isNodeLike = exports.isNodeLike = typeof globalThis.process !== "undefined" && Boolean(globalThis.process.version) && Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);
/**
 * A constant that indicates whether the environment the code is running is a Node.js compatible environment.
 * @deprecated Use `isNodeLike` instead.
 */
const isNode = exports.isNode = isNodeLike;
/**
 * A constant that indicates whether the environment the code is running is Node.JS.
 */
const isNodeRuntime = exports.isNodeRuntime = isNodeLike && !isBun && !isDeno;
/**
 * A constant that indicates whether the environment the code is running is in React-Native.
 */
// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js
const isReactNative = exports.isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";
},{}],"node_modules/@azure/core-util/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cancelablePromiseRace", {
  enumerable: true,
  get: function () {
    return _aborterUtils.cancelablePromiseRace;
  }
});
Object.defineProperty(exports, "computeSha256Hash", {
  enumerable: true,
  get: function () {
    return _sha.computeSha256Hash;
  }
});
Object.defineProperty(exports, "computeSha256Hmac", {
  enumerable: true,
  get: function () {
    return _sha.computeSha256Hmac;
  }
});
Object.defineProperty(exports, "createAbortablePromise", {
  enumerable: true,
  get: function () {
    return _createAbortablePromise.createAbortablePromise;
  }
});
Object.defineProperty(exports, "delay", {
  enumerable: true,
  get: function () {
    return _delay.delay;
  }
});
Object.defineProperty(exports, "getErrorMessage", {
  enumerable: true,
  get: function () {
    return _error.getErrorMessage;
  }
});
Object.defineProperty(exports, "getRandomIntegerInclusive", {
  enumerable: true,
  get: function () {
    return _random.getRandomIntegerInclusive;
  }
});
Object.defineProperty(exports, "isBrowser", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isBrowser;
  }
});
Object.defineProperty(exports, "isBun", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isBun;
  }
});
Object.defineProperty(exports, "isDefined", {
  enumerable: true,
  get: function () {
    return _typeGuards.isDefined;
  }
});
Object.defineProperty(exports, "isDeno", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isDeno;
  }
});
Object.defineProperty(exports, "isError", {
  enumerable: true,
  get: function () {
    return _error.isError;
  }
});
Object.defineProperty(exports, "isNode", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isNode;
  }
});
Object.defineProperty(exports, "isNodeLike", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isNodeLike;
  }
});
Object.defineProperty(exports, "isNodeRuntime", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isNodeRuntime;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _object.isObject;
  }
});
Object.defineProperty(exports, "isObjectWithProperties", {
  enumerable: true,
  get: function () {
    return _typeGuards.isObjectWithProperties;
  }
});
Object.defineProperty(exports, "isReactNative", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isReactNative;
  }
});
Object.defineProperty(exports, "isWebWorker", {
  enumerable: true,
  get: function () {
    return _checkEnvironment.isWebWorker;
  }
});
Object.defineProperty(exports, "objectHasProperty", {
  enumerable: true,
  get: function () {
    return _typeGuards.objectHasProperty;
  }
});
Object.defineProperty(exports, "randomUUID", {
  enumerable: true,
  get: function () {
    return _uuidUtils.randomUUID;
  }
});
Object.defineProperty(exports, "stringToUint8Array", {
  enumerable: true,
  get: function () {
    return _bytesEncoding.stringToUint8Array;
  }
});
Object.defineProperty(exports, "uint8ArrayToString", {
  enumerable: true,
  get: function () {
    return _bytesEncoding.uint8ArrayToString;
  }
});
var _delay = require("./delay.js");
var _aborterUtils = require("./aborterUtils.js");
var _createAbortablePromise = require("./createAbortablePromise.js");
var _random = require("./random.js");
var _object = require("./object.js");
var _error = require("./error.js");
var _sha = require("./sha256.js");
var _typeGuards = require("./typeGuards.js");
var _uuidUtils = require("./uuidUtils.js");
var _checkEnvironment = require("./checkEnvironment.js");
var _bytesEncoding = require("./bytesEncoding.js");
},{"./delay.js":"node_modules/@azure/core-util/dist/browser/delay.js","./aborterUtils.js":"node_modules/@azure/core-util/dist/browser/aborterUtils.js","./createAbortablePromise.js":"node_modules/@azure/core-util/dist/browser/createAbortablePromise.js","./random.js":"node_modules/@azure/core-util/dist/browser/random.js","./object.js":"node_modules/@azure/core-util/dist/browser/object.js","./error.js":"node_modules/@azure/core-util/dist/browser/error.js","./sha256.js":"node_modules/@azure/core-util/dist/browser/sha256.js","./typeGuards.js":"node_modules/@azure/core-util/dist/browser/typeGuards.js","./uuidUtils.js":"node_modules/@azure/core-util/dist/browser/uuidUtils.js","./checkEnvironment.js":"node_modules/@azure/core-util/dist/browser/checkEnvironment.js","./bytesEncoding.js":"node_modules/@azure/core-util/dist/browser/bytesEncoding.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sanitizer = void 0;
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const RedactedString = "REDACTED";
// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts
const defaultAllowedHeaderNames = ["x-ms-client-request-id", "x-ms-return-client-request-id", "x-ms-useragent", "x-ms-correlation-request-id", "x-ms-request-id", "client-request-id", "ms-cv", "return-client-request-id", "traceparent", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Origin", "Accept", "Accept-Encoding", "Cache-Control", "Connection", "Content-Length", "Content-Type", "Date", "ETag", "Expires", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "Last-Modified", "Pragma", "Request-Id", "Retry-After", "Server", "Transfer-Encoding", "User-Agent", "WWW-Authenticate"];
const defaultAllowedQueryParameters = ["api-version"];
/**
 * @internal
 */
class Sanitizer {
  constructor({
    additionalAllowedHeaderNames: allowedHeaderNames = [],
    additionalAllowedQueryParameters: allowedQueryParameters = []
  } = {}) {
    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);
    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);
    this.allowedHeaderNames = new Set(allowedHeaderNames.map(n => n.toLowerCase()));
    this.allowedQueryParameters = new Set(allowedQueryParameters.map(p => p.toLowerCase()));
  }
  sanitize(obj) {
    const seen = new Set();
    return JSON.stringify(obj, (key, value) => {
      // Ensure Errors include their interesting non-enumerable members
      if (value instanceof Error) {
        return Object.assign(Object.assign({}, value), {
          name: value.name,
          message: value.message
        });
      }
      if (key === "headers") {
        return this.sanitizeHeaders(value);
      } else if (key === "url") {
        return this.sanitizeUrl(value);
      } else if (key === "query") {
        return this.sanitizeQuery(value);
      } else if (key === "body") {
        // Don't log the request body
        return undefined;
      } else if (key === "response") {
        // Don't log response again
        return undefined;
      } else if (key === "operationSpec") {
        // When using sendOperationRequest, the request carries a massive
        // field with the autorest spec. No need to log it.
        return undefined;
      } else if (Array.isArray(value) || (0, _coreUtil.isObject)(value)) {
        if (seen.has(value)) {
          return "[Circular]";
        }
        seen.add(value);
      }
      return value;
    }, 2);
  }
  sanitizeUrl(value) {
    if (typeof value !== "string" || value === null || value === "") {
      return value;
    }
    const url = new URL(value);
    if (!url.search) {
      return value;
    }
    for (const [key] of url.searchParams) {
      if (!this.allowedQueryParameters.has(key.toLowerCase())) {
        url.searchParams.set(key, RedactedString);
      }
    }
    return url.toString();
  }
  sanitizeHeaders(obj) {
    const sanitized = {};
    for (const key of Object.keys(obj)) {
      if (this.allowedHeaderNames.has(key.toLowerCase())) {
        sanitized[key] = obj[key];
      } else {
        sanitized[key] = RedactedString;
      }
    }
    return sanitized;
  }
  sanitizeQuery(value) {
    if (typeof value !== "object" || value === null) {
      return value;
    }
    const sanitized = {};
    for (const k of Object.keys(value)) {
      if (this.allowedQueryParameters.has(k.toLowerCase())) {
        sanitized[k] = value[k];
      } else {
        sanitized[k] = RedactedString;
      }
    }
    return sanitized;
  }
}
exports.Sanitizer = Sanitizer;
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logPolicy = logPolicy;
exports.logPolicyName = void 0;
var _log = require("../log.js");
var _sanitizer = require("../util/sanitizer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the logPolicy.
 */
const logPolicyName = exports.logPolicyName = "logPolicy";
/**
 * A policy that logs all requests and responses.
 * @param options - Options to configure logPolicy.
 */
function logPolicy(options = {}) {
  var _a;
  const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : _log.logger.info;
  const sanitizer = new _sanitizer.Sanitizer({
    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  return {
    name: logPolicyName,
    async sendRequest(request, next) {
      if (!logger.enabled) {
        return next(request);
      }
      logger(`Request: ${sanitizer.sanitize(request)}`);
      const response = await next(request);
      logger(`Response status code: ${response.status}`);
      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);
      return response;
    }
  };
}
},{"../log.js":"node_modules/@azure/core-rest-pipeline/dist/browser/log.js","../util/sanitizer.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redirectPolicy = redirectPolicy;
exports.redirectPolicyName = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the redirectPolicy.
 */
const redirectPolicyName = exports.redirectPolicyName = "redirectPolicy";
/**
 * Methods that are allowed to follow redirects 301 and 302
 */
const allowedRedirect = ["GET", "HEAD"];
/**
 * A policy to follow Location headers from the server in order
 * to support server-side redirection.
 * In the browser, this policy is not used.
 * @param options - Options to control policy behavior.
 */
function redirectPolicy(options = {}) {
  const {
    maxRetries = 20
  } = options;
  return {
    name: redirectPolicyName,
    async sendRequest(request, next) {
      const response = await next(request);
      return handleRedirect(next, response, maxRetries);
    }
  };
}
async function handleRedirect(next, response, maxRetries, currentRetries = 0) {
  const {
    request,
    status,
    headers
  } = response;
  const locationHeader = headers.get("location");
  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && currentRetries < maxRetries) {
    const url = new URL(locationHeader, request.url);
    request.url = url.toString();
    // POST request with Status code 303 should be converted into a
    // redirected GET request if the redirect url is present in the location header
    if (status === 303) {
      request.method = "GET";
      request.headers.delete("Content-Length");
      delete request.body;
    }
    request.headers.delete("Authorization");
    const res = await next(request);
    return handleRedirect(next, res, maxRetries, currentRetries + 1);
  }
  return response;
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeaderName = getHeaderName;
exports.setPlatformSpecificData = setPlatformSpecificData;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @internal
 */
function getHeaderName() {
  return "x-ms-useragent";
}
function getBrowserInfo(userAgent) {
  const browserRegexes = [{
    name: "Firefox",
    regex: /Firefox\/([\d.]+)/
  }, {
    name: "Safari",
    regex: /Version\/([\d.]+).*Safari/
  }];
  for (const browser of browserRegexes) {
    const match = userAgent.match(browser.regex);
    if (match) {
      return {
        brand: browser.name,
        version: match[1]
      };
    }
  }
  return undefined;
}
function getBrandVersionString(brands) {
  const brandOrder = ["Google Chrome", "Microsoft Edge", "Opera", "Brave", "Chromium"];
  for (const brand of brandOrder) {
    const foundBrand = brands.find(b => b.brand === brand);
    if (foundBrand) {
      return foundBrand;
    }
  }
  return undefined;
}
/**
 * @internal
 */
async function setPlatformSpecificData(map) {
  const localNavigator = globalThis.navigator;
  let osPlatform = "unknown";
  if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {
    const entropyValues = await localNavigator.userAgentData.getHighEntropyValues(["architecture", "platformVersion"]);
    osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;
    // Get the brand and version
    const brand = getBrandVersionString(localNavigator.userAgentData.brands);
    if (brand) {
      map.set(brand.brand, brand.version);
    }
  } else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {
    osPlatform = localNavigator.platform;
    const brand = getBrowserInfo(localNavigator.userAgent);
    if (brand) {
      map.set(brand.brand, brand.version);
    }
  } else if (typeof globalThis.EdgeRuntime === "string") {
    map.set("EdgeRuntime", globalThis.EdgeRuntime);
  }
  map.set("OS", osPlatform);
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SDK_VERSION = exports.DEFAULT_RETRY_POLICY_COUNT = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const SDK_VERSION = exports.SDK_VERSION = "1.16.2";
const DEFAULT_RETRY_POLICY_COUNT = exports.DEFAULT_RETRY_POLICY_COUNT = 3;
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserAgentHeaderName = getUserAgentHeaderName;
exports.getUserAgentValue = getUserAgentValue;
var _userAgentPlatform = require("./userAgentPlatform.js");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function getUserAgentString(telemetryInfo) {
  const parts = [];
  for (const [key, value] of telemetryInfo) {
    const token = value ? `${key}/${value}` : key;
    parts.push(token);
  }
  return parts.join(" ");
}
/**
 * @internal
 */
function getUserAgentHeaderName() {
  return (0, _userAgentPlatform.getHeaderName)();
}
/**
 * @internal
 */
async function getUserAgentValue(prefix) {
  const runtimeInfo = new Map();
  runtimeInfo.set("core-rest-pipeline", _constants.SDK_VERSION);
  await (0, _userAgentPlatform.setPlatformSpecificData)(runtimeInfo);
  const defaultAgent = getUserAgentString(runtimeInfo);
  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;
  return userAgentValue;
}
},{"./userAgentPlatform.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userAgentPolicy = userAgentPolicy;
exports.userAgentPolicyName = void 0;
var _userAgent = require("../util/userAgent.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const UserAgentHeaderName = (0, _userAgent.getUserAgentHeaderName)();
/**
 * The programmatic identifier of the userAgentPolicy.
 */
const userAgentPolicyName = exports.userAgentPolicyName = "userAgentPolicy";
/**
 * A policy that sets the User-Agent header (or equivalent) to reflect
 * the library version.
 * @param options - Options to customize the user agent value.
 */
function userAgentPolicy(options = {}) {
  const userAgentValue = (0, _userAgent.getUserAgentValue)(options.userAgentPrefix);
  return {
    name: userAgentPolicyName,
    async sendRequest(request, next) {
      if (!request.headers.has(UserAgentHeaderName)) {
        request.headers.set(UserAgentHeaderName, await userAgentValue);
      }
      return next(request);
    }
  };
}
},{"../util/userAgent.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBlob = isBlob;
exports.isNodeReadableStream = isNodeReadableStream;
exports.isReadableStream = isReadableStream;
exports.isWebReadableStream = isWebReadableStream;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function isNodeReadableStream(x) {
  return Boolean(x && typeof x["pipe"] === "function");
}
function isWebReadableStream(x) {
  return Boolean(x && typeof x.getReader === "function" && typeof x.tee === "function");
}
function isReadableStream(x) {
  return isNodeReadableStream(x) || isWebReadableStream(x);
}
function isBlob(x) {
  return typeof x.stream === "function";
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFile = createFile;
exports.createFileFromStream = createFileFromStream;
exports.getRawContent = getRawContent;
var _coreUtil = require("@azure/core-util");
var _typeGuards = require("./typeGuards.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const unimplementedMethods = {
  arrayBuffer: () => {
    throw new Error("Not implemented");
  },
  slice: () => {
    throw new Error("Not implemented");
  },
  text: () => {
    throw new Error("Not implemented");
  }
};
/**
 * Private symbol used as key on objects created using createFile containing the
 * original source of the file object.
 *
 * This is used in Node to access the original Node stream without using Blob#stream, which
 * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and
 * Readable#to/fromWeb in Node versions we support:
 * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)
 * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)
 *
 * Once these versions are no longer supported, we may be able to stop doing this.
 *
 * @internal
 */
const rawContent = Symbol("rawContent");
function hasRawContent(x) {
  return typeof x[rawContent] === "function";
}
/**
 * Extract the raw content from a given blob-like object. If the input was created using createFile
 * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.
 * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.
 *
 * @internal
 */
function getRawContent(blob) {
  if (hasRawContent(blob)) {
    return blob[rawContent]();
  } else {
    return blob.stream();
  }
}
/**
 * Create an object that implements the File interface. This object is intended to be
 * passed into RequestBodyType.formData, and is not guaranteed to work as expected in
 * other situations.
 *
 * Use this function to:
 * - Create a File object for use in RequestBodyType.formData in environments where the
 *   global File object is unavailable.
 * - Create a File-like object from a readable stream without reading the stream into memory.
 *
 * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is
 *                  passed in a request's form data map, the stream will not be read into memory
 *                  and instead will be streamed when the request is made. In the event of a retry, the
 *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.
 * @param name - the name of the file.
 * @param options - optional metadata about the file, e.g. file name, file size, MIME type.
 */
function createFileFromStream(stream, name, options = {}) {
  var _a, _b, _c, _d;
  return Object.assign(Object.assign({}, unimplementedMethods), {
    type: (_a = options.type) !== null && _a !== void 0 ? _a : "",
    lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),
    webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : "",
    size: (_d = options.size) !== null && _d !== void 0 ? _d : -1,
    name,
    stream: () => {
      const s = stream();
      if ((0, _typeGuards.isNodeReadableStream)(s)) {
        throw new Error("Not supported: a Node stream was provided as input to createFileFromStream.");
      }
      return s;
    },
    [rawContent]: stream
  });
}
/**
 * Create an object that implements the File interface. This object is intended to be
 * passed into RequestBodyType.formData, and is not guaranteed to work as expected in
 * other situations.
 *
 * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.
 *
 * @param content - the content of the file as a Uint8Array in memory.
 * @param name - the name of the file.
 * @param options - optional metadata about the file, e.g. file name, file size, MIME type.
 */
function createFile(content, name, options = {}) {
  var _a, _b, _c;
  if (_coreUtil.isNodeLike) {
    return Object.assign(Object.assign({}, unimplementedMethods), {
      type: (_a = options.type) !== null && _a !== void 0 ? _a : "",
      lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),
      webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : "",
      size: content.byteLength,
      name,
      arrayBuffer: async () => content.buffer,
      stream: () => new Blob([content]).stream(),
      [rawContent]: () => content
    });
  } else {
    return new File([content], name, options);
  }
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./typeGuards.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;
var _file = require("./file.js");
var _typeGuards = require("./typeGuards.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Drain the content of the given ReadableStream into a Blob.
 * The blob's content may end up in memory or on disk dependent on size.
 */
function drain(stream) {
  return new Response(stream).blob();
}
async function toBlobPart(source) {
  if (source instanceof Blob || source instanceof Uint8Array) {
    return source;
  }
  if ((0, _typeGuards.isWebReadableStream)(source)) {
    return drain(source);
  }
  // If it's not a true Blob, and it's not a Uint8Array, we can assume the source
  // is a fake File created by createFileFromStream and we can get the original stream
  // using getRawContent.
  const rawContent = (0, _file.getRawContent)(source);
  // Shouldn't happen but guard for it anyway
  if ((0, _typeGuards.isNodeReadableStream)(rawContent)) {
    throw new Error("Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.");
  }
  return toBlobPart(rawContent);
}
/**
 * Utility function that concatenates a set of binary inputs into one combined output.
 *
 * @param sources - array of sources for the concatenation
 * @returns - in Node, a (() =\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.
 *           In browser, returns a `Blob` representing all the concatenated inputs.
 *
 * @internal
 */
async function concat(sources) {
  const parts = [];
  for (const source of sources) {
    parts.push(await toBlobPart(typeof source === "function" ? source() : source));
  }
  return new Blob(parts);
}
},{"./file.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js","./typeGuards.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _concatCommon = require("./concat.common.js");
Object.keys(_concatCommon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _concatCommon[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _concatCommon[key];
    }
  });
});
},{"./concat.common.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multipartPolicy = multipartPolicy;
exports.multipartPolicyName = void 0;
var _coreUtil = require("@azure/core-util");
var _concat = require("../util/concat.js");
var _typeGuards = require("../util/typeGuards.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function generateBoundary() {
  return `----AzSDKFormBoundary${(0, _coreUtil.randomUUID)()}`;
}
function encodeHeaders(headers) {
  let result = "";
  for (const [key, value] of headers) {
    result += `${key}: ${value}\r\n`;
  }
  return result;
}
function getLength(source) {
  if (source instanceof Uint8Array) {
    return source.byteLength;
  } else if ((0, _typeGuards.isBlob)(source)) {
    // if was created using createFile then -1 means we have an unknown size
    return source.size === -1 ? undefined : source.size;
  } else {
    return undefined;
  }
}
function getTotalLength(sources) {
  let total = 0;
  for (const source of sources) {
    const partLength = getLength(source);
    if (partLength === undefined) {
      return undefined;
    } else {
      total += partLength;
    }
  }
  return total;
}
async function buildRequestBody(request, parts, boundary) {
  const sources = [(0, _coreUtil.stringToUint8Array)(`--${boundary}`, "utf-8"), ...parts.flatMap(part => [(0, _coreUtil.stringToUint8Array)("\r\n", "utf-8"), (0, _coreUtil.stringToUint8Array)(encodeHeaders(part.headers), "utf-8"), (0, _coreUtil.stringToUint8Array)("\r\n", "utf-8"), part.body, (0, _coreUtil.stringToUint8Array)(`\r\n--${boundary}`, "utf-8")]), (0, _coreUtil.stringToUint8Array)("--\r\n\r\n", "utf-8")];
  const contentLength = getTotalLength(sources);
  if (contentLength) {
    request.headers.set("Content-Length", contentLength);
  }
  request.body = await (0, _concat.concat)(sources);
}
/**
 * Name of multipart policy
 */
const multipartPolicyName = exports.multipartPolicyName = "multipartPolicy";
const maxBoundaryLength = 70;
const validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);
function assertValidBoundary(boundary) {
  if (boundary.length > maxBoundaryLength) {
    throw new Error(`Multipart boundary "${boundary}" exceeds maximum length of 70 characters`);
  }
  if (Array.from(boundary).some(x => !validBoundaryCharacters.has(x))) {
    throw new Error(`Multipart boundary "${boundary}" contains invalid characters`);
  }
}
/**
 * Pipeline policy for multipart requests
 */
function multipartPolicy() {
  return {
    name: multipartPolicyName,
    async sendRequest(request, next) {
      var _a;
      if (!request.multipartBody) {
        return next(request);
      }
      if (request.body) {
        throw new Error("multipartBody and regular body cannot be set at the same time");
      }
      let boundary = request.multipartBody.boundary;
      const contentTypeHeader = (_a = request.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "multipart/mixed";
      const parsedHeader = contentTypeHeader.match(/^(multipart\/[^ ;]+)(?:; *boundary=(.+))?$/);
      if (!parsedHeader) {
        throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);
      }
      const [, contentType, parsedBoundary] = parsedHeader;
      if (parsedBoundary && boundary && parsedBoundary !== boundary) {
        throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);
      }
      boundary !== null && boundary !== void 0 ? boundary : boundary = parsedBoundary;
      if (boundary) {
        assertValidBoundary(boundary);
      } else {
        boundary = generateBoundary();
      }
      request.headers.set("Content-Type", `${contentType}; boundary=${boundary}`);
      await buildRequestBody(request, request.multipartBody.parts, boundary);
      request.multipartBody = undefined;
      return next(request);
    }
  };
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../util/concat.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js","../util/typeGuards.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decompressResponsePolicy = decompressResponsePolicy;
exports.decompressResponsePolicyName = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/*
 * NOTE: When moving this file, please update "browser" section in package.json
 */
const decompressResponsePolicyName = exports.decompressResponsePolicyName = "decompressResponsePolicy";
/**
 * decompressResponsePolicy is not supported in the browser and attempting
 * to use it will raise an error.
 */
function decompressResponsePolicy() {
  throw new Error("decompressResponsePolicy is not supported in browser environment");
}
},{}],"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/AbortError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortError = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */
class AbortError extends Error {
  constructor(message) {
    super(message);
    this.name = "AbortError";
  }
}
exports.AbortError = AbortError;
},{}],"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbortError", {
  enumerable: true,
  get: function () {
    return _AbortError.AbortError;
  }
});
var _AbortError = require("./AbortError.js");
},{"./AbortError.js":"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/AbortError.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = delay;
exports.parseHeaderValueAsNumber = parseHeaderValueAsNumber;
var _abortController = require("@azure/abort-controller");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const StandardAbortMessage = "The operation was aborted.";
/**
 * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.
 * @param delayInMs - The number of milliseconds to be delayed.
 * @param value - The value to be resolved with after a timeout of t milliseconds.
 * @param options - The options for delay - currently abort options
 *                  - abortSignal - The abortSignal associated with containing operation.
 *                  - abortErrorMsg - The abort error message associated with containing operation.
 * @returns Resolved promise
 */
function delay(delayInMs, value, options) {
  return new Promise((resolve, reject) => {
    let timer = undefined;
    let onAborted = undefined;
    const rejectOnAbort = () => {
      return reject(new _abortController.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));
    };
    const removeListeners = () => {
      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {
        options.abortSignal.removeEventListener("abort", onAborted);
      }
    };
    onAborted = () => {
      if (timer) {
        clearTimeout(timer);
      }
      removeListeners();
      return rejectOnAbort();
    };
    if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {
      return rejectOnAbort();
    }
    timer = setTimeout(() => {
      removeListeners();
      resolve(value);
    }, delayInMs);
    if (options === null || options === void 0 ? void 0 : options.abortSignal) {
      options.abortSignal.addEventListener("abort", onAborted);
    }
  });
}
/**
 * @internal
 * @returns the parsed value or undefined if the parsed value is invalid.
 */
function parseHeaderValueAsNumber(response, headerName) {
  const value = response.headers.get(headerName);
  if (!value) return;
  const valueAsNum = Number(value);
  if (Number.isNaN(valueAsNum)) return;
  return valueAsNum;
}
},{"@azure/abort-controller":"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/index.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isThrottlingRetryResponse = isThrottlingRetryResponse;
exports.throttlingRetryStrategy = throttlingRetryStrategy;
var _helpers = require("../util/helpers.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The header that comes back from Azure services representing
 * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).
 */
const RetryAfterHeader = "Retry-After";
/**
 * The headers that come back from Azure services representing
 * the amount of time (minimum) to wait to retry.
 *
 * "retry-after-ms", "x-ms-retry-after-ms" : milliseconds
 * "Retry-After" : seconds or timestamp
 */
const AllRetryAfterHeaders = ["retry-after-ms", "x-ms-retry-after-ms", RetryAfterHeader];
/**
 * A response is a throttling retry response if it has a throttling status code (429 or 503),
 * as long as one of the [ "Retry-After" or "retry-after-ms" or "x-ms-retry-after-ms" ] headers has a valid value.
 *
 * Returns the `retryAfterInMs` value if the response is a throttling retry response.
 * If not throttling retry response, returns `undefined`.
 *
 * @internal
 */
function getRetryAfterInMs(response) {
  if (!(response && [429, 503].includes(response.status))) return undefined;
  try {
    // Headers: "retry-after-ms", "x-ms-retry-after-ms", "Retry-After"
    for (const header of AllRetryAfterHeaders) {
      const retryAfterValue = (0, _helpers.parseHeaderValueAsNumber)(response, header);
      if (retryAfterValue === 0 || retryAfterValue) {
        // "Retry-After" header ==> seconds
        // "retry-after-ms", "x-ms-retry-after-ms" headers ==> milli-seconds
        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;
        return retryAfterValue * multiplyingFactor; // in milli-seconds
      }
    }
    // RetryAfterHeader ("Retry-After") has a special case where it might be formatted as a date instead of a number of seconds
    const retryAfterHeader = response.headers.get(RetryAfterHeader);
    if (!retryAfterHeader) return;
    const date = Date.parse(retryAfterHeader);
    const diff = date - Date.now();
    // negative diff would mean a date in the past, so retry asap with 0 milliseconds
    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;
  } catch (e) {
    return undefined;
  }
}
/**
 * A response is a retry response if it has a throttling status code (429 or 503),
 * as long as one of the [ "Retry-After" or "retry-after-ms" or "x-ms-retry-after-ms" ] headers has a valid value.
 */
function isThrottlingRetryResponse(response) {
  return Number.isFinite(getRetryAfterInMs(response));
}
function throttlingRetryStrategy() {
  return {
    name: "throttlingRetryStrategy",
    retry({
      response
    }) {
      const retryAfterInMs = getRetryAfterInMs(response);
      if (!Number.isFinite(retryAfterInMs)) {
        return {
          skipStrategy: true
        };
      }
      return {
        retryAfterInMs
      };
    }
  };
}
},{"../util/helpers.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exponentialRetryStrategy = exponentialRetryStrategy;
exports.isExponentialRetryResponse = isExponentialRetryResponse;
exports.isSystemError = isSystemError;
var _coreUtil = require("@azure/core-util");
var _throttlingRetryStrategy = require("./throttlingRetryStrategy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// intervals are in milliseconds
const DEFAULT_CLIENT_RETRY_INTERVAL = 1000;
const DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;
/**
 * A retry strategy that retries with an exponentially increasing delay in these two cases:
 * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).
 * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).
 */
function exponentialRetryStrategy(options = {}) {
  var _a, _b;
  const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;
  const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  let retryAfterInMs = retryInterval;
  return {
    name: "exponentialRetryStrategy",
    retry({
      retryCount,
      response,
      responseError
    }) {
      const matchedSystemError = isSystemError(responseError);
      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;
      const isExponential = isExponentialRetryResponse(response);
      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;
      const unknownResponse = response && ((0, _throttlingRetryStrategy.isThrottlingRetryResponse)(response) || !isExponential);
      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {
        return {
          skipStrategy: true
        };
      }
      if (responseError && !matchedSystemError && !isExponential) {
        return {
          errorToThrow: responseError
        };
      }
      // Exponentially increase the delay each time
      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);
      // Don't let the delay exceed the maximum
      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);
      // Allow the final value to have some "jitter" (within 50% of the delay size) so
      // that retries across multiple clients don't occur simultaneously.
      retryAfterInMs = clampedExponentialDelay / 2 + (0, _coreUtil.getRandomIntegerInclusive)(0, clampedExponentialDelay / 2);
      return {
        retryAfterInMs
      };
    }
  };
}
/**
 * A response is a retry response if it has status codes:
 * - 408, or
 * - Greater or equal than 500, except for 501 and 505.
 */
function isExponentialRetryResponse(response) {
  return Boolean(response && response.status !== undefined && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);
}
/**
 * Determines whether an error from a pipeline response was triggered in the network layer.
 */
function isSystemError(err) {
  if (!err) {
    return false;
  }
  return err.code === "ETIMEDOUT" || err.code === "ESOCKETTIMEDOUT" || err.code === "ECONNREFUSED" || err.code === "ECONNRESET" || err.code === "ENOENT" || err.code === "ENOTFOUND";
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./throttlingRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retryPolicy = retryPolicy;
var _helpers = require("../util/helpers.js");
var _logger = require("@azure/logger");
var _abortController = require("@azure/abort-controller");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const retryPolicyLogger = (0, _logger.createClientLogger)("core-rest-pipeline retryPolicy");
/**
 * The programmatic identifier of the retryPolicy.
 */
const retryPolicyName = "retryPolicy";
/**
 * retryPolicy is a generic policy to enable retrying requests when certain conditions are met
 */
function retryPolicy(strategies, options = {
  maxRetries: _constants.DEFAULT_RETRY_POLICY_COUNT
}) {
  const logger = options.logger || retryPolicyLogger;
  return {
    name: retryPolicyName,
    async sendRequest(request, next) {
      var _a, _b;
      let response;
      let responseError;
      let retryCount = -1;
      // eslint-disable-next-line no-constant-condition
      retryRequest: while (true) {
        retryCount += 1;
        response = undefined;
        responseError = undefined;
        try {
          logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);
          response = await next(request);
          logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);
        } catch (e) {
          logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);
          // RestErrors are valid targets for the retry strategies.
          // If none of the retry strategies can work with them, they will be thrown later in this policy.
          // If the received error is not a RestError, it is immediately thrown.
          responseError = e;
          if (!e || responseError.name !== "RestError") {
            throw e;
          }
          response = responseError.response;
        }
        if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {
          logger.error(`Retry ${retryCount}: Request aborted.`);
          const abortError = new _abortController.AbortError();
          throw abortError;
        }
        if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : _constants.DEFAULT_RETRY_POLICY_COUNT)) {
          logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);
          if (responseError) {
            throw responseError;
          } else if (response) {
            return response;
          } else {
            throw new Error("Maximum retries reached with no response or error to throw");
          }
        }
        logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);
        strategiesLoop: for (const strategy of strategies) {
          const strategyLogger = strategy.logger || retryPolicyLogger;
          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);
          const modifiers = strategy.retry({
            retryCount,
            response,
            responseError
          });
          if (modifiers.skipStrategy) {
            strategyLogger.info(`Retry ${retryCount}: Skipped.`);
            continue strategiesLoop;
          }
          const {
            errorToThrow,
            retryAfterInMs,
            redirectTo
          } = modifiers;
          if (errorToThrow) {
            strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);
            throw errorToThrow;
          }
          if (retryAfterInMs || retryAfterInMs === 0) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);
            await (0, _helpers.delay)(retryAfterInMs, undefined, {
              abortSignal: request.abortSignal
            });
            continue retryRequest;
          }
          if (redirectTo) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);
            request.url = redirectTo;
            continue retryRequest;
          }
        }
        if (responseError) {
          logger.info(`None of the retry strategies could work with the received error. Throwing it.`);
          throw responseError;
        }
        if (response) {
          logger.info(`None of the retry strategies could work with the received response. Returning it.`);
          return response;
        }
        // If all the retries skip and there's no response,
        // we're still in the retry loop, so a new request will be sent
        // until `maxRetries` is reached.
      }
    }
  };
}
},{"../util/helpers.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js","@azure/logger":"node_modules/@azure/logger/dist/browser/index.js","@azure/abort-controller":"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/index.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultRetryPolicy = defaultRetryPolicy;
exports.defaultRetryPolicyName = void 0;
var _exponentialRetryStrategy = require("../retryStrategies/exponentialRetryStrategy.js");
var _throttlingRetryStrategy = require("../retryStrategies/throttlingRetryStrategy.js");
var _retryPolicy = require("./retryPolicy.js");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Name of the {@link defaultRetryPolicy}
 */
const defaultRetryPolicyName = exports.defaultRetryPolicyName = "defaultRetryPolicy";
/**
 * A policy that retries according to three strategies:
 * - When the server sends a 429 response with a Retry-After header.
 * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).
 * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.
 */
function defaultRetryPolicy(options = {}) {
  var _a;
  return {
    name: defaultRetryPolicyName,
    sendRequest: (0, _retryPolicy.retryPolicy)([(0, _throttlingRetryStrategy.throttlingRetryStrategy)(), (0, _exponentialRetryStrategy.exponentialRetryStrategy)(options)], {
      maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants.DEFAULT_RETRY_POLICY_COUNT
    }).sendRequest
  };
}
},{"../retryStrategies/exponentialRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js","../retryStrategies/throttlingRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js","./retryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpHeaders = createHttpHeaders;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function normalizeName(name) {
  return name.toLowerCase();
}
function* headerIterator(map) {
  for (const entry of map.values()) {
    yield [entry.name, entry.value];
  }
}
class HttpHeadersImpl {
  constructor(rawHeaders) {
    this._headersMap = new Map();
    if (rawHeaders) {
      for (const headerName of Object.keys(rawHeaders)) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param name - The name of the header to set. This value is case-insensitive.
   * @param value - The value of the header to set.
   */
  set(name, value) {
    this._headersMap.set(normalizeName(name), {
      name,
      value: String(value).trim()
    });
  }
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param name - The name of the header. This value is case-insensitive.
   */
  get(name) {
    var _a;
    return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;
  }
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   * @param name - The name of the header to set. This value is case-insensitive.
   */
  has(name) {
    return this._headersMap.has(normalizeName(name));
  }
  /**
   * Remove the header with the provided headerName.
   * @param name - The name of the header to remove.
   */
  delete(name) {
    this._headersMap.delete(normalizeName(name));
  }
  /**
   * Get the JSON object representation of this HTTP header collection.
   */
  toJSON(options = {}) {
    const result = {};
    if (options.preserveCase) {
      for (const entry of this._headersMap.values()) {
        result[entry.name] = entry.value;
      }
    } else {
      for (const [normalizedName, entry] of this._headersMap) {
        result[normalizedName] = entry.value;
      }
    }
    return result;
  }
  /**
   * Get the string representation of this HTTP header collection.
   */
  toString() {
    return JSON.stringify(this.toJSON({
      preserveCase: true
    }));
  }
  /**
   * Iterate over tuples of header [name, value] pairs.
   */
  [Symbol.iterator]() {
    return headerIterator(this._headersMap);
  }
}
/**
 * Creates an object that satisfies the `HttpHeaders` interface.
 * @param rawHeaders - A simple object representing initial headers
 */
function createHttpHeaders(rawHeaders) {
  return new HttpHeadersImpl(rawHeaders);
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formDataPolicy = formDataPolicy;
exports.formDataPolicyName = void 0;
var _coreUtil = require("@azure/core-util");
var _httpHeaders = require("../httpHeaders.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the formDataPolicy.
 */
const formDataPolicyName = exports.formDataPolicyName = "formDataPolicy";
function formDataToFormDataMap(formData) {
  var _a;
  const formDataMap = {};
  for (const [key, value] of formData.entries()) {
    (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : formDataMap[key] = [];
    formDataMap[key].push(value);
  }
  return formDataMap;
}
/**
 * A policy that encodes FormData on the request into the body.
 */
function formDataPolicy() {
  return {
    name: formDataPolicyName,
    async sendRequest(request, next) {
      if (_coreUtil.isNodeLike && typeof FormData !== "undefined" && request.body instanceof FormData) {
        request.formData = formDataToFormDataMap(request.body);
        request.body = undefined;
      }
      if (request.formData) {
        const contentType = request.headers.get("Content-Type");
        if (contentType && contentType.indexOf("application/x-www-form-urlencoded") !== -1) {
          request.body = wwwFormUrlEncode(request.formData);
        } else {
          await prepareFormData(request.formData, request);
        }
        request.formData = undefined;
      }
      return next(request);
    }
  };
}
function wwwFormUrlEncode(formData) {
  const urlSearchParams = new URLSearchParams();
  for (const [key, value] of Object.entries(formData)) {
    if (Array.isArray(value)) {
      for (const subValue of value) {
        urlSearchParams.append(key, subValue.toString());
      }
    } else {
      urlSearchParams.append(key, value.toString());
    }
  }
  return urlSearchParams.toString();
}
async function prepareFormData(formData, request) {
  // validate content type (multipart/form-data)
  const contentType = request.headers.get("Content-Type");
  if (contentType && !contentType.startsWith("multipart/form-data")) {
    // content type is specified and is not multipart/form-data. Exit.
    return;
  }
  request.headers.set("Content-Type", contentType !== null && contentType !== void 0 ? contentType : "multipart/form-data");
  // set body to MultipartRequestBody using content from FormDataMap
  const parts = [];
  for (const [fieldName, values] of Object.entries(formData)) {
    for (const value of Array.isArray(values) ? values : [values]) {
      if (typeof value === "string") {
        parts.push({
          headers: (0, _httpHeaders.createHttpHeaders)({
            "Content-Disposition": `form-data; name="${fieldName}"`
          }),
          body: (0, _coreUtil.stringToUint8Array)(value, "utf-8")
        });
      } else if (value === undefined || value === null || typeof value !== "object") {
        throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);
      } else {
        // using || instead of ?? here since if value.name is empty we should create a file name
        const fileName = value.name || "blob";
        const headers = (0, _httpHeaders.createHttpHeaders)();
        headers.set("Content-Disposition", `form-data; name="${fieldName}"; filename="${fileName}"`);
        // again, || is used since an empty value.type means the content type is unset
        headers.set("Content-Type", value.type || "application/octet-stream");
        parts.push({
          headers,
          body: value
        });
      }
    }
  }
  request.multipartBody = {
    parts
  };
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../httpHeaders.js":"node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultProxySettings = getDefaultProxySettings;
exports.proxyPolicy = proxyPolicy;
exports.proxyPolicyName = void 0;
exports.resetCachedProxyAgents = resetCachedProxyAgents;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const proxyPolicyName = exports.proxyPolicyName = "proxyPolicy";
const errorMessage = "proxyPolicy is not supported in browser environment";
function getDefaultProxySettings() {
  throw new Error(errorMessage);
}
/**
 * proxyPolicy is not supported in the browser and attempting
 * to use it will raise an error.
 */
function proxyPolicy() {
  throw new Error(errorMessage);
}
/**
 * A function to reset the cached agents.
 * proxyPolicy is not supported in the browser and attempting
 * to use it will raise an error.
 * @internal
 */
function resetCachedProxyAgents() {
  throw new Error(errorMessage);
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _proxyPolicyCommon = require("./proxyPolicy.common.js");
Object.keys(_proxyPolicyCommon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _proxyPolicyCommon[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _proxyPolicyCommon[key];
    }
  });
});
},{"./proxyPolicy.common.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setClientRequestIdPolicy = setClientRequestIdPolicy;
exports.setClientRequestIdPolicyName = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the setClientRequestIdPolicy.
 */
const setClientRequestIdPolicyName = exports.setClientRequestIdPolicyName = "setClientRequestIdPolicy";
/**
 * Each PipelineRequest gets a unique id upon creation.
 * This policy passes that unique id along via an HTTP header to enable better
 * telemetry and tracing.
 * @param requestIdHeaderName - The name of the header to pass the request ID to.
 */
function setClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
  return {
    name: setClientRequestIdPolicyName,
    async sendRequest(request, next) {
      if (!request.headers.has(requestIdHeaderName)) {
        request.headers.set(requestIdHeaderName, request.requestId);
      }
      return next(request);
    }
  };
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tlsPolicy = tlsPolicy;
exports.tlsPolicyName = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Name of the TLS Policy
 */
const tlsPolicyName = exports.tlsPolicyName = "tlsPolicy";
/**
 * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.
 */
function tlsPolicy(tlsSettings) {
  return {
    name: tlsPolicyName,
    sendRequest: async (req, next) => {
      // Users may define a request tlsSettings, honor those over the client level one
      if (!req.tlsSettings) {
        req.tlsSettings = tlsSettings;
      }
      return next(req);
    }
  };
}
},{}],"node_modules/@azure/core-tracing/dist/browser/tracingContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TracingContextImpl = void 0;
exports.createTracingContext = createTracingContext;
exports.knownContextKeys = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/** @internal */
const knownContextKeys = exports.knownContextKeys = {
  span: Symbol.for("@azure/core-tracing span"),
  namespace: Symbol.for("@azure/core-tracing namespace")
};
/**
 * Creates a new {@link TracingContext} with the given options.
 * @param options - A set of known keys that may be set on the context.
 * @returns A new {@link TracingContext} with the given options.
 *
 * @internal
 */
function createTracingContext(options = {}) {
  let context = new TracingContextImpl(options.parentContext);
  if (options.span) {
    context = context.setValue(knownContextKeys.span, options.span);
  }
  if (options.namespace) {
    context = context.setValue(knownContextKeys.namespace, options.namespace);
  }
  return context;
}
/** @internal */
class TracingContextImpl {
  constructor(initialContext) {
    this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map();
  }
  setValue(key, value) {
    const newContext = new TracingContextImpl(this);
    newContext._contextMap.set(key, value);
    return newContext;
  }
  getValue(key) {
    return this._contextMap.get(key);
  }
  deleteValue(key) {
    const newContext = new TracingContextImpl(this);
    newContext._contextMap.delete(key);
    return newContext;
  }
}
exports.TracingContextImpl = TracingContextImpl;
},{}],"node_modules/@azure/core-tracing/dist/browser/state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.state = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.
 */
const state = exports.state = {
  instrumenterImplementation: undefined
};
},{}],"node_modules/@azure/core-tracing/dist/browser/instrumenter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultInstrumenter = createDefaultInstrumenter;
exports.createDefaultTracingSpan = createDefaultTracingSpan;
exports.getInstrumenter = getInstrumenter;
exports.useInstrumenter = useInstrumenter;
var _tracingContext = require("./tracingContext.js");
var _state = require("./state.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function createDefaultTracingSpan() {
  return {
    end: () => {
      // noop
    },
    isRecording: () => false,
    recordException: () => {
      // noop
    },
    setAttribute: () => {
      // noop
    },
    setStatus: () => {
      // noop
    }
  };
}
function createDefaultInstrumenter() {
  return {
    createRequestHeaders: () => {
      return {};
    },
    parseTraceparentHeader: () => {
      return undefined;
    },
    startSpan: (_name, spanOptions) => {
      return {
        span: createDefaultTracingSpan(),
        tracingContext: (0, _tracingContext.createTracingContext)({
          parentContext: spanOptions.tracingContext
        })
      };
    },
    withContext(_context, callback, ...callbackArgs) {
      return callback(...callbackArgs);
    }
  };
}
/**
 * Extends the Azure SDK with support for a given instrumenter implementation.
 *
 * @param instrumenter - The instrumenter implementation to use.
 */
function useInstrumenter(instrumenter) {
  _state.state.instrumenterImplementation = instrumenter;
}
/**
 * Gets the currently set instrumenter, a No-Op instrumenter by default.
 *
 * @returns The currently set instrumenter
 */
function getInstrumenter() {
  if (!_state.state.instrumenterImplementation) {
    _state.state.instrumenterImplementation = createDefaultInstrumenter();
  }
  return _state.state.instrumenterImplementation;
}
},{"./tracingContext.js":"node_modules/@azure/core-tracing/dist/browser/tracingContext.js","./state.js":"node_modules/@azure/core-tracing/dist/browser/state.js"}],"node_modules/@azure/core-tracing/dist/browser/tracingClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTracingClient = createTracingClient;
var _instrumenter = require("./instrumenter.js");
var _tracingContext = require("./tracingContext.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a new tracing client.
 *
 * @param options - Options used to configure the tracing client.
 * @returns - An instance of {@link TracingClient}.
 */
function createTracingClient(options) {
  const {
    namespace,
    packageName,
    packageVersion
  } = options;
  function startSpan(name, operationOptions, spanOptions) {
    var _a;
    const startSpanResult = (0, _instrumenter.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), {
      packageName: packageName,
      packageVersion: packageVersion,
      tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext
    }));
    let tracingContext = startSpanResult.tracingContext;
    const span = startSpanResult.span;
    if (!tracingContext.getValue(_tracingContext.knownContextKeys.namespace)) {
      tracingContext = tracingContext.setValue(_tracingContext.knownContextKeys.namespace, namespace);
    }
    span.setAttribute("az.namespace", tracingContext.getValue(_tracingContext.knownContextKeys.namespace));
    const updatedOptions = Object.assign({}, operationOptions, {
      tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), {
        tracingContext
      })
    });
    return {
      span,
      updatedOptions
    };
  }
  async function withSpan(name, operationOptions, callback, spanOptions) {
    const {
      span,
      updatedOptions
    } = startSpan(name, operationOptions, spanOptions);
    try {
      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));
      span.setStatus({
        status: "success"
      });
      return result;
    } catch (err) {
      span.setStatus({
        status: "error",
        error: err
      });
      throw err;
    } finally {
      span.end();
    }
  }
  function withContext(context, callback, ...callbackArgs) {
    return (0, _instrumenter.getInstrumenter)().withContext(context, callback, ...callbackArgs);
  }
  /**
   * Parses a traceparent header value into a span identifier.
   *
   * @param traceparentHeader - The traceparent header to parse.
   * @returns An implementation-specific identifier for the span.
   */
  function parseTraceparentHeader(traceparentHeader) {
    return (0, _instrumenter.getInstrumenter)().parseTraceparentHeader(traceparentHeader);
  }
  /**
   * Creates a set of request headers to propagate tracing information to a backend.
   *
   * @param tracingContext - The context containing the span to serialize.
   * @returns The set of headers to add to a request.
   */
  function createRequestHeaders(tracingContext) {
    return (0, _instrumenter.getInstrumenter)().createRequestHeaders(tracingContext);
  }
  return {
    startSpan,
    withSpan,
    withContext,
    parseTraceparentHeader,
    createRequestHeaders
  };
}
},{"./instrumenter.js":"node_modules/@azure/core-tracing/dist/browser/instrumenter.js","./tracingContext.js":"node_modules/@azure/core-tracing/dist/browser/tracingContext.js"}],"node_modules/@azure/core-tracing/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createTracingClient", {
  enumerable: true,
  get: function () {
    return _tracingClient.createTracingClient;
  }
});
Object.defineProperty(exports, "useInstrumenter", {
  enumerable: true,
  get: function () {
    return _instrumenter.useInstrumenter;
  }
});
var _instrumenter = require("./instrumenter.js");
var _tracingClient = require("./tracingClient.js");
},{"./instrumenter.js":"node_modules/@azure/core-tracing/dist/browser/instrumenter.js","./tracingClient.js":"node_modules/@azure/core-tracing/dist/browser/tracingClient.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.custom = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const custom = exports.custom = {};
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _inspectCommon = require("./inspect.common.js");
Object.keys(_inspectCommon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _inspectCommon[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _inspectCommon[key];
    }
  });
});
},{"./inspect.common.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/restError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RestError = void 0;
exports.isRestError = isRestError;
var _coreUtil = require("@azure/core-util");
var _inspect = require("./util/inspect.js");
var _sanitizer = require("./util/sanitizer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const errorSanitizer = new _sanitizer.Sanitizer();
/**
 * A custom error type for failed pipeline requests.
 */
class RestError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = "RestError";
    this.code = options.code;
    this.statusCode = options.statusCode;
    this.request = options.request;
    this.response = options.response;
    Object.setPrototypeOf(this, RestError.prototype);
  }
  /**
   * Logging method for util.inspect in Node
   */
  [_inspect.custom]() {
    return `RestError: ${this.message} \n ${errorSanitizer.sanitize(this)}`;
  }
}
/**
 * Something went wrong when making the request.
 * This means the actual request failed for some reason,
 * such as a DNS issue or the connection being lost.
 */
exports.RestError = RestError;
RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
/**
 * This means that parsing the response from the server failed.
 * It may have been malformed.
 */
RestError.PARSE_ERROR = "PARSE_ERROR";
/**
 * Typeguard for RestError
 * @param e - Something caught by a catch clause.
 */
function isRestError(e) {
  if (e instanceof RestError) {
    return true;
  }
  return (0, _coreUtil.isError)(e) && e.name === "RestError";
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./util/inspect.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js","./util/sanitizer.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tracingPolicy = tracingPolicy;
exports.tracingPolicyName = void 0;
var _coreTracing = require("@azure/core-tracing");
var _constants = require("../constants.js");
var _userAgent = require("../util/userAgent.js");
var _log = require("../log.js");
var _coreUtil = require("@azure/core-util");
var _restError = require("../restError.js");
var _sanitizer = require("../util/sanitizer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the tracingPolicy.
 */
const tracingPolicyName = exports.tracingPolicyName = "tracingPolicy";
/**
 * A simple policy to create OpenTelemetry Spans for each request made by the pipeline
 * that has SpanOptions with a parent.
 * Requests made without a parent Span will not be recorded.
 * @param options - Options to configure the telemetry logged by the tracing policy.
 */
function tracingPolicy(options = {}) {
  const userAgentPromise = (0, _userAgent.getUserAgentValue)(options.userAgentPrefix);
  const sanitizer = new _sanitizer.Sanitizer({
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  const tracingClient = tryCreateTracingClient();
  return {
    name: tracingPolicyName,
    async sendRequest(request, next) {
      var _a, _b;
      if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {
        return next(request);
      }
      const userAgent = await userAgentPromise;
      const spanAttributes = {
        "http.url": sanitizer.sanitizeUrl(request.url),
        "http.method": request.method,
        "http.user_agent": userAgent,
        requestId: request.requestId
      };
      if (userAgent) {
        spanAttributes["http.user_agent"] = userAgent;
      }
      const {
        span,
        tracingContext
      } = (_b = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _b !== void 0 ? _b : {};
      if (!span || !tracingContext) {
        return next(request);
      }
      try {
        const response = await tracingClient.withContext(tracingContext, next, request);
        tryProcessResponse(span, response);
        return response;
      } catch (err) {
        tryProcessError(span, err);
        throw err;
      }
    }
  };
}
function tryCreateTracingClient() {
  try {
    return (0, _coreTracing.createTracingClient)({
      namespace: "",
      packageName: "@azure/core-rest-pipeline",
      packageVersion: _constants.SDK_VERSION
    });
  } catch (e) {
    _log.logger.warning(`Error when creating the TracingClient: ${(0, _coreUtil.getErrorMessage)(e)}`);
    return undefined;
  }
}
function tryCreateSpan(tracingClient, request, spanAttributes) {
  try {
    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.
    const {
      span,
      updatedOptions
    } = tracingClient.startSpan(`HTTP ${request.method}`, {
      tracingOptions: request.tracingOptions
    }, {
      spanKind: "client",
      spanAttributes
    });
    // If the span is not recording, don't do any more work.
    if (!span.isRecording()) {
      span.end();
      return undefined;
    }
    // set headers
    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
    for (const [key, value] of Object.entries(headers)) {
      request.headers.set(key, value);
    }
    return {
      span,
      tracingContext: updatedOptions.tracingOptions.tracingContext
    };
  } catch (e) {
    _log.logger.warning(`Skipping creating a tracing span due to an error: ${(0, _coreUtil.getErrorMessage)(e)}`);
    return undefined;
  }
}
function tryProcessError(span, error) {
  try {
    span.setStatus({
      status: "error",
      error: (0, _coreUtil.isError)(error) ? error : undefined
    });
    if ((0, _restError.isRestError)(error) && error.statusCode) {
      span.setAttribute("http.status_code", error.statusCode);
    }
    span.end();
  } catch (e) {
    _log.logger.warning(`Skipping tracing span processing due to an error: ${(0, _coreUtil.getErrorMessage)(e)}`);
  }
}
function tryProcessResponse(span, response) {
  try {
    span.setAttribute("http.status_code", response.status);
    const serviceRequestId = response.headers.get("x-ms-request-id");
    if (serviceRequestId) {
      span.setAttribute("serviceRequestId", serviceRequestId);
    }
    span.setStatus({
      status: "success"
    });
    span.end();
  } catch (e) {
    _log.logger.warning(`Skipping tracing span processing due to an error: ${(0, _coreUtil.getErrorMessage)(e)}`);
  }
}
},{"@azure/core-tracing":"node_modules/@azure/core-tracing/dist/browser/index.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js","../util/userAgent.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js","../log.js":"node_modules/@azure/core-rest-pipeline/dist/browser/log.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../restError.js":"node_modules/@azure/core-rest-pipeline/dist/browser/restError.js","../util/sanitizer.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPipelineFromOptions = createPipelineFromOptions;
var _logPolicy = require("./policies/logPolicy.js");
var _pipeline = require("./pipeline.js");
var _redirectPolicy = require("./policies/redirectPolicy.js");
var _userAgentPolicy = require("./policies/userAgentPolicy.js");
var _multipartPolicy = require("./policies/multipartPolicy.js");
var _decompressResponsePolicy = require("./policies/decompressResponsePolicy.js");
var _defaultRetryPolicy = require("./policies/defaultRetryPolicy.js");
var _formDataPolicy = require("./policies/formDataPolicy.js");
var _coreUtil = require("@azure/core-util");
var _proxyPolicy = require("./policies/proxyPolicy.js");
var _setClientRequestIdPolicy = require("./policies/setClientRequestIdPolicy.js");
var _tlsPolicy = require("./policies/tlsPolicy.js");
var _tracingPolicy = require("./policies/tracingPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Create a new pipeline with a default set of customizable policies.
 * @param options - Options to configure a custom pipeline.
 */
function createPipelineFromOptions(options) {
  var _a;
  const pipeline = (0, _pipeline.createEmptyPipeline)();
  if (_coreUtil.isNodeLike) {
    if (options.tlsOptions) {
      pipeline.addPolicy((0, _tlsPolicy.tlsPolicy)(options.tlsOptions));
    }
    pipeline.addPolicy((0, _proxyPolicy.proxyPolicy)(options.proxyOptions));
    pipeline.addPolicy((0, _decompressResponsePolicy.decompressResponsePolicy)());
  }
  pipeline.addPolicy((0, _formDataPolicy.formDataPolicy)(), {
    beforePolicies: [_multipartPolicy.multipartPolicyName]
  });
  pipeline.addPolicy((0, _userAgentPolicy.userAgentPolicy)(options.userAgentOptions));
  pipeline.addPolicy((0, _setClientRequestIdPolicy.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));
  // The multipart policy is added after policies with no phase, so that
  // policies can be added between it and formDataPolicy to modify
  // properties (e.g., making the boundary constant in recorded tests).
  pipeline.addPolicy((0, _multipartPolicy.multipartPolicy)(), {
    afterPhase: "Deserialize"
  });
  pipeline.addPolicy((0, _defaultRetryPolicy.defaultRetryPolicy)(options.retryOptions), {
    phase: "Retry"
  });
  pipeline.addPolicy((0, _tracingPolicy.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {
    afterPhase: "Retry"
  });
  if (_coreUtil.isNodeLike) {
    // Both XHR and Fetch expect to handle redirects automatically,
    // so only include this policy when we're in Node.
    pipeline.addPolicy((0, _redirectPolicy.redirectPolicy)(options.redirectOptions), {
      afterPhase: "Retry"
    });
  }
  pipeline.addPolicy((0, _logPolicy.logPolicy)(options.loggingOptions), {
    afterPhase: "Sign"
  });
  return pipeline;
}
},{"./policies/logPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js","./pipeline.js":"node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js","./policies/redirectPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js","./policies/userAgentPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js","./policies/multipartPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js","./policies/decompressResponsePolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js","./policies/defaultRetryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js","./policies/formDataPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./policies/proxyPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js","./policies/setClientRequestIdPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js","./policies/tlsPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js","./policies/tracingPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFetchHttpClient = createFetchHttpClient;
var _abortController = require("@azure/abort-controller");
var _restError = require("./restError.js");
var _httpHeaders = require("./httpHeaders.js");
var _typeGuards = require("./util/typeGuards.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Checks if the body is a Blob or Blob-like
 */
function isBlob(body) {
  // File objects count as a type of Blob, so we want to use instanceof explicitly
  return (typeof Blob === "function" || typeof Blob === "object") && body instanceof Blob;
}
/**
 * A HttpClient implementation that uses window.fetch to send HTTP requests.
 * @internal
 */
class FetchHttpClient {
  /**
   * Makes a request over an underlying transport layer and returns the response.
   * @param request - The request to be made.
   */
  async sendRequest(request) {
    const url = new URL(request.url);
    const isInsecure = url.protocol !== "https:";
    if (isInsecure && !request.allowInsecureConnection) {
      throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);
    }
    if (request.proxySettings) {
      throw new Error("HTTP proxy is not supported in browser environment");
    }
    try {
      return await makeRequest(request);
    } catch (e) {
      throw getError(e, request);
    }
  }
}
/**
 * Sends a request
 */
async function makeRequest(request) {
  const {
    abortController,
    abortControllerCleanup
  } = setupAbortSignal(request);
  try {
    const headers = buildFetchHeaders(request.headers);
    const {
      streaming,
      body: requestBody
    } = buildRequestBody(request);
    const requestInit = Object.assign(Object.assign({
      body: requestBody,
      method: request.method,
      headers: headers,
      signal: abortController.signal
    }, "credentials" in Request.prototype ? {
      credentials: request.withCredentials ? "include" : "same-origin"
    } : {}), "cache" in Request.prototype ? {
      cache: "no-store"
    } : {});
    // According to https://fetch.spec.whatwg.org/#fetch-method,
    // init.duplex must be set when body is a ReadableStream object.
    // currently "half" is the only valid value.
    if (streaming) {
      requestInit.duplex = "half";
    }
    /**
     * Developers of the future:
     * Do not set redirect: "manual" as part
     * of request options.
     * It will not work as you expect.
     */
    const response = await fetch(request.url, requestInit);
    // If we're uploading a blob, we need to fire the progress event manually
    if (isBlob(request.body) && request.onUploadProgress) {
      request.onUploadProgress({
        loadedBytes: request.body.size
      });
    }
    return buildPipelineResponse(response, request, abortControllerCleanup);
  } catch (e) {
    abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
    throw e;
  }
}
/**
 * Creates a pipeline response from a Fetch response;
 */
async function buildPipelineResponse(httpResponse, request, abortControllerCleanup) {
  var _a, _b;
  const headers = buildPipelineHeaders(httpResponse);
  const response = {
    request,
    headers,
    status: httpResponse.status
  };
  const bodyStream = (0, _typeGuards.isWebReadableStream)(httpResponse.body) ? buildBodyStream(httpResponse.body, {
    onProgress: request.onDownloadProgress,
    onEnd: abortControllerCleanup
  }) : httpResponse.body;
  if (
  // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code
  ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(Number.POSITIVE_INFINITY)) || ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(response.status))) {
    if (request.enableBrowserStreams) {
      response.browserStreamBody = bodyStream !== null && bodyStream !== void 0 ? bodyStream : undefined;
    } else {
      const responseStream = new Response(bodyStream);
      response.blobBody = responseStream.blob();
      abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
    }
  } else {
    const responseStream = new Response(bodyStream);
    response.bodyAsText = await responseStream.text();
    abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
  }
  return response;
}
function setupAbortSignal(request) {
  const abortController = new AbortController();
  // Cleanup function
  let abortControllerCleanup;
  /**
   * Attach an abort listener to the request
   */
  let abortListener;
  if (request.abortSignal) {
    if (request.abortSignal.aborted) {
      throw new _abortController.AbortError("The operation was aborted.");
    }
    abortListener = event => {
      if (event.type === "abort") {
        abortController.abort();
      }
    };
    request.abortSignal.addEventListener("abort", abortListener);
    abortControllerCleanup = () => {
      var _a;
      if (abortListener) {
        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", abortListener);
      }
    };
  }
  // If a timeout was passed, call the abort signal once the time elapses
  if (request.timeout > 0) {
    setTimeout(() => {
      abortController.abort();
    }, request.timeout);
  }
  return {
    abortController,
    abortControllerCleanup
  };
}
/**
 * Gets the specific error
 */
// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
function getError(e, request) {
  var _a;
  if (e && (e === null || e === void 0 ? void 0 : e.name) === "AbortError") {
    return e;
  } else {
    return new _restError.RestError(`Error sending request: ${e.message}`, {
      code: (_a = e === null || e === void 0 ? void 0 : e.code) !== null && _a !== void 0 ? _a : _restError.RestError.REQUEST_SEND_ERROR,
      request
    });
  }
}
/**
 * Converts PipelineRequest headers to Fetch headers
 */
function buildFetchHeaders(pipelineHeaders) {
  const headers = new Headers();
  for (const [name, value] of pipelineHeaders) {
    headers.append(name, value);
  }
  return headers;
}
function buildPipelineHeaders(httpResponse) {
  const responseHeaders = (0, _httpHeaders.createHttpHeaders)();
  for (const [name, value] of httpResponse.headers) {
    responseHeaders.set(name, value);
  }
  return responseHeaders;
}
function buildRequestBody(request) {
  const body = typeof request.body === "function" ? request.body() : request.body;
  if ((0, _typeGuards.isNodeReadableStream)(body)) {
    throw new Error("Node streams are not supported in browser environment.");
  }
  return (0, _typeGuards.isWebReadableStream)(body) ? {
    streaming: true,
    body: buildBodyStream(body, {
      onProgress: request.onUploadProgress
    })
  } : {
    streaming: false,
    body
  };
}
/**
 * Reads the request/response original stream and stream it through a new
 * ReadableStream, this is done to be able to report progress in a way that
 * all modern browsers support. TransformStreams would be an alternative,
 * however they are not yet supported by all browsers i.e Firefox
 */
function buildBodyStream(readableStream, options = {}) {
  let loadedBytes = 0;
  const {
    onProgress,
    onEnd
  } = options;
  // If the current browser supports pipeThrough we use a TransformStream
  // to report progress
  if (isTransformStreamSupported(readableStream)) {
    return readableStream.pipeThrough(new TransformStream({
      transform(chunk, controller) {
        if (chunk === null) {
          controller.terminate();
          return;
        }
        controller.enqueue(chunk);
        loadedBytes += chunk.length;
        if (onProgress) {
          onProgress({
            loadedBytes
          });
        }
      },
      flush() {
        onEnd === null || onEnd === void 0 ? void 0 : onEnd();
      }
    }));
  } else {
    // If we can't use transform streams, wrap the original stream in a new readable stream
    // and use pull to enqueue each chunk and report progress.
    const reader = readableStream.getReader();
    return new ReadableStream({
      async pull(controller) {
        var _a;
        const {
          done,
          value
        } = await reader.read();
        // When no more data needs to be consumed, break the reading
        if (done || !value) {
          onEnd === null || onEnd === void 0 ? void 0 : onEnd();
          // Close the stream
          controller.close();
          reader.releaseLock();
          return;
        }
        loadedBytes += (_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0;
        // Enqueue the next data chunk into our target stream
        controller.enqueue(value);
        if (onProgress) {
          onProgress({
            loadedBytes
          });
        }
      },
      cancel(reason) {
        onEnd === null || onEnd === void 0 ? void 0 : onEnd();
        return reader.cancel(reason);
      }
    });
  }
}
/**
 * Create a new HttpClient instance for the browser environment.
 * @internal
 */
function createFetchHttpClient() {
  return new FetchHttpClient();
}
function isTransformStreamSupported(readableStream) {
  return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;
}
},{"@azure/abort-controller":"node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/browser/index.js","./restError.js":"node_modules/@azure/core-rest-pipeline/dist/browser/restError.js","./httpHeaders.js":"node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js","./util/typeGuards.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultHttpClient = createDefaultHttpClient;
var _fetchHttpClient = require("./fetchHttpClient.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Create the correct HttpClient for the current environment.
 */
function createDefaultHttpClient() {
  return (0, _fetchHttpClient.createFetchHttpClient)();
}
},{"./fetchHttpClient.js":"node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPipelineRequest = createPipelineRequest;
var _httpHeaders = require("./httpHeaders.js");
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

class PipelineRequestImpl {
  constructor(options) {
    var _a, _b, _c, _d, _e, _f, _g;
    this.url = options.url;
    this.body = options.body;
    this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : (0, _httpHeaders.createHttpHeaders)();
    this.method = (_b = options.method) !== null && _b !== void 0 ? _b : "GET";
    this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;
    this.multipartBody = options.multipartBody;
    this.formData = options.formData;
    this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;
    this.proxySettings = options.proxySettings;
    this.streamResponseStatusCodes = options.streamResponseStatusCodes;
    this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;
    this.abortSignal = options.abortSignal;
    this.tracingOptions = options.tracingOptions;
    this.onUploadProgress = options.onUploadProgress;
    this.onDownloadProgress = options.onDownloadProgress;
    this.requestId = options.requestId || (0, _coreUtil.randomUUID)();
    this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;
    this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;
  }
}
/**
 * Creates a new pipeline request with the given options.
 * This method is to allow for the easy setting of default values and not required.
 * @param options - The options to create the request with.
 */
function createPipelineRequest(options) {
  return new PipelineRequestImpl(options);
}
},{"./httpHeaders.js":"node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exponentialRetryPolicy = exponentialRetryPolicy;
exports.exponentialRetryPolicyName = void 0;
var _exponentialRetryStrategy = require("../retryStrategies/exponentialRetryStrategy.js");
var _retryPolicy = require("./retryPolicy.js");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the exponentialRetryPolicy.
 */
const exponentialRetryPolicyName = exports.exponentialRetryPolicyName = "exponentialRetryPolicy";
/**
 * A policy that attempts to retry requests while introducing an exponentially increasing delay.
 * @param options - Options that configure retry logic.
 */
function exponentialRetryPolicy(options = {}) {
  var _a;
  return (0, _retryPolicy.retryPolicy)([(0, _exponentialRetryStrategy.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), {
    ignoreSystemErrors: true
  }))], {
    maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants.DEFAULT_RETRY_POLICY_COUNT
  });
}
},{"../retryStrategies/exponentialRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js","./retryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.systemErrorRetryPolicy = systemErrorRetryPolicy;
exports.systemErrorRetryPolicyName = void 0;
var _exponentialRetryStrategy = require("../retryStrategies/exponentialRetryStrategy.js");
var _retryPolicy = require("./retryPolicy.js");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Name of the {@link systemErrorRetryPolicy}
 */
const systemErrorRetryPolicyName = exports.systemErrorRetryPolicyName = "systemErrorRetryPolicy";
/**
 * A retry policy that specifically seeks to handle errors in the
 * underlying transport layer (e.g. DNS lookup failures) rather than
 * retryable error codes from the server itself.
 * @param options - Options that customize the policy.
 */
function systemErrorRetryPolicy(options = {}) {
  var _a;
  return {
    name: systemErrorRetryPolicyName,
    sendRequest: (0, _retryPolicy.retryPolicy)([(0, _exponentialRetryStrategy.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), {
      ignoreHttpStatusCodes: true
    }))], {
      maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants.DEFAULT_RETRY_POLICY_COUNT
    }).sendRequest
  };
}
},{"../retryStrategies/exponentialRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js","./retryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttlingRetryPolicy = throttlingRetryPolicy;
exports.throttlingRetryPolicyName = void 0;
var _throttlingRetryStrategy = require("../retryStrategies/throttlingRetryStrategy.js");
var _retryPolicy = require("./retryPolicy.js");
var _constants = require("../constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Name of the {@link throttlingRetryPolicy}
 */
const throttlingRetryPolicyName = exports.throttlingRetryPolicyName = "throttlingRetryPolicy";
/**
 * A policy that retries when the server sends a 429 response with a Retry-After header.
 *
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 *
 * @param options - Options that configure retry logic.
 */
function throttlingRetryPolicy(options = {}) {
  var _a;
  return {
    name: throttlingRetryPolicyName,
    sendRequest: (0, _retryPolicy.retryPolicy)([(0, _throttlingRetryStrategy.throttlingRetryStrategy)()], {
      maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants.DEFAULT_RETRY_POLICY_COUNT
    }).sendRequest
  };
}
},{"../retryStrategies/throttlingRetryStrategy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js","./retryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","../constants.js":"node_modules/@azure/core-rest-pipeline/dist/browser/constants.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CYCLER_OPTIONS = void 0;
exports.createTokenCycler = createTokenCycler;
var _helpers = require("./helpers.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Default options for the cycler if none are provided
const DEFAULT_CYCLER_OPTIONS = exports.DEFAULT_CYCLER_OPTIONS = {
  forcedRefreshWindowInMs: 1000,
  // Force waiting for a refresh 1s before the token expires
  retryIntervalInMs: 3000,
  // Allow refresh attempts every 3s
  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry
};
/**
 * Converts an an unreliable access token getter (which may resolve with null)
 * into an AccessTokenGetter by retrying the unreliable getter in a regular
 * interval.
 *
 * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.
 * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.
 * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.
 * @returns - A promise that, if it resolves, will resolve with an access token.
 */
async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {
  // This wrapper handles exceptions gracefully as long as we haven't exceeded
  // the timeout.
  async function tryGetAccessToken() {
    if (Date.now() < refreshTimeout) {
      try {
        return await getAccessToken();
      } catch (_a) {
        return null;
      }
    } else {
      const finalToken = await getAccessToken();
      // Timeout is up, so throw if it's still null
      if (finalToken === null) {
        throw new Error("Failed to refresh access token.");
      }
      return finalToken;
    }
  }
  let token = await tryGetAccessToken();
  while (token === null) {
    await (0, _helpers.delay)(retryIntervalInMs);
    token = await tryGetAccessToken();
  }
  return token;
}
/**
 * Creates a token cycler from a credential, scopes, and optional settings.
 *
 * A token cycler represents a way to reliably retrieve a valid access token
 * from a TokenCredential. It will handle initializing the token, refreshing it
 * when it nears expiration, and synchronizes refresh attempts to avoid
 * concurrency hazards.
 *
 * @param credential - the underlying TokenCredential that provides the access
 * token
 * @param tokenCyclerOptions - optionally override default settings for the cycler
 *
 * @returns - a function that reliably produces a valid access token
 */
function createTokenCycler(credential, tokenCyclerOptions) {
  let refreshWorker = null;
  let token = null;
  let tenantId;
  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
  /**
   * This little holder defines several predicates that we use to construct
   * the rules of refreshing the token.
   */
  const cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },
    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a;
      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
    },
    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }
  };
  /**
   * Starts a refresh job or returns the existing job if one is already
   * running.
   */
  function refresh(scopes, getTokenOptions) {
    var _a;
    if (!cycler.isRefreshing) {
      // We bind `scopes` here to avoid passing it around a lot
      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);
      // Take advantage of promise chaining to insert an assignment to `token`
      // before the refresh can be considered done.
      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,
      // If we don't have a token, then we should timeout immediately
      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {
        refreshWorker = null;
        token = _token;
        tenantId = getTokenOptions.tenantId;
        return token;
      }).catch(reason => {
        // We also should reset the refresher if we enter a failed state.  All
        // existing awaiters will throw, but subsequent requests will start a
        // new retry chain.
        refreshWorker = null;
        token = null;
        tenantId = undefined;
        throw reason;
      });
    }
    return refreshWorker;
  }
  return async (scopes, tokenOptions) => {
    //
    // Simple rules:
    // - If we MUST refresh, then return the refresh task, blocking
    //   the pipeline until a token is available.
    // - If we SHOULD refresh, then run refresh but don't return it
    //   (we can still use the cached token).
    // - Return the token, since it's fine if we didn't return in
    //   step 1.
    //
    const hasClaimChallenge = Boolean(tokenOptions.claims);
    const tenantIdChanged = tenantId !== tokenOptions.tenantId;
    if (hasClaimChallenge) {
      // If we've received a claim, we know the existing token isn't valid
      // We want to clear it so that that refresh worker won't use the old expiration time as a timeout
      token = null;
    }
    // If the tenantId passed in token options is different to the one we have
    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to
    // refresh the token with the new tenantId or token.
    const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;
    if (mustRefresh) {
      return refresh(scopes, tokenOptions);
    }
    if (cycler.shouldRefresh) {
      refresh(scopes, tokenOptions);
    }
    return token;
  };
}
},{"./helpers.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;
exports.bearerTokenAuthenticationPolicyName = void 0;
var _tokenCycler = require("../util/tokenCycler.js");
var _log = require("../log.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the bearerTokenAuthenticationPolicy.
 */
const bearerTokenAuthenticationPolicyName = exports.bearerTokenAuthenticationPolicyName = "bearerTokenAuthenticationPolicy";
/**
 * Default authorize request handler
 */
async function defaultAuthorizeRequest(options) {
  const {
    scopes,
    getAccessToken,
    request
  } = options;
  const getTokenOptions = {
    abortSignal: request.abortSignal,
    tracingOptions: request.tracingOptions
  };
  const accessToken = await getAccessToken(scopes, getTokenOptions);
  if (accessToken) {
    options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
  }
}
/**
 * We will retrieve the challenge only if the response status code was 401,
 * and if the response contained the header "WWW-Authenticate" with a non-empty value.
 */
function getChallenge(response) {
  const challenge = response.headers.get("WWW-Authenticate");
  if (response.status === 401 && challenge) {
    return challenge;
  }
  return;
}
/**
 * A policy that can request a token from a TokenCredential implementation and
 * then apply it to the Authorization header of a request as a Bearer token.
 */
function bearerTokenAuthenticationPolicy(options) {
  var _a;
  const {
    credential,
    scopes,
    challengeCallbacks
  } = options;
  const logger = options.logger || _log.logger;
  const callbacks = Object.assign({
    authorizeRequest: (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a !== void 0 ? _a : defaultAuthorizeRequest,
    authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge
  }, challengeCallbacks);
  // This function encapsulates the entire process of reliably retrieving the token
  // The options are left out of the public API until there's demand to configure this.
  // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`
  // in order to pass through the `options` object.
  const getAccessToken = credential ? (0, _tokenCycler.createTokenCycler)(credential /* , options */) : () => Promise.resolve(null);
  return {
    name: bearerTokenAuthenticationPolicyName,
    /**
     * If there's no challenge parameter:
     * - It will try to retrieve the token using the cache, or the credential's getToken.
     * - Then it will try the next policy with or without the retrieved token.
     *
     * It uses the challenge parameters to:
     * - Skip a first attempt to get the token from the credential if there's no cached token,
     *   since it expects the token to be retrievable only after the challenge.
     * - Prepare the outgoing request if the `prepareRequest` method has been provided.
     * - Send an initial request to receive the challenge if it fails.
     * - Process a challenge if the response contains it.
     * - Retrieve a token with the challenge information, then re-send the request.
     */
    async sendRequest(request, next) {
      if (!request.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      }
      await callbacks.authorizeRequest({
        scopes: Array.isArray(scopes) ? scopes : [scopes],
        request,
        getAccessToken,
        logger
      });
      let response;
      let error;
      try {
        response = await next(request);
      } catch (err) {
        error = err;
        response = err.response;
      }
      if (callbacks.authorizeRequestOnChallenge && (response === null || response === void 0 ? void 0 : response.status) === 401 && getChallenge(response)) {
        // processes challenge
        const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
          scopes: Array.isArray(scopes) ? scopes : [scopes],
          request,
          response,
          getAccessToken,
          logger
        });
        if (shouldSendRequest) {
          return next(request);
        }
      }
      if (error) {
        throw error;
      } else {
        return response;
      }
    }
  };
}
},{"../util/tokenCycler.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js","../log.js":"node_modules/@azure/core-rest-pipeline/dist/browser/log.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ndJsonPolicy = ndJsonPolicy;
exports.ndJsonPolicyName = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the ndJsonPolicy.
 */
const ndJsonPolicyName = exports.ndJsonPolicyName = "ndJsonPolicy";
/**
 * ndJsonPolicy is a policy used to control keep alive settings for every request.
 */
function ndJsonPolicy() {
  return {
    name: ndJsonPolicyName,
    async sendRequest(request, next) {
      // There currently isn't a good way to bypass the serializer
      if (typeof request.body === "string" && request.body.startsWith("[")) {
        const body = JSON.parse(request.body);
        if (Array.isArray(body)) {
          request.body = body.map(item => JSON.stringify(item) + "\n").join("");
        }
      }
      return next(request);
    }
  };
}
},{}],"node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auxiliaryAuthenticationHeaderPolicy = auxiliaryAuthenticationHeaderPolicy;
exports.auxiliaryAuthenticationHeaderPolicyName = void 0;
var _tokenCycler = require("../util/tokenCycler.js");
var _log = require("../log.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.
 */
const auxiliaryAuthenticationHeaderPolicyName = exports.auxiliaryAuthenticationHeaderPolicyName = "auxiliaryAuthenticationHeaderPolicy";
const AUTHORIZATION_AUXILIARY_HEADER = "x-ms-authorization-auxiliary";
async function sendAuthorizeRequest(options) {
  var _a, _b;
  const {
    scopes,
    getAccessToken,
    request
  } = options;
  const getTokenOptions = {
    abortSignal: request.abortSignal,
    tracingOptions: request.tracingOptions
  };
  return (_b = (_a = await getAccessToken(scopes, getTokenOptions)) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : "";
}
/**
 * A policy for external tokens to `x-ms-authorization-auxiliary` header.
 * This header will be used when creating a cross-tenant application we may need to handle authentication requests
 * for resources that are in different tenants.
 * You could see [ARM docs](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works
 */
function auxiliaryAuthenticationHeaderPolicy(options) {
  const {
    credentials,
    scopes
  } = options;
  const logger = options.logger || _log.logger;
  const tokenCyclerMap = new WeakMap();
  return {
    name: auxiliaryAuthenticationHeaderPolicyName,
    async sendRequest(request, next) {
      if (!request.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.");
      }
      if (!credentials || credentials.length === 0) {
        logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);
        return next(request);
      }
      const tokenPromises = [];
      for (const credential of credentials) {
        let getAccessToken = tokenCyclerMap.get(credential);
        if (!getAccessToken) {
          getAccessToken = (0, _tokenCycler.createTokenCycler)(credential);
          tokenCyclerMap.set(credential, getAccessToken);
        }
        tokenPromises.push(sendAuthorizeRequest({
          scopes: Array.isArray(scopes) ? scopes : [scopes],
          request,
          getAccessToken,
          logger
        }));
      }
      const auxiliaryTokens = (await Promise.all(tokenPromises)).filter(token => Boolean(token));
      if (auxiliaryTokens.length === 0) {
        logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);
        return next(request);
      }
      request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map(token => `Bearer ${token}`).join(", "));
      return next(request);
    }
  };
}
},{"../util/tokenCycler.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js","../log.js":"node_modules/@azure/core-rest-pipeline/dist/browser/log.js"}],"node_modules/@azure/core-rest-pipeline/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RestError", {
  enumerable: true,
  get: function () {
    return _restError.RestError;
  }
});
Object.defineProperty(exports, "auxiliaryAuthenticationHeaderPolicy", {
  enumerable: true,
  get: function () {
    return _auxiliaryAuthenticationHeaderPolicy.auxiliaryAuthenticationHeaderPolicy;
  }
});
Object.defineProperty(exports, "auxiliaryAuthenticationHeaderPolicyName", {
  enumerable: true,
  get: function () {
    return _auxiliaryAuthenticationHeaderPolicy.auxiliaryAuthenticationHeaderPolicyName;
  }
});
Object.defineProperty(exports, "bearerTokenAuthenticationPolicy", {
  enumerable: true,
  get: function () {
    return _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy;
  }
});
Object.defineProperty(exports, "bearerTokenAuthenticationPolicyName", {
  enumerable: true,
  get: function () {
    return _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicyName;
  }
});
Object.defineProperty(exports, "createDefaultHttpClient", {
  enumerable: true,
  get: function () {
    return _defaultHttpClient.createDefaultHttpClient;
  }
});
Object.defineProperty(exports, "createEmptyPipeline", {
  enumerable: true,
  get: function () {
    return _pipeline.createEmptyPipeline;
  }
});
Object.defineProperty(exports, "createFile", {
  enumerable: true,
  get: function () {
    return _file.createFile;
  }
});
Object.defineProperty(exports, "createFileFromStream", {
  enumerable: true,
  get: function () {
    return _file.createFileFromStream;
  }
});
Object.defineProperty(exports, "createHttpHeaders", {
  enumerable: true,
  get: function () {
    return _httpHeaders.createHttpHeaders;
  }
});
Object.defineProperty(exports, "createPipelineFromOptions", {
  enumerable: true,
  get: function () {
    return _createPipelineFromOptions.createPipelineFromOptions;
  }
});
Object.defineProperty(exports, "createPipelineRequest", {
  enumerable: true,
  get: function () {
    return _pipelineRequest.createPipelineRequest;
  }
});
Object.defineProperty(exports, "decompressResponsePolicy", {
  enumerable: true,
  get: function () {
    return _decompressResponsePolicy.decompressResponsePolicy;
  }
});
Object.defineProperty(exports, "decompressResponsePolicyName", {
  enumerable: true,
  get: function () {
    return _decompressResponsePolicy.decompressResponsePolicyName;
  }
});
Object.defineProperty(exports, "defaultRetryPolicy", {
  enumerable: true,
  get: function () {
    return _defaultRetryPolicy.defaultRetryPolicy;
  }
});
Object.defineProperty(exports, "exponentialRetryPolicy", {
  enumerable: true,
  get: function () {
    return _exponentialRetryPolicy.exponentialRetryPolicy;
  }
});
Object.defineProperty(exports, "exponentialRetryPolicyName", {
  enumerable: true,
  get: function () {
    return _exponentialRetryPolicy.exponentialRetryPolicyName;
  }
});
Object.defineProperty(exports, "formDataPolicy", {
  enumerable: true,
  get: function () {
    return _formDataPolicy.formDataPolicy;
  }
});
Object.defineProperty(exports, "formDataPolicyName", {
  enumerable: true,
  get: function () {
    return _formDataPolicy.formDataPolicyName;
  }
});
Object.defineProperty(exports, "getDefaultProxySettings", {
  enumerable: true,
  get: function () {
    return _proxyPolicy.getDefaultProxySettings;
  }
});
Object.defineProperty(exports, "isRestError", {
  enumerable: true,
  get: function () {
    return _restError.isRestError;
  }
});
Object.defineProperty(exports, "logPolicy", {
  enumerable: true,
  get: function () {
    return _logPolicy.logPolicy;
  }
});
Object.defineProperty(exports, "logPolicyName", {
  enumerable: true,
  get: function () {
    return _logPolicy.logPolicyName;
  }
});
Object.defineProperty(exports, "multipartPolicy", {
  enumerable: true,
  get: function () {
    return _multipartPolicy.multipartPolicy;
  }
});
Object.defineProperty(exports, "multipartPolicyName", {
  enumerable: true,
  get: function () {
    return _multipartPolicy.multipartPolicyName;
  }
});
Object.defineProperty(exports, "ndJsonPolicy", {
  enumerable: true,
  get: function () {
    return _ndJsonPolicy.ndJsonPolicy;
  }
});
Object.defineProperty(exports, "ndJsonPolicyName", {
  enumerable: true,
  get: function () {
    return _ndJsonPolicy.ndJsonPolicyName;
  }
});
Object.defineProperty(exports, "proxyPolicy", {
  enumerable: true,
  get: function () {
    return _proxyPolicy.proxyPolicy;
  }
});
Object.defineProperty(exports, "proxyPolicyName", {
  enumerable: true,
  get: function () {
    return _proxyPolicy.proxyPolicyName;
  }
});
Object.defineProperty(exports, "redirectPolicy", {
  enumerable: true,
  get: function () {
    return _redirectPolicy.redirectPolicy;
  }
});
Object.defineProperty(exports, "redirectPolicyName", {
  enumerable: true,
  get: function () {
    return _redirectPolicy.redirectPolicyName;
  }
});
Object.defineProperty(exports, "retryPolicy", {
  enumerable: true,
  get: function () {
    return _retryPolicy.retryPolicy;
  }
});
Object.defineProperty(exports, "setClientRequestIdPolicy", {
  enumerable: true,
  get: function () {
    return _setClientRequestIdPolicy.setClientRequestIdPolicy;
  }
});
Object.defineProperty(exports, "setClientRequestIdPolicyName", {
  enumerable: true,
  get: function () {
    return _setClientRequestIdPolicy.setClientRequestIdPolicyName;
  }
});
Object.defineProperty(exports, "systemErrorRetryPolicy", {
  enumerable: true,
  get: function () {
    return _systemErrorRetryPolicy.systemErrorRetryPolicy;
  }
});
Object.defineProperty(exports, "systemErrorRetryPolicyName", {
  enumerable: true,
  get: function () {
    return _systemErrorRetryPolicy.systemErrorRetryPolicyName;
  }
});
Object.defineProperty(exports, "throttlingRetryPolicy", {
  enumerable: true,
  get: function () {
    return _throttlingRetryPolicy.throttlingRetryPolicy;
  }
});
Object.defineProperty(exports, "throttlingRetryPolicyName", {
  enumerable: true,
  get: function () {
    return _throttlingRetryPolicy.throttlingRetryPolicyName;
  }
});
Object.defineProperty(exports, "tlsPolicy", {
  enumerable: true,
  get: function () {
    return _tlsPolicy.tlsPolicy;
  }
});
Object.defineProperty(exports, "tlsPolicyName", {
  enumerable: true,
  get: function () {
    return _tlsPolicy.tlsPolicyName;
  }
});
Object.defineProperty(exports, "tracingPolicy", {
  enumerable: true,
  get: function () {
    return _tracingPolicy.tracingPolicy;
  }
});
Object.defineProperty(exports, "tracingPolicyName", {
  enumerable: true,
  get: function () {
    return _tracingPolicy.tracingPolicyName;
  }
});
Object.defineProperty(exports, "userAgentPolicy", {
  enumerable: true,
  get: function () {
    return _userAgentPolicy.userAgentPolicy;
  }
});
Object.defineProperty(exports, "userAgentPolicyName", {
  enumerable: true,
  get: function () {
    return _userAgentPolicy.userAgentPolicyName;
  }
});
var _pipeline = require("./pipeline.js");
var _createPipelineFromOptions = require("./createPipelineFromOptions.js");
var _defaultHttpClient = require("./defaultHttpClient.js");
var _httpHeaders = require("./httpHeaders.js");
var _pipelineRequest = require("./pipelineRequest.js");
var _restError = require("./restError.js");
var _decompressResponsePolicy = require("./policies/decompressResponsePolicy.js");
var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy.js");
var _setClientRequestIdPolicy = require("./policies/setClientRequestIdPolicy.js");
var _logPolicy = require("./policies/logPolicy.js");
var _multipartPolicy = require("./policies/multipartPolicy.js");
var _proxyPolicy = require("./policies/proxyPolicy.js");
var _redirectPolicy = require("./policies/redirectPolicy.js");
var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy.js");
var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy.js");
var _retryPolicy = require("./policies/retryPolicy.js");
var _tracingPolicy = require("./policies/tracingPolicy.js");
var _defaultRetryPolicy = require("./policies/defaultRetryPolicy.js");
var _userAgentPolicy = require("./policies/userAgentPolicy.js");
var _tlsPolicy = require("./policies/tlsPolicy.js");
var _formDataPolicy = require("./policies/formDataPolicy.js");
var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy.js");
var _ndJsonPolicy = require("./policies/ndJsonPolicy.js");
var _auxiliaryAuthenticationHeaderPolicy = require("./policies/auxiliaryAuthenticationHeaderPolicy.js");
var _file = require("./util/file.js");
},{"./pipeline.js":"node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js","./createPipelineFromOptions.js":"node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js","./defaultHttpClient.js":"node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js","./httpHeaders.js":"node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js","./pipelineRequest.js":"node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js","./restError.js":"node_modules/@azure/core-rest-pipeline/dist/browser/restError.js","./policies/decompressResponsePolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js","./policies/exponentialRetryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js","./policies/setClientRequestIdPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js","./policies/logPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js","./policies/multipartPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js","./policies/proxyPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js","./policies/redirectPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js","./policies/systemErrorRetryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js","./policies/throttlingRetryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js","./policies/retryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js","./policies/tracingPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js","./policies/defaultRetryPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js","./policies/userAgentPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js","./policies/tlsPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js","./policies/formDataPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js","./policies/bearerTokenAuthenticationPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js","./policies/ndJsonPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js","./policies/auxiliaryAuthenticationHeaderPolicy.js":"node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js","./util/file.js":"node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js"}],"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__addDisposableResource = __addDisposableResource;
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldIn = __classPrivateFieldIn;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = void 0;
exports.__decorate = __decorate;
exports.__disposeResources = __disposeResources;
exports.__esDecorate = __esDecorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__propKey = __propKey;
exports.__read = __read;
exports.__rest = __rest;
exports.__runInitializers = __runInitializers;
exports.__setFunctionName = __setFunctionName;
exports.__spread = __spread;
exports.__spreadArray = __spreadArray;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
exports.default = void 0;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
exports.__assign = __assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind,
    key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? {
      get: descriptor.get,
      set: descriptor.set
    } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
;
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", {
    configurable: true,
    value: prefix ? "".concat(prefix, " ", name) : name
  });
}
;
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = exports.__createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function awaitReturn(f) {
    return function (v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: false
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function () {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env.stack.push({
      value: value,
      dispose: dispose,
      async: async
    });
  } else if (async) {
    env.stack.push({
      async: true
    });
  }
  return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function (e) {
          fail(e);
          return next();
        });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}
var _default = exports.default = {
  __extends: __extends,
  __assign: __assign,
  __rest: __rest,
  __decorate: __decorate,
  __param: __param,
  __metadata: __metadata,
  __awaiter: __awaiter,
  __generator: __generator,
  __createBinding: __createBinding,
  __exportStar: __exportStar,
  __values: __values,
  __read: __read,
  __spread: __spread,
  __spreadArrays: __spreadArrays,
  __spreadArray: __spreadArray,
  __await: __await,
  __asyncGenerator: __asyncGenerator,
  __asyncDelegator: __asyncDelegator,
  __asyncValues: __asyncValues,
  __makeTemplateObject: __makeTemplateObject,
  __importStar: __importStar,
  __importDefault: __importDefault,
  __classPrivateFieldGet: __classPrivateFieldGet,
  __classPrivateFieldSet: __classPrivateFieldSet,
  __classPrivateFieldIn: __classPrivateFieldIn,
  __addDisposableResource: __addDisposableResource,
  __disposeResources: __disposeResources
};
},{}],"node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AzureKeyCredential = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A static-key-based credential that supports updating
 * the underlying key value.
 */
class AzureKeyCredential {
  /**
   * The value of the key to be used in authentication
   */
  get key() {
    return this._key;
  }
  /**
   * Create an instance of an AzureKeyCredential for use
   * with a service client.
   *
   * @param key - The initial value of the key to use in authentication
   */
  constructor(key) {
    if (!key) {
      throw new Error("key must be a non-empty string");
    }
    this._key = key;
  }
  /**
   * Change the value of the key.
   *
   * Updates will take effect upon the next request after
   * updating the key value.
   *
   * @param newKey - The new key value to be used
   */
  update(newKey) {
    this._key = newKey;
  }
}
exports.AzureKeyCredential = AzureKeyCredential;
},{}],"node_modules/@azure/core-auth/dist/browser/keyCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isKeyCredential = isKeyCredential;
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Tests an object to determine whether it implements KeyCredential.
 *
 * @param credential - The assumed KeyCredential to be tested.
 */
function isKeyCredential(credential) {
  return (0, _coreUtil.isObjectWithProperties)(credential, ["key"]) && typeof credential.key === "string";
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AzureNamedKeyCredential = void 0;
exports.isNamedKeyCredential = isNamedKeyCredential;
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A static name/key-based credential that supports updating
 * the underlying name and key values.
 */
class AzureNamedKeyCredential {
  /**
   * The value of the key to be used in authentication.
   */
  get key() {
    return this._key;
  }
  /**
   * The value of the name to be used in authentication.
   */
  get name() {
    return this._name;
  }
  /**
   * Create an instance of an AzureNamedKeyCredential for use
   * with a service client.
   *
   * @param name - The initial value of the name to use in authentication.
   * @param key - The initial value of the key to use in authentication.
   */
  constructor(name, key) {
    if (!name || !key) {
      throw new TypeError("name and key must be non-empty strings");
    }
    this._name = name;
    this._key = key;
  }
  /**
   * Change the value of the key.
   *
   * Updates will take effect upon the next request after
   * updating the key value.
   *
   * @param newName - The new name value to be used.
   * @param newKey - The new key value to be used.
   */
  update(newName, newKey) {
    if (!newName || !newKey) {
      throw new TypeError("newName and newKey must be non-empty strings");
    }
    this._name = newName;
    this._key = newKey;
  }
}
/**
 * Tests an object to determine whether it implements NamedKeyCredential.
 *
 * @param credential - The assumed NamedKeyCredential to be tested.
 */
exports.AzureNamedKeyCredential = AzureNamedKeyCredential;
function isNamedKeyCredential(credential) {
  return (0, _coreUtil.isObjectWithProperties)(credential, ["name", "key"]) && typeof credential.key === "string" && typeof credential.name === "string";
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-auth/dist/browser/azureSASCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AzureSASCredential = void 0;
exports.isSASCredential = isSASCredential;
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A static-signature-based credential that supports updating
 * the underlying signature value.
 */
class AzureSASCredential {
  /**
   * The value of the shared access signature to be used in authentication
   */
  get signature() {
    return this._signature;
  }
  /**
   * Create an instance of an AzureSASCredential for use
   * with a service client.
   *
   * @param signature - The initial value of the shared access signature to use in authentication
   */
  constructor(signature) {
    if (!signature) {
      throw new Error("shared access signature must be a non-empty string");
    }
    this._signature = signature;
  }
  /**
   * Change the value of the signature.
   *
   * Updates will take effect upon the next request after
   * updating the signature value.
   *
   * @param newSignature - The new shared access signature value to be used
   */
  update(newSignature) {
    if (!newSignature) {
      throw new Error("shared access signature must be a non-empty string");
    }
    this._signature = newSignature;
  }
}
/**
 * Tests an object to determine whether it implements SASCredential.
 *
 * @param credential - The assumed SASCredential to be tested.
 */
exports.AzureSASCredential = AzureSASCredential;
function isSASCredential(credential) {
  return (0, _coreUtil.isObjectWithProperties)(credential, ["signature"]) && typeof credential.signature === "string";
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-auth/dist/browser/tokenCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTokenCredential = isTokenCredential;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Tests an object to determine whether it implements TokenCredential.
 *
 * @param credential - The assumed TokenCredential to be tested.
 */
function isTokenCredential(credential) {
  // Check for an object with a 'getToken' function and possibly with
  // a 'signRequest' function.  We do this check to make sure that
  // a ServiceClientCredentials implementor (like TokenClientCredentials
  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
  // it doesn't actually implement TokenCredential also.
  const castCredential = credential;
  return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === undefined || castCredential.getToken.length > 0);
}
},{}],"node_modules/@azure/core-auth/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AzureKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureKeyCredential.AzureKeyCredential;
  }
});
Object.defineProperty(exports, "AzureNamedKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureNamedKeyCredential.AzureNamedKeyCredential;
  }
});
Object.defineProperty(exports, "AzureSASCredential", {
  enumerable: true,
  get: function () {
    return _azureSASCredential.AzureSASCredential;
  }
});
Object.defineProperty(exports, "isKeyCredential", {
  enumerable: true,
  get: function () {
    return _keyCredential.isKeyCredential;
  }
});
Object.defineProperty(exports, "isNamedKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureNamedKeyCredential.isNamedKeyCredential;
  }
});
Object.defineProperty(exports, "isSASCredential", {
  enumerable: true,
  get: function () {
    return _azureSASCredential.isSASCredential;
  }
});
Object.defineProperty(exports, "isTokenCredential", {
  enumerable: true,
  get: function () {
    return _tokenCredential.isTokenCredential;
  }
});
var _azureKeyCredential = require("./azureKeyCredential.js");
var _keyCredential = require("./keyCredential.js");
var _azureNamedKeyCredential = require("./azureNamedKeyCredential.js");
var _azureSASCredential = require("./azureSASCredential.js");
var _tokenCredential = require("./tokenCredential.js");
},{"./azureKeyCredential.js":"node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js","./keyCredential.js":"node_modules/@azure/core-auth/dist/browser/keyCredential.js","./azureNamedKeyCredential.js":"node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js","./azureSASCredential.js":"node_modules/@azure/core-auth/dist/browser/azureSASCredential.js","./tokenCredential.js":"node_modules/@azure/core-auth/dist/browser/tokenCredential.js"}],"node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDisableKeepAlivePolicy = createDisableKeepAlivePolicy;
exports.disableKeepAlivePolicyName = void 0;
exports.pipelineContainsDisableKeepAlivePolicy = pipelineContainsDisableKeepAlivePolicy;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const disableKeepAlivePolicyName = exports.disableKeepAlivePolicyName = "DisableKeepAlivePolicy";
function createDisableKeepAlivePolicy() {
  return {
    name: disableKeepAlivePolicyName,
    async sendRequest(request, next) {
      request.disableKeepAlive = true;
      return next(request);
    }
  };
}
/**
 * @internal
 */
function pipelineContainsDisableKeepAlivePolicy(pipeline) {
  return pipeline.getOrderedPolicies().some(policy => policy.name === disableKeepAlivePolicyName);
}
},{}],"node_modules/@azure/core-client/dist/browser/base64.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeString = decodeString;
exports.decodeStringToString = decodeStringToString;
exports.encodeByteArray = encodeByteArray;
exports.encodeString = encodeString;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Encodes a string in base64 format.
 * @param value - the string to encode
 * @internal
 */
function encodeString(value) {
  return btoa(value);
}
/**
 * Encodes a byte array in base64 format.
 * @param value - the Uint8Aray to encode
 * @internal
 */
function encodeByteArray(value) {
  let str = "";
  for (let i = 0; i < value.length; i++) {
    str += String.fromCharCode(value[i]);
  }
  return btoa(str);
}
/**
 * Decodes a base64 string into a byte array.
 * @param value - the base64 string to decode
 * @internal
 */
function decodeString(value) {
  const byteString = atob(value);
  const arr = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    arr[i] = byteString.charCodeAt(i);
  }
  return arr;
}
/**
 * Decodes a base64 string into a string.
 * @param value - the base64 string to decode
 * @internal
 */
function decodeStringToString(value) {
  return atob(value);
}
},{}],"node_modules/@azure/core-client/dist/browser/interfaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XML_CHARKEY = exports.XML_ATTRKEY = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Default key used to access the XML attributes.
 */
const XML_ATTRKEY = exports.XML_ATTRKEY = "$";
/**
 * Default key used to access the XML value content.
 */
const XML_CHARKEY = exports.XML_CHARKEY = "_";
},{}],"node_modules/@azure/core-client/dist/browser/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenResponse = flattenResponse;
exports.isDuration = isDuration;
exports.isPrimitiveBody = isPrimitiveBody;
exports.isValidUuid = isValidUuid;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A type guard for a primitive response body.
 * @param value - Value to test
 *
 * @internal
 */
function isPrimitiveBody(value, mapperTypeName) {
  return mapperTypeName !== "Composite" && mapperTypeName !== "Dictionary" && (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === undefined || value === null);
}
const validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
/**
 * Returns true if the given string is in ISO 8601 format.
 * @param value - The value to be validated for ISO 8601 duration format.
 * @internal
 */
function isDuration(value) {
  return validateISODuration.test(value);
}
const validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
/**
 * Returns true if the provided uuid is valid.
 *
 * @param uuid - The uuid that needs to be validated.
 *
 * @internal
 */
function isValidUuid(uuid) {
  return validUuidRegex.test(uuid);
}
/**
 * Maps the response as follows:
 * - wraps the response body if needed (typically if its type is primitive).
 * - returns null if the combination of the headers and the body is empty.
 * - otherwise, returns the combination of the headers and the body.
 *
 * @param responseObject - a representation of the parsed response
 * @returns the response that will be returned to the user which can be null and/or wrapped
 *
 * @internal
 */
function handleNullableResponseAndWrappableBody(responseObject) {
  const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
  if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {
    return responseObject.shouldWrapBody ? {
      body: null
    } : null;
  } else {
    return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), {
      body: responseObject.body
    }) : combinedHeadersAndBody;
  }
}
/**
 * Take a `FullOperationResponse` and turn it into a flat
 * response object to hand back to the consumer.
 * @param fullResponse - The processed response from the operation request
 * @param responseSpec - The response map from the OperationSpec
 *
 * @internal
 */
function flattenResponse(fullResponse, responseSpec) {
  var _a, _b;
  const parsedHeaders = fullResponse.parsedHeaders;
  // head methods never have a body, but we return a boolean set to body property
  // to indicate presence/absence of the resource
  if (fullResponse.request.method === "HEAD") {
    return Object.assign(Object.assign({}, parsedHeaders), {
      body: fullResponse.parsedBody
    });
  }
  const bodyMapper = responseSpec && responseSpec.bodyMapper;
  const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);
  const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;
  /** If the body is asked for, we look at the expected body type to handle it */
  if (expectedBodyTypeName === "Stream") {
    return Object.assign(Object.assign({}, parsedHeaders), {
      blobBody: fullResponse.blobBody,
      readableStreamBody: fullResponse.readableStreamBody
    });
  }
  const modelProperties = expectedBodyTypeName === "Composite" && bodyMapper.type.modelProperties || {};
  const isPageableResponse = Object.keys(modelProperties).some(k => modelProperties[k].serializedName === "");
  if (expectedBodyTypeName === "Sequence" || isPageableResponse) {
    const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];
    for (const key of Object.keys(modelProperties)) {
      if (modelProperties[key].serializedName) {
        arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];
      }
    }
    if (parsedHeaders) {
      for (const key of Object.keys(parsedHeaders)) {
        arrayResponse[key] = parsedHeaders[key];
      }
    }
    return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;
  }
  return handleNullableResponseAndWrappableBody({
    body: fullResponse.parsedBody,
    headers: parsedHeaders,
    hasNullableType: isNullable,
    shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)
  });
}
},{}],"node_modules/@azure/core-client/dist/browser/serializer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapperTypeNames = void 0;
exports.createSerializer = createSerializer;
var base64 = _interopRequireWildcard(require("./base64.js"));
var _interfaces = require("./interfaces.js");
var _utils = require("./utils.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

class SerializerImpl {
  constructor(modelMappers = {}, isXML = false) {
    this.modelMappers = modelMappers;
    this.isXML = isXML;
  }
  /**
   * @deprecated Removing the constraints validation on client side.
   */
  validateConstraints(mapper, value, objectName) {
    const failValidation = (constraintName, constraintValue) => {
      throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
    };
    if (mapper.constraints && value !== undefined && value !== null) {
      const {
        ExclusiveMaximum,
        ExclusiveMinimum,
        InclusiveMaximum,
        InclusiveMinimum,
        MaxItems,
        MaxLength,
        MinItems,
        MinLength,
        MultipleOf,
        Pattern,
        UniqueItems
      } = mapper.constraints;
      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {
        failValidation("ExclusiveMaximum", ExclusiveMaximum);
      }
      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {
        failValidation("ExclusiveMinimum", ExclusiveMinimum);
      }
      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {
        failValidation("InclusiveMaximum", InclusiveMaximum);
      }
      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {
        failValidation("InclusiveMinimum", InclusiveMinimum);
      }
      if (MaxItems !== undefined && value.length > MaxItems) {
        failValidation("MaxItems", MaxItems);
      }
      if (MaxLength !== undefined && value.length > MaxLength) {
        failValidation("MaxLength", MaxLength);
      }
      if (MinItems !== undefined && value.length < MinItems) {
        failValidation("MinItems", MinItems);
      }
      if (MinLength !== undefined && value.length < MinLength) {
        failValidation("MinLength", MinLength);
      }
      if (MultipleOf !== undefined && value % MultipleOf !== 0) {
        failValidation("MultipleOf", MultipleOf);
      }
      if (Pattern) {
        const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
        if (typeof value !== "string" || value.match(pattern) === null) {
          failValidation("Pattern", Pattern);
        }
      }
      if (UniqueItems && value.some((item, i, ar) => ar.indexOf(item) !== i)) {
        failValidation("UniqueItems", UniqueItems);
      }
    }
  }
  /**
   * Serialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   *
   * @param object - A valid Javascript object to be serialized
   *
   * @param objectName - Name of the serialized object
   *
   * @param options - additional options to serialization
   *
   * @returns A valid serialized Javascript object
   */
  serialize(mapper, object, objectName, options = {
    xml: {}
  }) {
    var _a, _b, _c;
    const updatedOptions = {
      xml: {
        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : "",
        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces.XML_CHARKEY
      }
    };
    let payload = {};
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Sequence$/i) !== null) {
      payload = [];
    }
    if (mapper.isConstant) {
      object = mapper.defaultValue;
    }
    // This table of allowed values should help explain
    // the mapper.required and mapper.nullable properties.
    // X means "neither undefined or null are allowed".
    //           || required
    //           || true      | false
    //  nullable || ==========================
    //      true || null      | undefined/null
    //     false || X         | undefined
    // undefined || X         | undefined/null
    const {
      required,
      nullable
    } = mapper;
    if (required && nullable && object === undefined) {
      throw new Error(`${objectName} cannot be undefined.`);
    }
    if (required && !nullable && (object === undefined || object === null)) {
      throw new Error(`${objectName} cannot be null or undefined.`);
    }
    if (!required && nullable === false && object === null) {
      throw new Error(`${objectName} cannot be null.`);
    }
    if (object === undefined || object === null) {
      payload = object;
    } else {
      if (mapperType.match(/^any$/i) !== null) {
        payload = object;
      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
        payload = serializeBasicTypes(mapperType, objectName, object);
      } else if (mapperType.match(/^Enum$/i) !== null) {
        const enumMapper = mapper;
        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
        payload = serializeDateTypes(mapperType, object, objectName);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = serializeByteArrayType(objectName, object);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = serializeBase64UrlType(objectName, object);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Composite$/i) !== null) {
        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      }
    }
    return payload;
  }
  /**
   * Deserialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   *
   * @param responseBody - A valid Javascript entity to be deserialized
   *
   * @param objectName - Name of the deserialized object
   *
   * @param options - Controls behavior of XML parser and builder.
   *
   * @returns A valid deserialized Javascript object
   */
  deserialize(mapper, responseBody, objectName, options = {
    xml: {}
  }) {
    var _a, _b, _c, _d;
    const updatedOptions = {
      xml: {
        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : "",
        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces.XML_CHARKEY
      },
      ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false
    };
    if (responseBody === undefined || responseBody === null) {
      if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
        // between the list being empty versus being missing,
        // so let's do the more user-friendly thing and return an empty list.
        responseBody = [];
      }
      // specifically check for undefined as default value can be a falsey value `0, "", false, null`
      if (mapper.defaultValue !== undefined) {
        responseBody = mapper.defaultValue;
      }
      return responseBody;
    }
    let payload;
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Composite$/i) !== null) {
      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
    } else {
      if (this.isXML) {
        const xmlCharKey = updatedOptions.xml.xmlCharKey;
        /**
         * If the mapper specifies this as a non-composite type value but the responseBody contains
         * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
         * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
         */
        if (responseBody[_interfaces.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {
          responseBody = responseBody[xmlCharKey];
        }
      }
      if (mapperType.match(/^Number$/i) !== null) {
        payload = parseFloat(responseBody);
        if (isNaN(payload)) {
          payload = responseBody;
        }
      } else if (mapperType.match(/^Boolean$/i) !== null) {
        if (responseBody === "true") {
          payload = true;
        } else if (responseBody === "false") {
          payload = false;
        } else {
          payload = responseBody;
        }
      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
        payload = responseBody;
      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
        payload = new Date(responseBody);
      } else if (mapperType.match(/^UnixTime$/i) !== null) {
        payload = unixTimeToDate(responseBody);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = base64.decodeString(responseBody);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = base64UrlToByteArray(responseBody);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
      }
    }
    if (mapper.isConstant) {
      payload = mapper.defaultValue;
    }
    return payload;
  }
}
/**
 * Method that creates and returns a Serializer.
 * @param modelMappers - Known models to map
 * @param isXML - If XML should be supported
 */
function createSerializer(modelMappers = {}, isXML = false) {
  return new SerializerImpl(modelMappers, isXML);
}
function trimEnd(str, ch) {
  let len = str.length;
  while (len - 1 >= 0 && str[len - 1] === ch) {
    --len;
  }
  return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
  if (!buffer) {
    return undefined;
  }
  if (!(buffer instanceof Uint8Array)) {
    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
  }
  // Uint8Array to Base64.
  const str = base64.encodeByteArray(buffer);
  // Base64 to Base64Url.
  return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
  if (!str) {
    return undefined;
  }
  if (str && typeof str.valueOf() !== "string") {
    throw new Error("Please provide an input of type string for converting to Uint8Array");
  }
  // Base64Url to Base64.
  str = str.replace(/-/g, "+").replace(/_/g, "/");
  // Base64 to Uint8Array.
  return base64.decodeString(str);
}
function splitSerializeName(prop) {
  const classes = [];
  let partialclass = "";
  if (prop) {
    const subwords = prop.split(".");
    for (const item of subwords) {
      if (item.charAt(item.length - 1) === "\\") {
        partialclass += item.substr(0, item.length - 1) + ".";
      } else {
        partialclass += item;
        classes.push(partialclass);
        partialclass = "";
      }
    }
  }
  return classes;
}
function dateToUnixTime(d) {
  if (!d) {
    return undefined;
  }
  if (typeof d.valueOf() === "string") {
    d = new Date(d);
  }
  return Math.floor(d.getTime() / 1000);
}
function unixTimeToDate(n) {
  if (!n) {
    return undefined;
  }
  return new Date(n * 1000);
}
function serializeBasicTypes(typeName, objectName, value) {
  if (value !== null && value !== undefined) {
    if (typeName.match(/^Number$/i) !== null) {
      if (typeof value !== "number") {
        throw new Error(`${objectName} with value ${value} must be of type number.`);
      }
    } else if (typeName.match(/^String$/i) !== null) {
      if (typeof value.valueOf() !== "string") {
        throw new Error(`${objectName} with value "${value}" must be of type string.`);
      }
    } else if (typeName.match(/^Uuid$/i) !== null) {
      if (!(typeof value.valueOf() === "string" && (0, _utils.isValidUuid)(value))) {
        throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
      }
    } else if (typeName.match(/^Boolean$/i) !== null) {
      if (typeof value !== "boolean") {
        throw new Error(`${objectName} with value ${value} must be of type boolean.`);
      }
    } else if (typeName.match(/^Stream$/i) !== null) {
      const objectType = typeof value;
      if (objectType !== "string" && typeof value.pipe !== "function" &&
      // NodeJS.ReadableStream
      typeof value.tee !== "function" &&
      // browser ReadableStream
      !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) &&
      // File objects count as a type of Blob, so we want to use instanceof explicitly
      !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob) && objectType !== "function") {
        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);
      }
    }
  }
  return value;
}
function serializeEnumType(objectName, allowedValues, value) {
  if (!allowedValues) {
    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
  }
  const isPresent = allowedValues.some(item => {
    if (typeof item.valueOf() === "string") {
      return item.toLowerCase() === value.toLowerCase();
    }
    return item === value;
  });
  if (!isPresent) {
    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
  }
  return value;
}
function serializeByteArrayType(objectName, value) {
  if (value !== undefined && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = base64.encodeByteArray(value);
  }
  return value;
}
function serializeBase64UrlType(objectName, value) {
  if (value !== undefined && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = bufferToBase64Url(value);
  }
  return value;
}
function serializeDateTypes(typeName, value, objectName) {
  if (value !== undefined && value !== null) {
    if (typeName.match(/^Date$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
    } else if (typeName.match(/^DateTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
      }
      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
    } else if (typeName.match(/^UnixTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);
      }
      value = dateToUnixTime(value);
    } else if (typeName.match(/^TimeSpan$/i) !== null) {
      if (!(0, _utils.isDuration)(value)) {
        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
      }
    }
  }
  return value;
}
function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
  var _a;
  if (!Array.isArray(object)) {
    throw new Error(`${objectName} must be of type Array.`);
  }
  let elementType = mapper.type.element;
  if (!elementType || typeof elementType !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
  }
  // Quirk: Composite mappers referenced by `element` might
  // not have *all* properties declared (like uberParent),
  // so let's try to look up the full definition by name.
  if (elementType.type.name === "Composite" && elementType.type.className) {
    elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;
  }
  const tempArray = [];
  for (let i = 0; i < object.length; i++) {
    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);
    if (isXml && elementType.xmlNamespace) {
      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
      if (elementType.type.name === "Composite") {
        tempArray[i] = Object.assign({}, serializedValue);
        tempArray[i][_interfaces.XML_ATTRKEY] = {
          [xmlnsKey]: elementType.xmlNamespace
        };
      } else {
        tempArray[i] = {};
        tempArray[i][options.xml.xmlCharKey] = serializedValue;
        tempArray[i][_interfaces.XML_ATTRKEY] = {
          [xmlnsKey]: elementType.xmlNamespace
        };
      }
    } else {
      tempArray[i] = serializedValue;
    }
  }
  return tempArray;
}
function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
  if (typeof object !== "object") {
    throw new Error(`${objectName} must be of type object.`);
  }
  const valueType = mapper.type.value;
  if (!valueType || typeof valueType !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
  }
  const tempDictionary = {};
  for (const key of Object.keys(object)) {
    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);
    // If the element needs an XML namespace we need to add it within the $ property
    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
  }
  // Add the namespace to the root element if needed
  if (isXml && mapper.xmlNamespace) {
    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
    const result = tempDictionary;
    result[_interfaces.XML_ATTRKEY] = {
      [xmlnsKey]: mapper.xmlNamespace
    };
    return result;
  }
  return tempDictionary;
}
/**
 * Resolves the additionalProperties property from a referenced mapper
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 * @param objectName - name of the object being serialized
 */
function resolveAdditionalProperties(serializer, mapper, objectName) {
  const additionalProperties = mapper.type.additionalProperties;
  if (!additionalProperties && mapper.type.className) {
    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
  }
  return additionalProperties;
}
/**
 * Finds the mapper referenced by className
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 * @param objectName - name of the object being serialized
 */
function resolveReferencedMapper(serializer, mapper, objectName) {
  const className = mapper.type.className;
  if (!className) {
    throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, undefined, 2)}".`);
  }
  return serializer.modelMappers[className];
}
/**
 * Resolves a composite mapper's modelProperties.
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 */
function resolveModelProperties(serializer, mapper, objectName) {
  let modelProps = mapper.type.modelProperties;
  if (!modelProps) {
    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
    if (!modelMapper) {
      throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
    }
    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
    if (!modelProps) {
      throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
  }
  return modelProps;
}
function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
  }
  if (object !== undefined && object !== null) {
    const payload = {};
    const modelProps = resolveModelProperties(serializer, mapper, objectName);
    for (const key of Object.keys(modelProps)) {
      const propertyMapper = modelProps[key];
      if (propertyMapper.readOnly) {
        continue;
      }
      let propName;
      let parentObject = payload;
      if (serializer.isXML) {
        if (propertyMapper.xmlIsWrapped) {
          propName = propertyMapper.xmlName;
        } else {
          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
        }
      } else {
        const paths = splitSerializeName(propertyMapper.serializedName);
        propName = paths.pop();
        for (const pathName of paths) {
          const childObject = parentObject[pathName];
          if ((childObject === undefined || childObject === null) && (object[key] !== undefined && object[key] !== null || propertyMapper.defaultValue !== undefined)) {
            parentObject[pathName] = {};
          }
          parentObject = parentObject[pathName];
        }
      }
      if (parentObject !== undefined && parentObject !== null) {
        if (isXml && mapper.xmlNamespace) {
          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
          parentObject[_interfaces.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_interfaces.XML_ATTRKEY]), {
            [xmlnsKey]: mapper.xmlNamespace
          });
        }
        const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
        let toSerialize = object[key];
        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === undefined || toSerialize === null)) {
          toSerialize = mapper.serializedName;
        }
        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
        if (serializedValue !== undefined && propName !== undefined && propName !== null) {
          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
          if (isXml && propertyMapper.xmlIsAttribute) {
            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
            // This keeps things simple while preventing name collision
            // with names in user documents.
            parentObject[_interfaces.XML_ATTRKEY] = parentObject[_interfaces.XML_ATTRKEY] || {};
            parentObject[_interfaces.XML_ATTRKEY][propName] = serializedValue;
          } else if (isXml && propertyMapper.xmlIsWrapped) {
            parentObject[propName] = {
              [propertyMapper.xmlElementName]: value
            };
          } else {
            parentObject[propName] = value;
          }
        }
      }
    }
    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);
    if (additionalPropertiesMapper) {
      const propNames = Object.keys(modelProps);
      for (const clientPropName in object) {
        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);
        if (isAdditionalProperty) {
          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
        }
      }
    }
    return payload;
  }
  return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
  if (!isXml || !propertyMapper.xmlNamespace) {
    return serializedValue;
  }
  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
  const xmlNamespace = {
    [xmlnsKey]: propertyMapper.xmlNamespace
  };
  if (["Composite"].includes(propertyMapper.type.name)) {
    if (serializedValue[_interfaces.XML_ATTRKEY]) {
      return serializedValue;
    } else {
      const result = Object.assign({}, serializedValue);
      result[_interfaces.XML_ATTRKEY] = xmlNamespace;
      return result;
    }
  }
  const result = {};
  result[options.xml.xmlCharKey] = serializedValue;
  result[_interfaces.XML_ATTRKEY] = xmlNamespace;
  return result;
}
function isSpecialXmlProperty(propertyName, options) {
  return [_interfaces.XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);
}
function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
  var _a, _b;
  const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : _interfaces.XML_CHARKEY;
  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
  }
  const modelProps = resolveModelProperties(serializer, mapper, objectName);
  let instance = {};
  const handledPropertyNames = [];
  for (const key of Object.keys(modelProps)) {
    const propertyMapper = modelProps[key];
    const paths = splitSerializeName(modelProps[key].serializedName);
    handledPropertyNames.push(paths[0]);
    const {
      serializedName,
      xmlName,
      xmlElementName
    } = propertyMapper;
    let propertyObjectName = objectName;
    if (serializedName !== "" && serializedName !== undefined) {
      propertyObjectName = objectName + "." + serializedName;
    }
    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
    if (headerCollectionPrefix) {
      const dictionary = {};
      for (const headerKey of Object.keys(responseBody)) {
        if (headerKey.startsWith(headerCollectionPrefix)) {
          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
        }
        handledPropertyNames.push(headerKey);
      }
      instance[key] = dictionary;
    } else if (serializer.isXML) {
      if (propertyMapper.xmlIsAttribute && responseBody[_interfaces.XML_ATTRKEY]) {
        instance[key] = serializer.deserialize(propertyMapper, responseBody[_interfaces.XML_ATTRKEY][xmlName], propertyObjectName, options);
      } else if (propertyMapper.xmlIsMsText) {
        if (responseBody[xmlCharKey] !== undefined) {
          instance[key] = responseBody[xmlCharKey];
        } else if (typeof responseBody === "string") {
          // The special case where xml parser parses "<Name>content</Name>" into JSON of
          //   `{ name: "content"}` instead of `{ name: { "_": "content" }}`
          instance[key] = responseBody;
        }
      } else {
        const propertyName = xmlElementName || xmlName || serializedName;
        if (propertyMapper.xmlIsWrapped) {
          /* a list of <xmlElementName> wrapped by <xmlName>
            For the xml example below
              <Cors>
                <CorsRule>...</CorsRule>
                <CorsRule>...</CorsRule>
              </Cors>
            the responseBody has
              {
                Cors: {
                  CorsRule: [{...}, {...}]
                }
              }
            xmlName is "Cors" and xmlElementName is"CorsRule".
          */
          const wrapped = responseBody[xmlName];
          const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];
          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
          handledPropertyNames.push(xmlName);
        } else {
          const property = responseBody[propertyName];
          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
          handledPropertyNames.push(propertyName);
        }
      }
    } else {
      // deserialize the property if it is present in the provided responseBody instance
      let propertyInstance;
      let res = responseBody;
      // traversing the object step by step.
      let steps = 0;
      for (const item of paths) {
        if (!res) break;
        steps++;
        res = res[item];
      }
      // only accept null when reaching the last position of object otherwise it would be undefined
      if (res === null && steps < paths.length) {
        res = undefined;
      }
      propertyInstance = res;
      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
      // checking that the model property name (key)(ex: "fishtype") and the
      // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
      // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
      // is a better approach. The generator is not consistent with escaping '\.' in the
      // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
      // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
      // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
      // the transformation of model property name (ex: "fishtype") is done consistently.
      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === undefined || propertyInstance === null)) {
        propertyInstance = mapper.serializedName;
      }
      let serializedValue;
      // paging
      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
        propertyInstance = responseBody[key];
        const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        // Copy over any properties that have already been added into the instance, where they do
        // not exist on the newly de-serialized array
        for (const [k, v] of Object.entries(instance)) {
          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
            arrayInstance[k] = v;
          }
        }
        instance = arrayInstance;
      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        instance[key] = serializedValue;
      }
    }
  }
  const additionalPropertiesMapper = mapper.type.additionalProperties;
  if (additionalPropertiesMapper) {
    const isAdditionalProperty = responsePropName => {
      for (const clientPropName in modelProps) {
        const paths = splitSerializeName(modelProps[clientPropName].serializedName);
        if (paths[0] === responsePropName) {
          return false;
        }
      }
      return true;
    };
    for (const responsePropName in responseBody) {
      if (isAdditionalProperty(responsePropName)) {
        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
      }
    }
  } else if (responseBody && !options.ignoreUnknownProperties) {
    for (const key of Object.keys(responseBody)) {
      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
        instance[key] = responseBody[key];
      }
    }
  }
  return instance;
}
function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
  /* jshint validthis: true */
  const value = mapper.type.value;
  if (!value || typeof value !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    const tempDictionary = {};
    for (const key of Object.keys(responseBody)) {
      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
    }
    return tempDictionary;
  }
  return responseBody;
}
function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
  var _a;
  let element = mapper.type.element;
  if (!element || typeof element !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    if (!Array.isArray(responseBody)) {
      // xml2js will interpret a single element array as just the element, so force it to be an array
      responseBody = [responseBody];
    }
    // Quirk: Composite mappers referenced by `element` might
    // not have *all* properties declared (like uberParent),
    // so let's try to look up the full definition by name.
    if (element.type.name === "Composite" && element.type.className) {
      element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;
    }
    const tempArray = [];
    for (let i = 0; i < responseBody.length; i++) {
      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
    }
    return tempArray;
  }
  return responseBody;
}
function getIndexDiscriminator(discriminators, discriminatorValue, typeName) {
  const typeNamesToCheck = [typeName];
  while (typeNamesToCheck.length) {
    const currentName = typeNamesToCheck.shift();
    const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {
      return discriminators[indexDiscriminator];
    } else {
      for (const [name, mapper] of Object.entries(discriminators)) {
        if (name.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className) {
          typeNamesToCheck.push(mapper.type.className);
        }
      }
    }
  }
  return undefined;
}
function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
  var _a;
  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
  if (polymorphicDiscriminator) {
    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
    if (discriminatorName) {
      // The serializedName might have \\, which we just want to ignore
      if (polymorphicPropertyName === "serializedName") {
        discriminatorName = discriminatorName.replace(/\\/gi, "");
      }
      const discriminatorValue = object[discriminatorName];
      const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;
      if (typeof discriminatorValue === "string" && typeName) {
        const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);
        if (polymorphicMapper) {
          mapper = polymorphicMapper;
        }
      }
    }
  }
  return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer, typeName) {
  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
}
/**
 * Known types of Mappers
 */
const MapperTypeNames = exports.MapperTypeNames = {
  Base64Url: "Base64Url",
  Boolean: "Boolean",
  ByteArray: "ByteArray",
  Composite: "Composite",
  Date: "Date",
  DateTime: "DateTime",
  DateTimeRfc1123: "DateTimeRfc1123",
  Dictionary: "Dictionary",
  Enum: "Enum",
  Number: "Number",
  Object: "Object",
  Sequence: "Sequence",
  String: "String",
  Stream: "Stream",
  TimeSpan: "TimeSpan",
  UnixTime: "UnixTime"
};
},{"./base64.js":"node_modules/@azure/core-client/dist/browser/base64.js","./interfaces.js":"node_modules/@azure/core-client/dist/browser/interfaces.js","./utils.js":"node_modules/@azure/core-client/dist/browser/utils.js"}],"node_modules/@azure/core-client/dist/browser/state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.state = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.
 */
const state = exports.state = {
  operationRequestMap: new WeakMap()
};
},{}],"node_modules/@azure/core-client/dist/browser/operationHelpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationArgumentValueFromParameter = getOperationArgumentValueFromParameter;
exports.getOperationRequestInfo = getOperationRequestInfo;
var _state = require("./state.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * @internal
 * Retrieves the value to use for a given operation argument
 * @param operationArguments - The arguments passed from the generated client
 * @param parameter - The parameter description
 * @param fallbackObject - If something isn't found in the arguments bag, look here.
 *  Generally used to look at the service client properties.
 */
function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
  let parameterPath = parameter.parameterPath;
  const parameterMapper = parameter.mapper;
  let value;
  if (typeof parameterPath === "string") {
    parameterPath = [parameterPath];
  }
  if (Array.isArray(parameterPath)) {
    if (parameterPath.length > 0) {
      if (parameterMapper.isConstant) {
        value = parameterMapper.defaultValue;
      } else {
        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
        if (!propertySearchResult.propertyFound && fallbackObject) {
          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);
        }
        let useDefaultValue = false;
        if (!propertySearchResult.propertyFound) {
          useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
        }
        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
      }
    }
  } else {
    if (parameterMapper.required) {
      value = {};
    }
    for (const propertyName in parameterPath) {
      const propertyMapper = parameterMapper.type.modelProperties[propertyName];
      const propertyPath = parameterPath[propertyName];
      const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
        parameterPath: propertyPath,
        mapper: propertyMapper
      }, fallbackObject);
      if (propertyValue !== undefined) {
        if (!value) {
          value = {};
        }
        value[propertyName] = propertyValue;
      }
    }
  }
  return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
  const result = {
    propertyFound: false
  };
  let i = 0;
  for (; i < parameterPath.length; ++i) {
    const parameterPathPart = parameterPath[i];
    // Make sure to check inherited properties too, so don't use hasOwnProperty().
    if (parent && parameterPathPart in parent) {
      parent = parent[parameterPathPart];
    } else {
      break;
    }
  }
  if (i === parameterPath.length) {
    result.propertyValue = parent;
    result.propertyFound = true;
  }
  return result;
}
const originalRequestSymbol = Symbol.for("@azure/core-client original request");
function hasOriginalRequest(request) {
  return originalRequestSymbol in request;
}
function getOperationRequestInfo(request) {
  if (hasOriginalRequest(request)) {
    return getOperationRequestInfo(request[originalRequestSymbol]);
  }
  let info = _state.state.operationRequestMap.get(request);
  if (!info) {
    info = {};
    _state.state.operationRequestMap.set(request, info);
  }
  return info;
}
},{"./state.js":"node_modules/@azure/core-client/dist/browser/state.js"}],"node_modules/@azure/core-client/dist/browser/deserializationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deserializationPolicy = deserializationPolicy;
exports.deserializationPolicyName = void 0;
var _interfaces = require("./interfaces.js");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _serializer = require("./serializer.js");
var _operationHelpers = require("./operationHelpers.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const defaultJsonContentTypes = ["application/json", "text/json"];
const defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
/**
 * The programmatic identifier of the deserializationPolicy.
 */
const deserializationPolicyName = exports.deserializationPolicyName = "deserializationPolicy";
/**
 * This policy handles parsing out responses according to OperationSpecs on the request.
 */
function deserializationPolicy(options = {}) {
  var _a, _b, _c, _d, _e, _f, _g;
  const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;
  const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;
  const parseXML = options.parseXML;
  const serializerOptions = options.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : "",
      includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,
      xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : _interfaces.XML_CHARKEY
    }
  };
  return {
    name: deserializationPolicyName,
    async sendRequest(request, next) {
      const response = await next(request);
      return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);
    }
  };
}
function getOperationResponseMap(parsedResponse) {
  let result;
  const request = parsedResponse.request;
  const operationInfo = (0, _operationHelpers.getOperationRequestInfo)(request);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (operationSpec) {
    if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {
      result = operationSpec.responses[parsedResponse.status];
    } else {
      result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);
    }
  }
  return result;
}
function shouldDeserializeResponse(parsedResponse) {
  const request = parsedResponse.request;
  const operationInfo = (0, _operationHelpers.getOperationRequestInfo)(request);
  const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;
  let result;
  if (shouldDeserialize === undefined) {
    result = true;
  } else if (typeof shouldDeserialize === "boolean") {
    result = shouldDeserialize;
  } else {
    result = shouldDeserialize(parsedResponse);
  }
  return result;
}
async function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {
  const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);
  if (!shouldDeserializeResponse(parsedResponse)) {
    return parsedResponse;
  }
  const operationInfo = (0, _operationHelpers.getOperationRequestInfo)(parsedResponse.request);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (!operationSpec || !operationSpec.responses) {
    return parsedResponse;
  }
  const responseSpec = getOperationResponseMap(parsedResponse);
  const {
    error,
    shouldReturnResponse
  } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);
  if (error) {
    throw error;
  } else if (shouldReturnResponse) {
    return parsedResponse;
  }
  // An operation response spec does exist for current status code, so
  // use it to deserialize the response.
  if (responseSpec) {
    if (responseSpec.bodyMapper) {
      let valueToDeserialize = parsedResponse.parsedBody;
      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer.MapperTypeNames.Sequence) {
        valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
      }
      try {
        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
      } catch (deserializeError) {
        const restError = new _coreRestPipeline.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
          statusCode: parsedResponse.status,
          request: parsedResponse.request,
          response: parsedResponse
        });
        throw restError;
      }
    } else if (operationSpec.httpMethod === "HEAD") {
      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
    }
    if (responseSpec.headersMapper) {
      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", {
        xml: {},
        ignoreUnknownProperties: true
      });
    }
  }
  return parsedResponse;
}
function isOperationSpecEmpty(operationSpec) {
  const expectedStatusCodes = Object.keys(operationSpec.responses);
  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {
  var _a;
  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
  if (isExpectedStatusCode) {
    if (responseSpec) {
      if (!responseSpec.isError) {
        return {
          error: null,
          shouldReturnResponse: false
        };
      }
    } else {
      return {
        error: null,
        shouldReturnResponse: false
      };
    }
  }
  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
  const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
  const error = new _coreRestPipeline.RestError(initialErrorMessage, {
    statusCode: parsedResponse.status,
    request: parsedResponse.request,
    response: parsedResponse
  });
  // If the item failed but there's no error spec or default spec to deserialize the error,
  // we should fail so we just throw the parsed response
  if (!errorResponseSpec) {
    throw error;
  }
  const defaultBodyMapper = errorResponseSpec.bodyMapper;
  const defaultHeadersMapper = errorResponseSpec.headersMapper;
  try {
    // If error response has a body, try to deserialize it using default body mapper.
    // Then try to extract error code & message from it
    if (parsedResponse.parsedBody) {
      const parsedBody = parsedResponse.parsedBody;
      let deserializedError;
      if (defaultBodyMapper) {
        let valueToDeserialize = parsedBody;
        if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer.MapperTypeNames.Sequence) {
          valueToDeserialize = [];
          const elementName = defaultBodyMapper.xmlElementName;
          if (typeof parsedBody === "object" && elementName) {
            valueToDeserialize = parsedBody[elementName];
          }
        }
        deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
      }
      const internalError = parsedBody.error || deserializedError || parsedBody;
      error.code = internalError.code;
      if (internalError.message) {
        error.message = internalError.message;
      }
      if (defaultBodyMapper) {
        error.response.parsedBody = deserializedError;
      }
    }
    // If error response has headers, try to deserialize it using default header mapper
    if (parsedResponse.headers && defaultHeadersMapper) {
      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders");
    }
  } catch (defaultError) {
    error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
  }
  return {
    error,
    shouldReturnResponse: false
  };
}
async function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {
  var _a;
  if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) && operationResponse.bodyAsText) {
    const text = operationResponse.bodyAsText;
    const contentType = operationResponse.headers.get("Content-Type") || "";
    const contentComponents = !contentType ? [] : contentType.split(";").map(component => component.toLowerCase());
    try {
      if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {
        operationResponse.parsedBody = JSON.parse(text);
        return operationResponse;
      } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {
        if (!parseXML) {
          throw new Error("Parsing XML not supported.");
        }
        const body = await parseXML(text, opts.xml);
        operationResponse.parsedBody = body;
        return operationResponse;
      }
    } catch (err) {
      const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
      const errCode = err.code || _coreRestPipeline.RestError.PARSE_ERROR;
      const e = new _coreRestPipeline.RestError(msg, {
        code: errCode,
        statusCode: operationResponse.status,
        request: operationResponse.request,
        response: operationResponse
      });
      throw e;
    }
  }
  return operationResponse;
}
},{"./interfaces.js":"node_modules/@azure/core-client/dist/browser/interfaces.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./serializer.js":"node_modules/@azure/core-client/dist/browser/serializer.js","./operationHelpers.js":"node_modules/@azure/core-client/dist/browser/operationHelpers.js"}],"node_modules/@azure/core-client/dist/browser/interfaceHelpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPathStringFromParameter = getPathStringFromParameter;
exports.getStreamingResponseStatusCodes = getStreamingResponseStatusCodes;
var _serializer = require("./serializer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Gets the list of status codes for streaming responses.
 * @internal
 */
function getStreamingResponseStatusCodes(operationSpec) {
  const result = new Set();
  for (const statusCode in operationSpec.responses) {
    const operationResponse = operationSpec.responses[statusCode];
    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperTypeNames.Stream) {
      result.add(Number(statusCode));
    }
  }
  return result;
}
/**
 * Get the path to this parameter's value as a dotted string (a.b.c).
 * @param parameter - The parameter to get the path string for.
 * @returns The path to this parameter's value as a dotted string.
 * @internal
 */
function getPathStringFromParameter(parameter) {
  const {
    parameterPath,
    mapper
  } = parameter;
  let result;
  if (typeof parameterPath === "string") {
    result = parameterPath;
  } else if (Array.isArray(parameterPath)) {
    result = parameterPath.join(".");
  } else {
    result = mapper.serializedName;
  }
  return result;
}
},{"./serializer.js":"node_modules/@azure/core-client/dist/browser/serializer.js"}],"node_modules/@azure/core-client/dist/browser/serializationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializationPolicy = serializationPolicy;
exports.serializationPolicyName = void 0;
exports.serializeHeaders = serializeHeaders;
exports.serializeRequestBody = serializeRequestBody;
var _interfaces = require("./interfaces.js");
var _operationHelpers = require("./operationHelpers.js");
var _serializer = require("./serializer.js");
var _interfaceHelpers = require("./interfaceHelpers.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The programmatic identifier of the serializationPolicy.
 */
const serializationPolicyName = exports.serializationPolicyName = "serializationPolicy";
/**
 * This policy handles assembling the request body and headers using
 * an OperationSpec and OperationArguments on the request.
 */
function serializationPolicy(options = {}) {
  const stringifyXML = options.stringifyXML;
  return {
    name: serializationPolicyName,
    async sendRequest(request, next) {
      const operationInfo = (0, _operationHelpers.getOperationRequestInfo)(request);
      const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
      const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;
      if (operationSpec && operationArguments) {
        serializeHeaders(request, operationArguments, operationSpec);
        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);
      }
      return next(request);
    }
  };
}
/**
 * @internal
 */
function serializeHeaders(request, operationArguments, operationSpec) {
  var _a, _b;
  if (operationSpec.headerParameters) {
    for (const headerParameter of operationSpec.headerParameters) {
      let headerValue = (0, _operationHelpers.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);
      if (headerValue !== null && headerValue !== undefined || headerParameter.mapper.required) {
        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0, _interfaceHelpers.getPathStringFromParameter)(headerParameter));
        const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
          for (const key of Object.keys(headerValue)) {
            request.headers.set(headerCollectionPrefix + key, headerValue[key]);
          }
        } else {
          request.headers.set(headerParameter.mapper.serializedName || (0, _interfaceHelpers.getPathStringFromParameter)(headerParameter), headerValue);
        }
      }
    }
  }
  const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;
  if (customHeaders) {
    for (const customHeaderName of Object.keys(customHeaders)) {
      request.headers.set(customHeaderName, customHeaders[customHeaderName]);
    }
  }
}
/**
 * @internal
 */
function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {
  throw new Error("XML serialization unsupported!");
}) {
  var _a, _b, _c, _d, _e;
  const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : "",
      includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,
      xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : _interfaces.XML_CHARKEY
    }
  };
  const xmlCharKey = updatedOptions.xml.xmlCharKey;
  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
    request.body = (0, _operationHelpers.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);
    const bodyMapper = operationSpec.requestBody.mapper;
    const {
      required,
      serializedName,
      xmlName,
      xmlElementName,
      xmlNamespace,
      xmlNamespacePrefix,
      nullable
    } = bodyMapper;
    const typeName = bodyMapper.type.name;
    try {
      if (request.body !== undefined && request.body !== null || nullable && request.body === null || required) {
        const requestBodyParameterPathString = (0, _interfaceHelpers.getPathStringFromParameter)(operationSpec.requestBody);
        request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);
        const isStream = typeName === _serializer.MapperTypeNames.Stream;
        if (operationSpec.isXML) {
          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);
          if (typeName === _serializer.MapperTypeNames.Sequence) {
            request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          } else if (!isStream) {
            request.body = stringifyXML(value, {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          }
        } else if (typeName === _serializer.MapperTypeNames.String && (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match("text/plain")) || operationSpec.mediaType === "text")) {
          // the String serializer has validated that request body is a string
          // so just send the string.
          return;
        } else if (!isStream) {
          request.body = JSON.stringify(request.body);
        }
      }
    } catch (error) {
      throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, "  ")}.`);
    }
  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
    request.formData = {};
    for (const formDataParameter of operationSpec.formDataParameters) {
      const formDataParameterValue = (0, _operationHelpers.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);
      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0, _interfaceHelpers.getPathStringFromParameter)(formDataParameter);
        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0, _interfaceHelpers.getPathStringFromParameter)(formDataParameter), updatedOptions);
      }
    }
  }
}
/**
 * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
 */
function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
  // Composite and Sequence schemas already got their root namespace set during serialization
  // We just need to add xmlns to the other schema types
  if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
    const result = {};
    result[options.xml.xmlCharKey] = serializedValue;
    result[_interfaces.XML_ATTRKEY] = {
      [xmlnsKey]: xmlNamespace
    };
    return result;
  }
  return serializedValue;
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
  if (!Array.isArray(obj)) {
    obj = [obj];
  }
  if (!xmlNamespaceKey || !xmlNamespace) {
    return {
      [elementName]: obj
    };
  }
  const result = {
    [elementName]: obj
  };
  result[_interfaces.XML_ATTRKEY] = {
    [xmlNamespaceKey]: xmlNamespace
  };
  return result;
}
},{"./interfaces.js":"node_modules/@azure/core-client/dist/browser/interfaces.js","./operationHelpers.js":"node_modules/@azure/core-client/dist/browser/operationHelpers.js","./serializer.js":"node_modules/@azure/core-client/dist/browser/serializer.js","./interfaceHelpers.js":"node_modules/@azure/core-client/dist/browser/interfaceHelpers.js"}],"node_modules/@azure/core-client/dist/browser/pipeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClientPipeline = createClientPipeline;
var _deserializationPolicy = require("./deserializationPolicy.js");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _serializationPolicy = require("./serializationPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a new Pipeline for use with a Service Client.
 * Adds in deserializationPolicy by default.
 * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.
 * @param options - Options to customize the created pipeline.
 */
function createClientPipeline(options = {}) {
  const pipeline = (0, _coreRestPipeline.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});
  if (options.credentialOptions) {
    pipeline.addPolicy((0, _coreRestPipeline.bearerTokenAuthenticationPolicy)({
      credential: options.credentialOptions.credential,
      scopes: options.credentialOptions.credentialScopes
    }));
  }
  pipeline.addPolicy((0, _serializationPolicy.serializationPolicy)(options.serializationOptions), {
    phase: "Serialize"
  });
  pipeline.addPolicy((0, _deserializationPolicy.deserializationPolicy)(options.deserializationOptions), {
    phase: "Deserialize"
  });
  return pipeline;
}
},{"./deserializationPolicy.js":"node_modules/@azure/core-client/dist/browser/deserializationPolicy.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./serializationPolicy.js":"node_modules/@azure/core-client/dist/browser/serializationPolicy.js"}],"node_modules/@azure/core-client/dist/browser/httpClientCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

let cachedHttpClient;
function getCachedDefaultHttpClient() {
  if (!cachedHttpClient) {
    cachedHttpClient = (0, _coreRestPipeline.createDefaultHttpClient)();
  }
  return cachedHttpClient;
}
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js"}],"node_modules/@azure/core-client/dist/browser/urlHelpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendQueryParams = appendQueryParams;
exports.getRequestUrl = getRequestUrl;
var _operationHelpers = require("./operationHelpers.js");
var _interfaceHelpers = require("./interfaceHelpers.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const CollectionFormatToDelimiterMap = {
  CSV: ",",
  SSV: " ",
  Multi: "Multi",
  TSV: "\t",
  Pipes: "|"
};
function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
  const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);
  let isAbsolutePath = false;
  let requestUrl = replaceAll(baseUri, urlReplacements);
  if (operationSpec.path) {
    let path = replaceAll(operationSpec.path, urlReplacements);
    // QUIRK: sometimes we get a path component like /{nextLink}
    // which may be a fully formed URL with a leading /. In that case, we should
    // remove the leading /
    if (operationSpec.path === "/{nextLink}" && path.startsWith("/")) {
      path = path.substring(1);
    }
    // QUIRK: sometimes we get a path component like {nextLink}
    // which may be a fully formed URL. In that case, we should
    // ignore the baseUri.
    if (isAbsoluteUrl(path)) {
      requestUrl = path;
      isAbsolutePath = true;
    } else {
      requestUrl = appendPath(requestUrl, path);
    }
  }
  const {
    queryParams,
    sequenceParams
  } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);
  /**
   * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`
   * is an absolute path. This ensures that existing query parameter values in `requestUrl`
   * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it
   * is still being built so there is nothing to overwrite.
   */
  requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);
  return requestUrl;
}
function replaceAll(input, replacements) {
  let result = input;
  for (const [searchValue, replaceValue] of replacements) {
    result = result.split(searchValue).join(replaceValue);
  }
  return result;
}
function calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {
  var _a;
  const result = new Map();
  if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {
    for (const urlParameter of operationSpec.urlParameters) {
      let urlParameterValue = (0, _operationHelpers.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);
      const parameterPathString = (0, _interfaceHelpers.getPathStringFromParameter)(urlParameter);
      urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);
      if (!urlParameter.skipEncoding) {
        urlParameterValue = encodeURIComponent(urlParameterValue);
      }
      result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
    }
  }
  return result;
}
function isAbsoluteUrl(url) {
  return url.includes("://");
}
function appendPath(url, pathToAppend) {
  if (!pathToAppend) {
    return url;
  }
  const parsedUrl = new URL(url);
  let newPath = parsedUrl.pathname;
  if (!newPath.endsWith("/")) {
    newPath = `${newPath}/`;
  }
  if (pathToAppend.startsWith("/")) {
    pathToAppend = pathToAppend.substring(1);
  }
  const searchStart = pathToAppend.indexOf("?");
  if (searchStart !== -1) {
    const path = pathToAppend.substring(0, searchStart);
    const search = pathToAppend.substring(searchStart + 1);
    newPath = newPath + path;
    if (search) {
      parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;
    }
  } else {
    newPath = newPath + pathToAppend;
  }
  parsedUrl.pathname = newPath;
  return parsedUrl.toString();
}
function calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {
  var _a;
  const result = new Map();
  const sequenceParams = new Set();
  if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {
    for (const queryParameter of operationSpec.queryParameters) {
      if (queryParameter.mapper.type.name === "Sequence" && queryParameter.mapper.serializedName) {
        sequenceParams.add(queryParameter.mapper.serializedName);
      }
      let queryParameterValue = (0, _operationHelpers.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);
      if (queryParameterValue !== undefined && queryParameterValue !== null || queryParameter.mapper.required) {
        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0, _interfaceHelpers.getPathStringFromParameter)(queryParameter));
        const delimiter = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
        if (Array.isArray(queryParameterValue)) {
          // replace null and undefined
          queryParameterValue = queryParameterValue.map(item => {
            if (item === null || item === undefined) {
              return "";
            }
            return item;
          });
        }
        if (queryParameter.collectionFormat === "Multi" && queryParameterValue.length === 0) {
          continue;
        } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "SSV" || queryParameter.collectionFormat === "TSV")) {
          queryParameterValue = queryParameterValue.join(delimiter);
        }
        if (!queryParameter.skipEncoding) {
          if (Array.isArray(queryParameterValue)) {
            queryParameterValue = queryParameterValue.map(item => {
              return encodeURIComponent(item);
            });
          } else {
            queryParameterValue = encodeURIComponent(queryParameterValue);
          }
        }
        // Join pipes and CSV *after* encoding, or the server will be upset.
        if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "CSV" || queryParameter.collectionFormat === "Pipes")) {
          queryParameterValue = queryParameterValue.join(delimiter);
        }
        result.set(queryParameter.mapper.serializedName || (0, _interfaceHelpers.getPathStringFromParameter)(queryParameter), queryParameterValue);
      }
    }
  }
  return {
    queryParams: result,
    sequenceParams
  };
}
function simpleParseQueryParams(queryString) {
  const result = new Map();
  if (!queryString || queryString[0] !== "?") {
    return result;
  }
  // remove the leading ?
  queryString = queryString.slice(1);
  const pairs = queryString.split("&");
  for (const pair of pairs) {
    const [name, value] = pair.split("=", 2);
    const existingValue = result.get(name);
    if (existingValue) {
      if (Array.isArray(existingValue)) {
        existingValue.push(value);
      } else {
        result.set(name, [existingValue, value]);
      }
    } else {
      result.set(name, value);
    }
  }
  return result;
}
/** @internal */
function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {
  if (queryParams.size === 0) {
    return url;
  }
  const parsedUrl = new URL(url);
  // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which
  // can change their meaning to the server, such as in the case of a SAS signature.
  // To avoid accidentally un-encoding a query param, we parse the key/values ourselves
  const combinedParams = simpleParseQueryParams(parsedUrl.search);
  for (const [name, value] of queryParams) {
    const existingValue = combinedParams.get(name);
    if (Array.isArray(existingValue)) {
      if (Array.isArray(value)) {
        existingValue.push(...value);
        const valueSet = new Set(existingValue);
        combinedParams.set(name, Array.from(valueSet));
      } else {
        existingValue.push(value);
      }
    } else if (existingValue) {
      if (Array.isArray(value)) {
        value.unshift(existingValue);
      } else if (sequenceParams.has(name)) {
        combinedParams.set(name, [existingValue, value]);
      }
      if (!noOverwrite) {
        combinedParams.set(name, value);
      }
    } else {
      combinedParams.set(name, value);
    }
  }
  const searchPieces = [];
  for (const [name, value] of combinedParams) {
    if (typeof value === "string") {
      searchPieces.push(`${name}=${value}`);
    } else if (Array.isArray(value)) {
      // QUIRK: If we get an array of values, include multiple key/value pairs
      for (const subValue of value) {
        searchPieces.push(`${name}=${subValue}`);
      }
    } else {
      searchPieces.push(`${name}=${value}`);
    }
  }
  // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.
  parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
  return parsedUrl.toString();
}
},{"./operationHelpers.js":"node_modules/@azure/core-client/dist/browser/operationHelpers.js","./interfaceHelpers.js":"node_modules/@azure/core-client/dist/browser/interfaceHelpers.js"}],"node_modules/@azure/core-client/dist/browser/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
var _logger = require("@azure/logger");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const logger = exports.logger = (0, _logger.createClientLogger)("core-client");
},{"@azure/logger":"node_modules/@azure/logger/dist/browser/index.js"}],"node_modules/@azure/core-client/dist/browser/serviceClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServiceClient = void 0;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _pipeline = require("./pipeline.js");
var _utils = require("./utils.js");
var _httpClientCache = require("./httpClientCache.js");
var _operationHelpers = require("./operationHelpers.js");
var _urlHelpers = require("./urlHelpers.js");
var _interfaceHelpers = require("./interfaceHelpers.js");
var _log = require("./log.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Initializes a new instance of the ServiceClient.
 */
class ServiceClient {
  /**
   * The ServiceClient constructor
   * @param credential - The credentials used for authentication with the service.
   * @param options - The service client options that govern the behavior of the client.
   */
  constructor(options = {}) {
    var _a, _b;
    this._requestContentType = options.requestContentType;
    this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;
    if (options.baseUri) {
      _log.logger.warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead.");
    }
    this._allowInsecureConnection = options.allowInsecureConnection;
    this._httpClient = options.httpClient || (0, _httpClientCache.getCachedDefaultHttpClient)();
    this.pipeline = options.pipeline || createDefaultPipeline(options);
    if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {
      for (const {
        policy,
        position
      } of options.additionalPolicies) {
        // Sign happens after Retry and is commonly needed to occur
        // before policies that intercept post-retry.
        const afterPhase = position === "perRetry" ? "Sign" : undefined;
        this.pipeline.addPolicy(policy, {
          afterPhase
        });
      }
    }
  }
  /**
   * Send the provided httpRequest.
   */
  async sendRequest(request) {
    return this.pipeline.sendRequest(this._httpClient, request);
  }
  /**
   * Send an HTTP request that is populated using the provided OperationSpec.
   * @typeParam T - The typed result of the request, based on the OperationSpec.
   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
   * @param operationSpec - The OperationSpec to use to populate the httpRequest.
   */
  async sendOperationRequest(operationArguments, operationSpec) {
    const endpoint = operationSpec.baseUrl || this._endpoint;
    if (!endpoint) {
      throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
    }
    // Templatized URLs sometimes reference properties on the ServiceClient child class,
    // so we have to pass `this` below in order to search these properties if they're
    // not part of OperationArguments
    const url = (0, _urlHelpers.getRequestUrl)(endpoint, operationSpec, operationArguments, this);
    const request = (0, _coreRestPipeline.createPipelineRequest)({
      url
    });
    request.method = operationSpec.httpMethod;
    const operationInfo = (0, _operationHelpers.getOperationRequestInfo)(request);
    operationInfo.operationSpec = operationSpec;
    operationInfo.operationArguments = operationArguments;
    const contentType = operationSpec.contentType || this._requestContentType;
    if (contentType && operationSpec.requestBody) {
      request.headers.set("Content-Type", contentType);
    }
    const options = operationArguments.options;
    if (options) {
      const requestOptions = options.requestOptions;
      if (requestOptions) {
        if (requestOptions.timeout) {
          request.timeout = requestOptions.timeout;
        }
        if (requestOptions.onUploadProgress) {
          request.onUploadProgress = requestOptions.onUploadProgress;
        }
        if (requestOptions.onDownloadProgress) {
          request.onDownloadProgress = requestOptions.onDownloadProgress;
        }
        if (requestOptions.shouldDeserialize !== undefined) {
          operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;
        }
        if (requestOptions.allowInsecureConnection) {
          request.allowInsecureConnection = true;
        }
      }
      if (options.abortSignal) {
        request.abortSignal = options.abortSignal;
      }
      if (options.tracingOptions) {
        request.tracingOptions = options.tracingOptions;
      }
    }
    if (this._allowInsecureConnection) {
      request.allowInsecureConnection = true;
    }
    if (request.streamResponseStatusCodes === undefined) {
      request.streamResponseStatusCodes = (0, _interfaceHelpers.getStreamingResponseStatusCodes)(operationSpec);
    }
    try {
      const rawResponse = await this.sendRequest(request);
      const flatResponse = (0, _utils.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);
      if (options === null || options === void 0 ? void 0 : options.onResponse) {
        options.onResponse(rawResponse, flatResponse);
      }
      return flatResponse;
    } catch (error) {
      if (typeof error === "object" && (error === null || error === void 0 ? void 0 : error.response)) {
        const rawResponse = error.response;
        const flatResponse = (0, _utils.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses["default"]);
        error.details = flatResponse;
        if (options === null || options === void 0 ? void 0 : options.onResponse) {
          options.onResponse(rawResponse, flatResponse, error);
        }
      }
      throw error;
    }
  }
}
exports.ServiceClient = ServiceClient;
function createDefaultPipeline(options) {
  const credentialScopes = getCredentialScopes(options);
  const credentialOptions = options.credential && credentialScopes ? {
    credentialScopes,
    credential: options.credential
  } : undefined;
  return (0, _pipeline.createClientPipeline)(Object.assign(Object.assign({}, options), {
    credentialOptions
  }));
}
function getCredentialScopes(options) {
  if (options.credentialScopes) {
    return options.credentialScopes;
  }
  if (options.endpoint) {
    return `${options.endpoint}/.default`;
  }
  if (options.baseUri) {
    return `${options.baseUri}/.default`;
  }
  if (options.credential && !options.credentialScopes) {
    throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);
  }
  return undefined;
}
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./pipeline.js":"node_modules/@azure/core-client/dist/browser/pipeline.js","./utils.js":"node_modules/@azure/core-client/dist/browser/utils.js","./httpClientCache.js":"node_modules/@azure/core-client/dist/browser/httpClientCache.js","./operationHelpers.js":"node_modules/@azure/core-client/dist/browser/operationHelpers.js","./urlHelpers.js":"node_modules/@azure/core-client/dist/browser/urlHelpers.js","./interfaceHelpers.js":"node_modules/@azure/core-client/dist/browser/interfaceHelpers.js","./log.js":"node_modules/@azure/core-client/dist/browser/log.js"}],"node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authorizeRequestOnClaimChallenge = authorizeRequestOnClaimChallenge;
exports.parseCAEChallenge = parseCAEChallenge;
var _log = require("./log.js");
var _base = require("./base64.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Converts: `Bearer a="b", c="d", Bearer d="e", f="g"`.
 * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.
 *
 * @internal
 */
function parseCAEChallenge(challenges) {
  const bearerChallenges = `, ${challenges.trim()}`.split(", Bearer ").filter(x => x);
  return bearerChallenges.map(challenge => {
    const challengeParts = `${challenge.trim()}, `.split('", ').filter(x => x);
    const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({
      [key]: value
    }))(keyValue.trim().split('="')));
    // Key-value pairs to plain object:
    return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
  });
}
/**
 * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:
 * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).
 *
 * Call the `bearerTokenAuthenticationPolicy` with the following options:
 *
 * ```ts
 * import { bearerTokenAuthenticationPolicy } from "@azure/core-rest-pipeline";
 * import { authorizeRequestOnClaimChallenge } from "@azure/core-client";
 *
 * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({
 *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge
 * });
 * ```
 *
 * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.
 * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.
 *
 * Example challenge with claims:
 *
 * ```
 * Bearer authorization_uri="https://login.windows-ppe.net/", error="invalid_token",
 * error_description="User session has been revoked",
 * claims="eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0="
 * ```
 */
async function authorizeRequestOnClaimChallenge(onChallengeOptions) {
  const {
    scopes,
    response
  } = onChallengeOptions;
  const logger = onChallengeOptions.logger || _log.logger;
  const challenge = response.headers.get("WWW-Authenticate");
  if (!challenge) {
    logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);
    return false;
  }
  const challenges = parseCAEChallenge(challenge) || [];
  const parsedChallenge = challenges.find(x => x.claims);
  if (!parsedChallenge) {
    logger.info(`The WWW-Authenticate header was missing the necessary "claims" to perform the Continuous Access Evaluation authentication flow.`);
    return false;
  }
  const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {
    claims: (0, _base.decodeStringToString)(parsedChallenge.claims)
  });
  if (!accessToken) {
    return false;
  }
  onChallengeOptions.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
  return true;
}
},{"./log.js":"node_modules/@azure/core-client/dist/browser/log.js","./base64.js":"node_modules/@azure/core-client/dist/browser/base64.js"}],"node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authorizeRequestOnTenantChallenge = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A set of constants used internally when processing requests.
 */
const Constants = {
  DefaultScope: "/.default",
  /**
   * Defines constants for use with HTTP headers.
   */
  HeaderConstants: {
    /**
     * The Authorization header.
     */
    AUTHORIZATION: "authorization"
  }
};
function isUuid(text) {
  return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(text);
}
/**
 * Defines a callback to handle auth challenge for Storage APIs.
 * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge
 * Handling has specific features for storage that departs to the general AAD challenge docs.
 **/
const authorizeRequestOnTenantChallenge = async challengeOptions => {
  const requestOptions = requestToOptions(challengeOptions.request);
  const challenge = getChallenge(challengeOptions.response);
  if (challenge) {
    const challengeInfo = parseChallenge(challenge);
    const challengeScopes = buildScopes(challengeOptions, challengeInfo);
    const tenantId = extractTenantId(challengeInfo);
    if (!tenantId) {
      return false;
    }
    const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), {
      tenantId
    }));
    if (!accessToken) {
      return false;
    }
    challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);
    return true;
  }
  return false;
};
/**
 * Extracts the tenant id from the challenge information
 * The tenant id is contained in the authorization_uri as the first
 * path part.
 */
exports.authorizeRequestOnTenantChallenge = authorizeRequestOnTenantChallenge;
function extractTenantId(challengeInfo) {
  const parsedAuthUri = new URL(challengeInfo.authorization_uri);
  const pathSegments = parsedAuthUri.pathname.split("/");
  const tenantId = pathSegments[1];
  if (tenantId && isUuid(tenantId)) {
    return tenantId;
  }
  return undefined;
}
/**
 * Builds the authentication scopes based on the information that comes in the
 * challenge information. Scopes url is present in the resource_id, if it is empty
 * we keep using the original scopes.
 */
function buildScopes(challengeOptions, challengeInfo) {
  if (!challengeInfo.resource_id) {
    return challengeOptions.scopes;
  }
  const challengeScopes = new URL(challengeInfo.resource_id);
  challengeScopes.pathname = Constants.DefaultScope;
  let scope = challengeScopes.toString();
  if (scope === "https://disk.azure.com/.default") {
    // the extra slash is required by the service
    scope = "https://disk.azure.com//.default";
  }
  return [scope];
}
/**
 * We will retrieve the challenge only if the response status code was 401,
 * and if the response contained the header "WWW-Authenticate" with a non-empty value.
 */
function getChallenge(response) {
  const challenge = response.headers.get("WWW-Authenticate");
  if (response.status === 401 && challenge) {
    return challenge;
  }
  return;
}
/**
 * Converts: `Bearer a="b" c="d"`.
 * Into: `[ { a: 'b', c: 'd' }]`.
 *
 * @internal
 */
function parseChallenge(challenge) {
  const bearerChallenge = challenge.slice("Bearer ".length);
  const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter(x => x);
  const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({
    [key]: value
  }))(keyValue.trim().split("=")));
  // Key-value pairs to plain object:
  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
}
/**
 * Extracts the options form a Pipeline Request for later re-use
 */
function requestToOptions(request) {
  return {
    abortSignal: request.abortSignal,
    requestOptions: {
      timeout: request.timeout
    },
    tracingOptions: request.tracingOptions
  };
}
},{}],"node_modules/@azure/core-client/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MapperTypeNames", {
  enumerable: true,
  get: function () {
    return _serializer.MapperTypeNames;
  }
});
Object.defineProperty(exports, "ServiceClient", {
  enumerable: true,
  get: function () {
    return _serviceClient.ServiceClient;
  }
});
Object.defineProperty(exports, "XML_ATTRKEY", {
  enumerable: true,
  get: function () {
    return _interfaces.XML_ATTRKEY;
  }
});
Object.defineProperty(exports, "XML_CHARKEY", {
  enumerable: true,
  get: function () {
    return _interfaces.XML_CHARKEY;
  }
});
Object.defineProperty(exports, "authorizeRequestOnClaimChallenge", {
  enumerable: true,
  get: function () {
    return _authorizeRequestOnClaimChallenge.authorizeRequestOnClaimChallenge;
  }
});
Object.defineProperty(exports, "authorizeRequestOnTenantChallenge", {
  enumerable: true,
  get: function () {
    return _authorizeRequestOnTenantChallenge.authorizeRequestOnTenantChallenge;
  }
});
Object.defineProperty(exports, "createClientPipeline", {
  enumerable: true,
  get: function () {
    return _pipeline.createClientPipeline;
  }
});
Object.defineProperty(exports, "createSerializer", {
  enumerable: true,
  get: function () {
    return _serializer.createSerializer;
  }
});
Object.defineProperty(exports, "deserializationPolicy", {
  enumerable: true,
  get: function () {
    return _deserializationPolicy.deserializationPolicy;
  }
});
Object.defineProperty(exports, "deserializationPolicyName", {
  enumerable: true,
  get: function () {
    return _deserializationPolicy.deserializationPolicyName;
  }
});
Object.defineProperty(exports, "serializationPolicy", {
  enumerable: true,
  get: function () {
    return _serializationPolicy.serializationPolicy;
  }
});
Object.defineProperty(exports, "serializationPolicyName", {
  enumerable: true,
  get: function () {
    return _serializationPolicy.serializationPolicyName;
  }
});
var _serializer = require("./serializer.js");
var _serviceClient = require("./serviceClient.js");
var _pipeline = require("./pipeline.js");
var _interfaces = require("./interfaces.js");
var _deserializationPolicy = require("./deserializationPolicy.js");
var _serializationPolicy = require("./serializationPolicy.js");
var _authorizeRequestOnClaimChallenge = require("./authorizeRequestOnClaimChallenge.js");
var _authorizeRequestOnTenantChallenge = require("./authorizeRequestOnTenantChallenge.js");
},{"./serializer.js":"node_modules/@azure/core-client/dist/browser/serializer.js","./serviceClient.js":"node_modules/@azure/core-client/dist/browser/serviceClient.js","./pipeline.js":"node_modules/@azure/core-client/dist/browser/pipeline.js","./interfaces.js":"node_modules/@azure/core-client/dist/browser/interfaces.js","./deserializationPolicy.js":"node_modules/@azure/core-client/dist/browser/deserializationPolicy.js","./serializationPolicy.js":"node_modules/@azure/core-client/dist/browser/serializationPolicy.js","./authorizeRequestOnClaimChallenge.js":"node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js","./authorizeRequestOnTenantChallenge.js":"node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js"}],"node_modules/@azure/core-http-compat/dist/browser/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpHeaders = void 0;
exports.toHttpHeadersLike = toHttpHeadersLike;
exports.toPipelineRequest = toPipelineRequest;
exports.toWebResourceLike = toWebResourceLike;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// We use a custom symbol to cache a reference to the original request without
// exposing it on the public interface.
const originalRequestSymbol = Symbol("Original PipelineRequest");
// Symbol.for() will return the same symbol if it's already been created
// This particular one is used in core-client to handle the case of when a request is
// cloned but we need to retrieve the OperationSpec and OperationArguments from the
// original request.
const originalClientRequestSymbol = Symbol.for("@azure/core-client original request");
function toPipelineRequest(webResource, options = {}) {
  const compatWebResource = webResource;
  const request = compatWebResource[originalRequestSymbol];
  const headers = (0, _coreRestPipeline.createHttpHeaders)(webResource.headers.toJson({
    preserveCase: true
  }));
  if (request) {
    request.headers = headers;
    return request;
  } else {
    const newRequest = (0, _coreRestPipeline.createPipelineRequest)({
      url: webResource.url,
      method: webResource.method,
      headers,
      withCredentials: webResource.withCredentials,
      timeout: webResource.timeout,
      requestId: webResource.requestId,
      abortSignal: webResource.abortSignal,
      body: webResource.body,
      formData: webResource.formData,
      disableKeepAlive: !!webResource.keepAlive,
      onDownloadProgress: webResource.onDownloadProgress,
      onUploadProgress: webResource.onUploadProgress,
      proxySettings: webResource.proxySettings,
      streamResponseStatusCodes: webResource.streamResponseStatusCodes
    });
    if (options.originalRequest) {
      newRequest[originalClientRequestSymbol] = options.originalRequest;
    }
    return newRequest;
  }
}
function toWebResourceLike(request, options) {
  var _a;
  const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;
  const webResource = {
    url: request.url,
    method: request.method,
    headers: toHttpHeadersLike(request.headers),
    withCredentials: request.withCredentials,
    timeout: request.timeout,
    requestId: request.headers.get("x-ms-client-request-id") || request.requestId,
    abortSignal: request.abortSignal,
    body: request.body,
    formData: request.formData,
    keepAlive: !!request.disableKeepAlive,
    onDownloadProgress: request.onDownloadProgress,
    onUploadProgress: request.onUploadProgress,
    proxySettings: request.proxySettings,
    streamResponseStatusCodes: request.streamResponseStatusCodes,
    clone() {
      throw new Error("Cannot clone a non-proxied WebResourceLike");
    },
    prepare() {
      throw new Error("WebResourceLike.prepare() is not supported by @azure/core-http-compat");
    },
    validateRequestProperties() {
      /** do nothing */
    }
  };
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(webResource, {
      get(target, prop, receiver) {
        if (prop === originalRequestSymbol) {
          return request;
        } else if (prop === "clone") {
          return () => {
            return toWebResourceLike(toPipelineRequest(webResource, {
              originalRequest
            }), {
              createProxy: true,
              originalRequest
            });
          };
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "keepAlive") {
          request.disableKeepAlive = !value;
        }
        const passThroughProps = ["url", "method", "withCredentials", "timeout", "requestId", "abortSignal", "body", "formData", "onDownloadProgress", "onUploadProgress", "proxySettings", "streamResponseStatusCodes"];
        if (typeof prop === "string" && passThroughProps.includes(prop)) {
          request[prop] = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return webResource;
  }
}
/**
 * Converts HttpHeaders from core-rest-pipeline to look like
 * HttpHeaders from core-http.
 * @param headers - HttpHeaders from core-rest-pipeline
 * @returns HttpHeaders as they looked in core-http
 */
function toHttpHeadersLike(headers) {
  return new HttpHeaders(headers.toJSON({
    preserveCase: true
  }));
}
/**
 * A collection of HttpHeaders that can be sent with a HTTP request.
 */
function getHeaderKey(headerName) {
  return headerName.toLowerCase();
}
/**
 * A collection of HTTP header key/value pairs.
 */
class HttpHeaders {
  constructor(rawHeaders) {
    this._headersMap = {};
    if (rawHeaders) {
      for (const headerName in rawHeaders) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param headerName - The name of the header to set. This value is case-insensitive.
   * @param headerValue - The value of the header to set.
   */
  set(headerName, headerValue) {
    this._headersMap[getHeaderKey(headerName)] = {
      name: headerName,
      value: headerValue.toString()
    };
  }
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param headerName - The name of the header.
   */
  get(headerName) {
    const header = this._headersMap[getHeaderKey(headerName)];
    return !header ? undefined : header.value;
  }
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   */
  contains(headerName) {
    return !!this._headersMap[getHeaderKey(headerName)];
  }
  /**
   * Remove the header with the provided headerName. Return whether or not the header existed and
   * was removed.
   * @param headerName - The name of the header to remove.
   */
  remove(headerName) {
    const result = this.contains(headerName);
    delete this._headersMap[getHeaderKey(headerName)];
    return result;
  }
  /**
   * Get the headers that are contained this collection as an object.
   */
  rawHeaders() {
    return this.toJson({
      preserveCase: true
    });
  }
  /**
   * Get the headers that are contained in this collection as an array.
   */
  headersArray() {
    const headers = [];
    for (const headerKey in this._headersMap) {
      headers.push(this._headersMap[headerKey]);
    }
    return headers;
  }
  /**
   * Get the header names that are contained in this collection.
   */
  headerNames() {
    const headerNames = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerNames.push(headers[i].name);
    }
    return headerNames;
  }
  /**
   * Get the header values that are contained in this collection.
   */
  headerValues() {
    const headerValues = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerValues.push(headers[i].value);
    }
    return headerValues;
  }
  /**
   * Get the JSON object representation of this HTTP header collection.
   */
  toJson(options = {}) {
    const result = {};
    if (options.preserveCase) {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[header.name] = header.value;
      }
    } else {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[getHeaderKey(header.name)] = header.value;
      }
    }
    return result;
  }
  /**
   * Get the string representation of this HTTP header collection.
   */
  toString() {
    return JSON.stringify(this.toJson({
      preserveCase: true
    }));
  }
  /**
   * Create a deep clone/copy of this HttpHeaders collection.
   */
  clone() {
    const resultPreservingCasing = {};
    for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      resultPreservingCasing[header.name] = header.value;
    }
    return new HttpHeaders(resultPreservingCasing);
  }
}
exports.HttpHeaders = HttpHeaders;
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js"}],"node_modules/@azure/core-http-compat/dist/browser/response.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toCompatResponse = toCompatResponse;
exports.toPipelineResponse = toPipelineResponse;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _util = require("./util.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const originalResponse = Symbol("Original FullOperationResponse");
/**
 * A helper to convert response objects from the new pipeline back to the old one.
 * @param response - A response object from core-client.
 * @returns A response compatible with `HttpOperationResponse` from core-http.
 */
function toCompatResponse(response, options) {
  let request = (0, _util.toWebResourceLike)(response.request);
  let headers = (0, _util.toHttpHeadersLike)(response.headers);
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(response, {
      get(target, prop, receiver) {
        if (prop === "headers") {
          return headers;
        } else if (prop === "request") {
          return request;
        } else if (prop === originalResponse) {
          return response;
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "headers") {
          headers = value;
        } else if (prop === "request") {
          request = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return Object.assign(Object.assign({}, response), {
      request,
      headers
    });
  }
}
/**
 * A helper to convert back to a PipelineResponse
 * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.
 */
function toPipelineResponse(compatResponse) {
  const extendedCompatResponse = compatResponse;
  const response = extendedCompatResponse[originalResponse];
  const headers = (0, _coreRestPipeline.createHttpHeaders)(compatResponse.headers.toJson({
    preserveCase: true
  }));
  if (response) {
    response.headers = headers;
    return response;
  } else {
    return Object.assign(Object.assign({}, compatResponse), {
      headers,
      request: (0, _util.toPipelineRequest)(compatResponse.request)
    });
  }
}
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./util.js":"node_modules/@azure/core-http-compat/dist/browser/util.js"}],"node_modules/@azure/core-http-compat/dist/browser/extendedClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtendedServiceClient = void 0;
var _disableKeepAlivePolicy = require("./policies/disableKeepAlivePolicy.js");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreClient = require("@azure/core-client");
var _response = require("./response.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Client to provide compatability between core V1 & V2.
 */
class ExtendedServiceClient extends _coreClient.ServiceClient {
  constructor(options) {
    var _a, _b;
    super(options);
    if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false && !(0, _disableKeepAlivePolicy.pipelineContainsDisableKeepAlivePolicy)(this.pipeline)) {
      this.pipeline.addPolicy((0, _disableKeepAlivePolicy.createDisableKeepAlivePolicy)());
    }
    if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {
      this.pipeline.removePolicy({
        name: _coreRestPipeline.redirectPolicyName
      });
    }
  }
  /**
   * Compatible send operation request function.
   *
   * @param operationArguments - Operation arguments
   * @param operationSpec - Operation Spec
   * @returns
   */
  async sendOperationRequest(operationArguments, operationSpec) {
    var _a;
    const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;
    let lastResponse;
    function onResponse(rawResponse, flatResponse, error) {
      lastResponse = rawResponse;
      if (userProvidedCallBack) {
        userProvidedCallBack(rawResponse, flatResponse, error);
      }
    }
    operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), {
      onResponse
    });
    const result = await super.sendOperationRequest(operationArguments, operationSpec);
    if (lastResponse) {
      Object.defineProperty(result, "_response", {
        value: (0, _response.toCompatResponse)(lastResponse)
      });
    }
    return result;
  }
}
exports.ExtendedServiceClient = ExtendedServiceClient;
},{"./policies/disableKeepAlivePolicy.js":"node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","./response.js":"node_modules/@azure/core-http-compat/dist/browser/response.js"}],"node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpPipelineLogLevel = void 0;
exports.createRequestPolicyFactoryPolicy = createRequestPolicyFactoryPolicy;
exports.requestPolicyFactoryPolicyName = void 0;
var _util = require("../util.js");
var _response = require("../response.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * An enum for compatibility with RequestPolicy
 */
var HttpPipelineLogLevel;
(function (HttpPipelineLogLevel) {
  HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
  HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
  HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
  HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
})(HttpPipelineLogLevel || (exports.HttpPipelineLogLevel = HttpPipelineLogLevel = {}));
const mockRequestPolicyOptions = {
  log(_logLevel, _message) {
    /* do nothing */
  },
  shouldLog(_logLevel) {
    return false;
  }
};
/**
 * The name of the RequestPolicyFactoryPolicy
 */
const requestPolicyFactoryPolicyName = exports.requestPolicyFactoryPolicyName = "RequestPolicyFactoryPolicy";
/**
 * A policy that wraps policies written for core-http.
 * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline
 */
function createRequestPolicyFactoryPolicy(factories) {
  const orderedFactories = factories.slice().reverse();
  return {
    name: requestPolicyFactoryPolicyName,
    async sendRequest(request, next) {
      let httpPipeline = {
        async sendRequest(httpRequest) {
          const response = await next((0, _util.toPipelineRequest)(httpRequest));
          return (0, _response.toCompatResponse)(response, {
            createProxy: true
          });
        }
      };
      for (const factory of orderedFactories) {
        httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);
      }
      const webResourceLike = (0, _util.toWebResourceLike)(request, {
        createProxy: true
      });
      const response = await httpPipeline.sendRequest(webResourceLike);
      return (0, _response.toPipelineResponse)(response);
    }
  };
}
},{"../util.js":"node_modules/@azure/core-http-compat/dist/browser/util.js","../response.js":"node_modules/@azure/core-http-compat/dist/browser/response.js"}],"node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertHttpClient = convertHttpClient;
var _response = require("./response.js");
var _util = require("./util.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.
 * @param requestPolicyClient - A HttpClient compatible with core-http
 * @returns A HttpClient compatible with core-rest-pipeline
 */
function convertHttpClient(requestPolicyClient) {
  return {
    sendRequest: async request => {
      const response = await requestPolicyClient.sendRequest((0, _util.toWebResourceLike)(request, {
        createProxy: true
      }));
      return (0, _response.toPipelineResponse)(response);
    }
  };
}
},{"./response.js":"node_modules/@azure/core-http-compat/dist/browser/response.js","./util.js":"node_modules/@azure/core-http-compat/dist/browser/util.js"}],"node_modules/@azure/core-http-compat/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ExtendedServiceClient", {
  enumerable: true,
  get: function () {
    return _extendedClient.ExtendedServiceClient;
  }
});
Object.defineProperty(exports, "HttpPipelineLogLevel", {
  enumerable: true,
  get: function () {
    return _requestPolicyFactoryPolicy.HttpPipelineLogLevel;
  }
});
Object.defineProperty(exports, "convertHttpClient", {
  enumerable: true,
  get: function () {
    return _httpClientAdapter.convertHttpClient;
  }
});
Object.defineProperty(exports, "createRequestPolicyFactoryPolicy", {
  enumerable: true,
  get: function () {
    return _requestPolicyFactoryPolicy.createRequestPolicyFactoryPolicy;
  }
});
Object.defineProperty(exports, "disableKeepAlivePolicyName", {
  enumerable: true,
  get: function () {
    return _disableKeepAlivePolicy.disableKeepAlivePolicyName;
  }
});
Object.defineProperty(exports, "requestPolicyFactoryPolicyName", {
  enumerable: true,
  get: function () {
    return _requestPolicyFactoryPolicy.requestPolicyFactoryPolicyName;
  }
});
Object.defineProperty(exports, "toHttpHeadersLike", {
  enumerable: true,
  get: function () {
    return _util.toHttpHeadersLike;
  }
});
var _extendedClient = require("./extendedClient.js");
var _requestPolicyFactoryPolicy = require("./policies/requestPolicyFactoryPolicy.js");
var _disableKeepAlivePolicy = require("./policies/disableKeepAlivePolicy.js");
var _httpClientAdapter = require("./httpClientAdapter.js");
var _util = require("./util.js");
},{"./extendedClient.js":"node_modules/@azure/core-http-compat/dist/browser/extendedClient.js","./policies/requestPolicyFactoryPolicy.js":"node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js","./policies/disableKeepAlivePolicy.js":"node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js","./httpClientAdapter.js":"node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js","./util.js":"node_modules/@azure/core-http-compat/dist/browser/util.js"}],"node_modules/@azure/core-xml/dist/browser/xml.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XML_CHARKEY = exports.XML_ATTRKEY = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Default key used to access the XML attributes.
 */
const XML_ATTRKEY = exports.XML_ATTRKEY = "$";
/**
 * Default key used to access the XML value content.
 */
const XML_CHARKEY = exports.XML_CHARKEY = "_";
},{}],"node_modules/@azure/core-xml/dist/browser/xml.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseXML = parseXML;
exports.stringifyXML = stringifyXML;
var _xmlCommon = require("./xml.common.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/// <reference lib="dom"/>

if (!document || !DOMParser || !Node || !XMLSerializer) {
  throw new Error(`This library depends on the following DOM objects: ["document", "DOMParser", "Node", "XMLSerializer"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);
}
// Policy to make our code Trusted Types compliant at running time.
//   https://github.com/w3c/webappsec-trusted-types
// We are calling DOMParser.parseFromString() to parse XML payload from Azure services.
// The parsed DOM object is not exposed to outside. Scripts are disabled when parsing
// according to the spec.  There are no HTML/XSS security concerns on the usage of
// parseFromString() here.
let ttPolicy;
try {
  if (typeof self.trustedTypes !== "undefined") {
    ttPolicy = self.trustedTypes.createPolicy("@azure/core-xml#xml.browser", {
      createHTML: s => s
    });
  }
} catch (e) {
  console.warn('Could not create trusted types policy "@azure/core-xml#xml.browser"');
}
const doc = document.implementation.createDocument(null, null, null);
const parser = new DOMParser();
function parseXML(str, opts = {}) {
  var _a, _b, _c, _d, _e, _f;
  try {
    const updatedOptions = {
      rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "",
      includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
      xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _xmlCommon.XML_CHARKEY,
      cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : "__cdata",
      stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : []
    };
    const dom = parser.parseFromString((_f = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _f !== void 0 ? _f : str, "application/xml");
    throwIfError(dom);
    let obj;
    if (updatedOptions.includeRoot) {
      obj = domToObject(dom, updatedOptions);
    } else {
      obj = domToObject(dom.childNodes[0], updatedOptions);
    }
    return Promise.resolve(obj);
  } catch (err) {
    return Promise.reject(err);
  }
}
let errorNS;
function getErrorNamespace() {
  var _a, _b;
  if (errorNS === undefined) {
    try {
      const invalidXML = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML("INVALID")) !== null && _a !== void 0 ? _a : "INVALID";
      errorNS = (_b = parser.parseFromString(invalidXML, "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _b !== void 0 ? _b : "";
    } catch (ignored) {
      // Most browsers will return a document containing <parsererror>, but IE will throw.
      errorNS = "";
    }
  }
  return errorNS;
}
function throwIfError(dom) {
  const parserErrors = dom.getElementsByTagName("parsererror");
  if (parserErrors.length > 0 && getErrorNamespace()) {
    for (let i = 0; i < parserErrors.length; i++) {
      if (parserErrors[i].namespaceURI === errorNS) {
        throw new Error(parserErrors[i].innerHTML);
      }
    }
  }
}
function isElement(node) {
  return !!node.attributes;
}
/**
 * Get the Element-typed version of the provided Node if the provided node is an element with
 * attributes. If it isn't, then undefined is returned.
 */
function asElementWithAttributes(node) {
  return isElement(node) && node.hasAttributes() ? node : undefined;
}
function domToObject(node, options) {
  var _a;
  let result = {};
  const childNodeCount = node.childNodes.length;
  const firstChildNode = node.childNodes[0];
  const onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || undefined;
  const elementWithAttributes = asElementWithAttributes(node);
  if (elementWithAttributes) {
    result[_xmlCommon.XML_ATTRKEY] = {};
    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {
      const attr = elementWithAttributes.attributes[i];
      result[_xmlCommon.XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
    }
    if (onlyChildTextValue) {
      result[options.xmlCharKey] = onlyChildTextValue;
    }
  } else if (childNodeCount === 0) {
    result = "";
  } else if (onlyChildTextValue) {
    result = onlyChildTextValue;
  }
  if (!onlyChildTextValue) {
    for (let i = 0; i < childNodeCount; i++) {
      const child = node.childNodes[i];
      // Check if CData
      if ((child === null || child === void 0 ? void 0 : child.nodeType) === Node.CDATA_SECTION_NODE) {
        // Already in the CDATA
        result = child.textContent;
      } else if (((_a = child === null || child === void 0 ? void 0 : child.firstChild) === null || _a === void 0 ? void 0 : _a.nodeType) === Node.CDATA_SECTION_NODE) {
        // Look if child is CDATA
        result[child.nodeName] = child.textContent;
      } else if (child.nodeType !== Node.TEXT_NODE) {
        // Ignore leading/trailing whitespace nodes
        const childObject = domToObject(child, options);
        if (!result[child.nodeName]) {
          result[child.nodeName] = childObject;
        } else if (Array.isArray(result[child.nodeName])) {
          result[child.nodeName].push(childObject);
        } else {
          result[child.nodeName] = [result[child.nodeName], childObject];
        }
      }
    }
  }
  return result;
}
const serializer = new XMLSerializer();
function stringifyXML(content, opts = {}) {
  var _a, _b, _c, _d, _e;
  const updatedOptions = {
    rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "root",
    includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
    xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _xmlCommon.XML_CHARKEY,
    cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : "__cdata",
    stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : []
  };
  const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
  return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom);
}
function buildAttributes(attrs) {
  const result = [];
  for (const key of Object.keys(attrs)) {
    const attr = doc.createAttribute(key);
    attr.value = attrs[key].toString();
    result.push(attr);
  }
  return result;
}
function buildNode(obj, elementName, options) {
  if (obj === undefined || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
    const elem = doc.createElement(elementName);
    elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
    return [elem];
  } else if (Array.isArray(obj)) {
    const result = [];
    for (const arrayElem of obj) {
      for (const child of buildNode(arrayElem, elementName, options)) {
        result.push(child);
      }
    }
    return result;
  } else if (typeof obj === "object") {
    const elem = doc.createElement(elementName);
    for (const key of Object.keys(obj)) {
      if (key === _xmlCommon.XML_ATTRKEY) {
        for (const attr of buildAttributes(obj[key])) {
          elem.attributes.setNamedItem(attr);
        }
      } else if (key === options.xmlCharKey) {
        elem.textContent = obj[key].toString();
      } else if (key === options.cdataPropName) {
        const cdataElement = doc.createCDATASection(obj[key].toString());
        elem.appendChild(cdataElement);
      } else {
        for (const child of buildNode(obj[key], key, options)) {
          elem.appendChild(child);
        }
      }
    }
    return [elem];
  } else {
    throw new Error(`Illegal value passed to buildObject: ${obj}`);
  }
}
},{"./xml.common.js":"node_modules/@azure/core-xml/dist/browser/xml.common.js"}],"node_modules/@azure/core-xml/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "XML_ATTRKEY", {
  enumerable: true,
  get: function () {
    return _xmlCommon.XML_ATTRKEY;
  }
});
Object.defineProperty(exports, "XML_CHARKEY", {
  enumerable: true,
  get: function () {
    return _xmlCommon.XML_CHARKEY;
  }
});
Object.defineProperty(exports, "parseXML", {
  enumerable: true,
  get: function () {
    return _xml.parseXML;
  }
});
Object.defineProperty(exports, "stringifyXML", {
  enumerable: true,
  get: function () {
    return _xml.stringifyXML;
  }
});
var _xml = require("./xml.js");
var _xmlCommon = require("./xml.common.js");
},{"./xml.js":"node_modules/@azure/core-xml/dist/browser/xml.js","./xml.common.js":"node_modules/@azure/core-xml/dist/browser/xml.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
var _logger = require("@azure/logger");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The `@azure/logger` configuration for this package.
 */
var logger = exports.logger = (0, _logger.createClientLogger)("storage-blob");
},{"@azure/logger":"node_modules/@azure/logger/dist/browser/index.js"}],"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortSignal = void 0;
exports.abortSignal = abortSignal;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/// <reference path="../shims-public.d.ts" />
var listenersMap = new WeakMap();
var abortedMap = new WeakMap();
/**
 * An aborter instance implements AbortSignal interface, can abort HTTP requests.
 *
 * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
 * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
 * cannot or will not ever be cancelled.
 *
 * @example
 * Abort without timeout
 * ```ts
 * await doAsyncWork(AbortSignal.none);
 * ```
 */
var AbortSignal = exports.AbortSignal = /*#__PURE__*/function () {
  function AbortSignal() {
    _classCallCheck(this, AbortSignal);
    /**
     * onabort event listener.
     */
    this.onabort = null;
    listenersMap.set(this, []);
    abortedMap.set(this, false);
  }
  /**
   * Status of whether aborted or not.
   *
   * @readonly
   */
  return _createClass(AbortSignal, [{
    key: "aborted",
    get: function get() {
      if (!abortedMap.has(this)) {
        throw new TypeError("Expected `this` to be an instance of AbortSignal.");
      }
      return abortedMap.get(this);
    }
    /**
     * Creates a new AbortSignal instance that will never be aborted.
     *
     * @readonly
     */
  }, {
    key: "addEventListener",
    value:
    /**
     * Added new "abort" event listener, only support "abort" event.
     *
     * @param _type - Only support "abort" event
     * @param listener - The listener to be added
     */
    function addEventListener(
    // tslint:disable-next-line:variable-name
    _type, listener) {
      if (!listenersMap.has(this)) {
        throw new TypeError("Expected `this` to be an instance of AbortSignal.");
      }
      var listeners = listenersMap.get(this);
      listeners.push(listener);
    }
    /**
     * Remove "abort" event listener, only support "abort" event.
     *
     * @param _type - Only support "abort" event
     * @param listener - The listener to be removed
     */
  }, {
    key: "removeEventListener",
    value: function removeEventListener(
    // tslint:disable-next-line:variable-name
    _type, listener) {
      if (!listenersMap.has(this)) {
        throw new TypeError("Expected `this` to be an instance of AbortSignal.");
      }
      var listeners = listenersMap.get(this);
      var index = listeners.indexOf(listener);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
    /**
     * Dispatches a synthetic event to the AbortSignal.
     */
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(_event) {
      throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
    }
  }], [{
    key: "none",
    get: function get() {
      return new AbortSignal();
    }
  }]);
}();
/**
 * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
 * Will try to trigger abort event for all linked AbortSignal nodes.
 *
 * - If there is a timeout, the timer will be cancelled.
 * - If aborted is true, nothing will happen.
 *
 * @internal
 */
// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
function abortSignal(signal) {
  if (signal.aborted) {
    return;
  }
  if (signal.onabort) {
    signal.onabort.call(signal);
  }
  var listeners = listenersMap.get(signal);
  if (listeners) {
    // Create a copy of listeners so mutations to the array
    // (e.g. via removeListener calls) don't affect the listeners
    // we invoke.
    listeners.slice().forEach(function (listener) {
      listener.call(signal, {
        type: "abort"
      });
    });
  }
  abortedMap.set(signal, true);
}
},{}],"node_modules/@azure/abort-controller/dist-esm/src/AbortController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortError = exports.AbortController = void 0;
var _AbortSignal = require("./AbortSignal");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */
var AbortError = exports.AbortError = /*#__PURE__*/function (_Error) {
  function AbortError(message) {
    var _this;
    _classCallCheck(this, AbortError);
    _this = _callSuper(this, AbortError, [message]);
    _this.name = "AbortError";
    return _this;
  }
  _inherits(AbortError, _Error);
  return _createClass(AbortError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * An AbortController provides an AbortSignal and the associated controls to signal
 * that an asynchronous operation should be aborted.
 *
 * @example
 * Abort an operation when another event fires
 * ```ts
 * const controller = new AbortController();
 * const signal = controller.signal;
 * doAsyncWork(signal);
 * button.addEventListener('click', () => controller.abort());
 * ```
 *
 * @example
 * Share aborter cross multiple operations in 30s
 * ```ts
 * // Upload the same data to 2 different data centers at the same time,
 * // abort another when any of them is finished
 * const controller = AbortController.withTimeout(30 * 1000);
 * doAsyncWork(controller.signal).then(controller.abort);
 * doAsyncWork(controller.signal).then(controller.abort);
 *```
 *
 * @example
 * Cascaded aborting
 * ```ts
 * // All operations can't take more than 30 seconds
 * const aborter = Aborter.timeout(30 * 1000);
 *
 * // Following 2 operations can't take more than 25 seconds
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * ```
 */
var AbortController = exports.AbortController = /*#__PURE__*/function () {
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  function AbortController(parentSignals) {
    var _this2 = this;
    _classCallCheck(this, AbortController);
    this._signal = new _AbortSignal.AbortSignal();
    if (!parentSignals) {
      return;
    }
    // coerce parentSignals into an array
    if (!Array.isArray(parentSignals)) {
      // eslint-disable-next-line prefer-rest-params
      parentSignals = arguments;
    }
    var _iterator = _createForOfIteratorHelper(parentSignals),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var parentSignal = _step.value;
        // if the parent signal has already had abort() called,
        // then call abort on this signal as well.
        if (parentSignal.aborted) {
          this.abort();
        } else {
          // when the parent signal aborts, this signal should as well.
          parentSignal.addEventListener("abort", function () {
            _this2.abort();
          });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  /**
   * The AbortSignal associated with this controller that will signal aborted
   * when the abort method is called on this controller.
   *
   * @readonly
   */
  return _createClass(AbortController, [{
    key: "signal",
    get: function get() {
      return this._signal;
    }
    /**
     * Signal that any operations passed this controller's associated abort signal
     * to cancel any remaining work and throw an `AbortError`.
     */
  }, {
    key: "abort",
    value: function abort() {
      (0, _AbortSignal.abortSignal)(this._signal);
    }
    /**
     * Creates a new AbortSignal instance that will abort after the provided ms.
     * @param ms - Elapsed time in milliseconds to trigger an abort.
     */
  }], [{
    key: "timeout",
    value: function timeout(ms) {
      var signal = new _AbortSignal.AbortSignal();
      var timer = setTimeout(_AbortSignal.abortSignal, ms, signal);
      // Prevent the active Timer from keeping the Node.js event loop active.
      if (typeof timer.unref === "function") {
        timer.unref();
      }
      return signal;
    }
  }]);
}();
},{"./AbortSignal":"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"}],"node_modules/@azure/abort-controller/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbortController", {
  enumerable: true,
  get: function () {
    return _AbortController.AbortController;
  }
});
Object.defineProperty(exports, "AbortError", {
  enumerable: true,
  get: function () {
    return _AbortController.AbortError;
  }
});
Object.defineProperty(exports, "AbortSignal", {
  enumerable: true,
  get: function () {
    return _AbortSignal.AbortSignal;
  }
});
var _AbortController = require("./AbortController");
var _AbortSignal = require("./AbortSignal");
},{"./AbortController":"node_modules/@azure/abort-controller/dist-esm/src/AbortController.js","./AbortSignal":"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseRequestPolicy = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The base class from which all request policies derive.
 */
var BaseRequestPolicy = exports.BaseRequestPolicy = /*#__PURE__*/function () {
  /**
   * The main method to implement that manipulates a request/response.
   */
  function BaseRequestPolicy(
  /**
   * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.
   */
  _nextPolicy,
  /**
   * The options that can be passed to a given request policy.
   */
  _options) {
    _classCallCheck(this, BaseRequestPolicy);
    this._nextPolicy = _nextPolicy;
    this._options = _options;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */
  return _createClass(BaseRequestPolicy, [{
    key: "shouldLog",
    value: function shouldLog(logLevel) {
      return this._options.shouldLog(logLevel);
    }
    /**
     * Attempt to log the provided message to the provided logger. If no logger was provided or if
     * the log level does not meat the logger's threshold, then nothing will be logged.
     * @param logLevel - The log level of this log.
     * @param message - The message of this log.
     */
  }, {
    key: "log",
    value: function log(logLevel, message) {
      this._options.log(logLevel, message);
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URLConstants = exports.StorageOAuthScopes = exports.StorageBlobLoggingAllowedQueryParameters = exports.StorageBlobLoggingAllowedHeaderNames = exports.SIZE_1_MB = exports.SERVICE_VERSION = exports.SDK_VERSION = exports.REQUEST_TIMEOUT = exports.PathStylePorts = exports.HeaderConstants = exports.HTTP_VERSION_1_1 = exports.HTTP_LINE_ENDING = exports.HTTPURLConnection = exports.EncryptionAlgorithmAES25 = exports.ETagNone = exports.ETagAny = exports.DevelopmentConnectionString = exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = exports.BlobUsesCustomerSpecifiedEncryptionMsg = exports.BlobDoesNotUseCustomerSpecifiedEncryption = exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = exports.BLOCK_BLOB_MAX_BLOCKS = exports.BATCH_MAX_REQUEST = exports.BATCH_MAX_PAYLOAD_IN_BYTES = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var SDK_VERSION = exports.SDK_VERSION = "12.24.0";
var SERVICE_VERSION = exports.SERVICE_VERSION = "2024-08-04";
var BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB
var BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB
var BLOCK_BLOB_MAX_BLOCKS = exports.BLOCK_BLOB_MAX_BLOCKS = 50000;
var DEFAULT_BLOCK_BUFFER_SIZE_BYTES = exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB
var DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB
var DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
var REQUEST_TIMEOUT = exports.REQUEST_TIMEOUT = 100 * 1000; // In ms
/**
 * The OAuth scope to use with Azure Storage.
 */
var StorageOAuthScopes = exports.StorageOAuthScopes = "https://storage.azure.com/.default";
var URLConstants = exports.URLConstants = {
  Parameters: {
    FORCE_BROWSER_NO_CACHE: "_",
    SIGNATURE: "sig",
    SNAPSHOT: "snapshot",
    VERSIONID: "versionid",
    TIMEOUT: "timeout"
  }
};
var HTTPURLConnection = exports.HTTPURLConnection = {
  HTTP_ACCEPTED: 202,
  HTTP_CONFLICT: 409,
  HTTP_NOT_FOUND: 404,
  HTTP_PRECON_FAILED: 412,
  HTTP_RANGE_NOT_SATISFIABLE: 416
};
var HeaderConstants = exports.HeaderConstants = {
  AUTHORIZATION: "Authorization",
  AUTHORIZATION_SCHEME: "Bearer",
  CONTENT_ENCODING: "Content-Encoding",
  CONTENT_ID: "Content-ID",
  CONTENT_LANGUAGE: "Content-Language",
  CONTENT_LENGTH: "Content-Length",
  CONTENT_MD5: "Content-Md5",
  CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
  CONTENT_TYPE: "Content-Type",
  COOKIE: "Cookie",
  DATE: "date",
  IF_MATCH: "if-match",
  IF_MODIFIED_SINCE: "if-modified-since",
  IF_NONE_MATCH: "if-none-match",
  IF_UNMODIFIED_SINCE: "if-unmodified-since",
  PREFIX_FOR_STORAGE: "x-ms-",
  RANGE: "Range",
  USER_AGENT: "User-Agent",
  X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
  X_MS_COPY_SOURCE: "x-ms-copy-source",
  X_MS_DATE: "x-ms-date",
  X_MS_ERROR_CODE: "x-ms-error-code",
  X_MS_VERSION: "x-ms-version",
  X_MS_CopySourceErrorCode: "x-ms-copy-source-error-code"
};
var ETagNone = exports.ETagNone = "";
var ETagAny = exports.ETagAny = "*";
var SIZE_1_MB = exports.SIZE_1_MB = 1 * 1024 * 1024;
var BATCH_MAX_REQUEST = exports.BATCH_MAX_REQUEST = 256;
var BATCH_MAX_PAYLOAD_IN_BYTES = exports.BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
var HTTP_LINE_ENDING = exports.HTTP_LINE_ENDING = "\r\n";
var HTTP_VERSION_1_1 = exports.HTTP_VERSION_1_1 = "HTTP/1.1";
var EncryptionAlgorithmAES25 = exports.EncryptionAlgorithmAES25 = "AES256";
var DevelopmentConnectionString = exports.DevelopmentConnectionString = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;";
var StorageBlobLoggingAllowedHeaderNames = exports.StorageBlobLoggingAllowedHeaderNames = ["Access-Control-Allow-Origin", "Cache-Control", "Content-Length", "Content-Type", "Date", "Request-Id", "traceparent", "Transfer-Encoding", "User-Agent", "x-ms-client-request-id", "x-ms-date", "x-ms-error-code", "x-ms-request-id", "x-ms-return-client-request-id", "x-ms-version", "Accept-Ranges", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-MD5", "Content-Range", "ETag", "Last-Modified", "Server", "Vary", "x-ms-content-crc64", "x-ms-copy-action", "x-ms-copy-completion-time", "x-ms-copy-id", "x-ms-copy-progress", "x-ms-copy-status", "x-ms-has-immutability-policy", "x-ms-has-legal-hold", "x-ms-lease-state", "x-ms-lease-status", "x-ms-range", "x-ms-request-server-encrypted", "x-ms-server-encrypted", "x-ms-snapshot", "x-ms-source-range", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "x-ms-access-tier", "x-ms-access-tier-change-time", "x-ms-access-tier-inferred", "x-ms-account-kind", "x-ms-archive-status", "x-ms-blob-append-offset", "x-ms-blob-cache-control", "x-ms-blob-committed-block-count", "x-ms-blob-condition-appendpos", "x-ms-blob-condition-maxsize", "x-ms-blob-content-disposition", "x-ms-blob-content-encoding", "x-ms-blob-content-language", "x-ms-blob-content-length", "x-ms-blob-content-md5", "x-ms-blob-content-type", "x-ms-blob-public-access", "x-ms-blob-sequence-number", "x-ms-blob-type", "x-ms-copy-destination-snapshot", "x-ms-creation-time", "x-ms-default-encryption-scope", "x-ms-delete-snapshots", "x-ms-delete-type-permanent", "x-ms-deny-encryption-scope-override", "x-ms-encryption-algorithm", "x-ms-if-sequence-number-eq", "x-ms-if-sequence-number-le", "x-ms-if-sequence-number-lt", "x-ms-incremental-copy", "x-ms-lease-action", "x-ms-lease-break-period", "x-ms-lease-duration", "x-ms-lease-id", "x-ms-lease-time", "x-ms-page-write", "x-ms-proposed-lease-id", "x-ms-range-get-content-md5", "x-ms-rehydrate-priority", "x-ms-sequence-number-action", "x-ms-sku-name", "x-ms-source-content-md5", "x-ms-source-if-match", "x-ms-source-if-modified-since", "x-ms-source-if-none-match", "x-ms-source-if-unmodified-since", "x-ms-tag-count", "x-ms-encryption-key-sha256", "x-ms-copy-source-error-code", "x-ms-copy-source-status-code", "x-ms-if-tags", "x-ms-source-if-tags"];
var StorageBlobLoggingAllowedQueryParameters = exports.StorageBlobLoggingAllowedQueryParameters = ["comp", "maxresults", "rscc", "rscd", "rsce", "rscl", "rsct", "se", "si", "sip", "sp", "spr", "sr", "srt", "ss", "st", "sv", "include", "marker", "prefix", "copyid", "restype", "blockid", "blocklisttype", "delimiter", "prevsnapshot", "ske", "skoid", "sks", "skt", "sktid", "skv", "snapshot"];
var BlobUsesCustomerSpecifiedEncryptionMsg = exports.BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";
var BlobDoesNotUseCustomerSpecifiedEncryption = exports.BlobDoesNotUseCustomerSpecifiedEncryption = "BlobDoesNotUseCustomerSpecifiedEncryption";
/// List of ports used for path style addressing.
/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.
var PathStylePorts = exports.PathStylePorts = ["10000", "10001", "10002", "10003", "10004", "10100", "10101", "10102", "10103", "10104", "11000", "11001", "11002", "11003", "11004", "11100", "11101", "11102", "11103", "11104"];
},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobNameToString = BlobNameToString;
exports.ConvertInternalResponseOfListBlobFlat = ConvertInternalResponseOfListBlobFlat;
exports.ConvertInternalResponseOfListBlobHierarchy = ConvertInternalResponseOfListBlobHierarchy;
exports.EscapePath = EscapePath;
exports.ExtractPageRangeInfoItems = ExtractPageRangeInfoItems;
exports.appendToURLPath = appendToURLPath;
exports.appendToURLQuery = appendToURLQuery;
exports.assertResponse = assertResponse;
exports.attachCredential = attachCredential;
exports.base64decode = base64decode;
exports.base64encode = base64encode;
exports.delay = delay;
exports.escapeURLPath = escapeURLPath;
exports.extractConnectionStringParts = extractConnectionStringParts;
exports.generateBlockID = generateBlockID;
exports.getAccountNameFromUrl = getAccountNameFromUrl;
exports.getURLParameter = getURLParameter;
exports.getURLPath = getURLPath;
exports.getURLPathAndQuery = getURLPathAndQuery;
exports.getURLQueries = getURLQueries;
exports.getURLScheme = getURLScheme;
exports.getValueInConnString = getValueInConnString;
exports.httpAuthorizationToString = httpAuthorizationToString;
exports.iEqual = iEqual;
exports.isIpEndpointStyle = isIpEndpointStyle;
exports.padStart = padStart;
exports.parseObjectReplicationRecord = parseObjectReplicationRecord;
exports.sanitizeHeaders = sanitizeHeaders;
exports.sanitizeURL = sanitizeURL;
exports.setURLHost = setURLHost;
exports.setURLParameter = setURLParameter;
exports.toBlobTags = toBlobTags;
exports.toBlobTagsString = toBlobTagsString;
exports.toQuerySerialization = toQuerySerialization;
exports.toTags = toTags;
exports.truncatedISO8061Date = truncatedISO8061Date;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreUtil = require("@azure/core-util");
var _constants = require("./constants");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(ExtractPageRangeInfoItems);
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Reserved URL characters must be properly escaped for Storage services like Blob or File.
 *
 * ## URL encode and escape strategy for JS SDKs
 *
 * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.
 * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL
 * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.
 *
 * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.
 *
 * This is what legacy V2 SDK does, simple and works for most of the cases.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%253A" and send to server. A blob named "b%3A" will be created.
 *
 * But this strategy will make it not possible to create a blob with "?" in it's name. Because when customer URL string is
 * "http://account.blob.core.windows.net/con/blob?name", the "?name" will be treated as URL paramter instead of blob name.
 * If customer URL string is "http://account.blob.core.windows.net/con/blob%3Fname", a blob named "blob%3Fname" will be created.
 * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.
 * We cannot accept a SDK cannot create a blob name with "?". So we implement strategy two:
 *
 * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.
 *
 * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will escape ":" like "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%3A" to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%253A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%253A" to server. A blob named "b%3A" will be created.
 *
 * This strategy gives us flexibility to create with any special characters. But "%" will be treated as a special characters, if the URL string
 * is not encoded, there shouldn't a "%" in the URL string, otherwise the URL is not a valid URL.
 * If customer needs to create a blob with "%" in it's blob name, use "%25" instead of "%". Just like above 3rd sample.
 * And following URL strings are invalid:
 * - "http://account.blob.core.windows.net/con/b%"
 * - "http://account.blob.core.windows.net/con/b%2"
 * - "http://account.blob.core.windows.net/con/b%G"
 *
 * Another special character is "?", use "%2F" to represent a blob name with "?" in a URL string.
 *
 * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`
 *
 * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata
 *
 * @param url -
 */
function escapeURLPath(url) {
  var urlParsed = new URL(url);
  var path = urlParsed.pathname;
  path = path || "/";
  path = escape(path);
  urlParsed.pathname = path;
  return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
  // Development Connection String
  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key
  var proxyUri = "";
  if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri
    var matchCredentials = connectionString.split(";");
    var _iterator = _createForOfIteratorHelper(matchCredentials),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var element = _step.value;
        if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
          proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return proxyUri;
}
function getValueInConnString(connectionString, argument) {
  var elements = connectionString.split(";");
  var _iterator2 = _createForOfIteratorHelper(elements),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var element = _step2.value;
      if (element.trim().startsWith(argument)) {
        return element.trim().match(argument + "=(.*)")[1];
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return "";
}
/**
 * Extracts the parts of an Azure Storage account connection string.
 *
 * @param connectionString - Connection string.
 * @returns String key value pairs of the storage account's url and credentials.
 */
function extractConnectionStringParts(connectionString) {
  var proxyUri = "";
  if (connectionString.startsWith("UseDevelopmentStorage=true")) {
    // Development connection string
    proxyUri = getProxyUriFromDevConnString(connectionString);
    connectionString = _constants.DevelopmentConnectionString;
  }
  // Matching BlobEndpoint in the Account connection string
  var blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
  // Slicing off '/' at the end if exists
  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)
  blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
  if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
    // Account connection string
    var defaultEndpointsProtocol = "";
    var accountName = "";
    var accountKey = Buffer.from("accountKey", "base64");
    var endpointSuffix = "";
    // Get account name and key
    accountName = getValueInConnString(connectionString, "AccountName");
    accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
    if (!blobEndpoint) {
      // BlobEndpoint is not present in the Account connection string
      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      var protocol = defaultEndpointsProtocol.toLowerCase();
      if (protocol !== "https" && protocol !== "http") {
        throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      }
      endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
      if (!endpointSuffix) {
        throw new Error("Invalid EndpointSuffix in the provided Connection String");
      }
      blobEndpoint = "".concat(defaultEndpointsProtocol, "://").concat(accountName, ".blob.").concat(endpointSuffix);
    }
    if (!accountName) {
      throw new Error("Invalid AccountName in the provided Connection String");
    } else if (accountKey.length === 0) {
      throw new Error("Invalid AccountKey in the provided Connection String");
    }
    return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName: accountName,
      accountKey: accountKey,
      proxyUri: proxyUri
    };
  } else {
    // SAS connection string
    var accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
    var _accountName = getValueInConnString(connectionString, "AccountName");
    // if accountName is empty, try to read it from BlobEndpoint
    if (!_accountName) {
      _accountName = getAccountNameFromUrl(blobEndpoint);
    }
    if (!blobEndpoint) {
      throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
    } else if (!accountSas) {
      throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
    }
    // client constructors assume accountSas does *not* start with ?
    if (accountSas.startsWith("?")) {
      accountSas = accountSas.substring(1);
    }
    return {
      kind: "SASConnString",
      url: blobEndpoint,
      accountName: _accountName,
      accountSas: accountSas
    };
  }
}
/**
 * Internal escape method implemented Strategy Two mentioned in escapeURL() description.
 *
 * @param text -
 */
function escape(text) {
  return encodeURIComponent(text).replace(/%2F/g, "/") // Don't escape for "/"
  .replace(/'/g, "%27") // Escape for "'"
  .replace(/\+/g, "%20").replace(/%25/g, "%"); // Revert encoded "%"
}
/**
 * Append a string to URL path. Will remove duplicated "/" in front of the string
 * when URL path ends with a "/".
 *
 * @param url - Source URL string
 * @param name - String to be appended to URL
 * @returns An updated URL string
 */
function appendToURLPath(url, name) {
  var urlParsed = new URL(url);
  var path = urlParsed.pathname;
  path = path ? path.endsWith("/") ? "".concat(path).concat(name) : "".concat(path, "/").concat(name) : name;
  urlParsed.pathname = path;
  return urlParsed.toString();
}
/**
 * Set URL parameter name and value. If name exists in URL parameters, old value
 * will be replaced by name key. If not provide value, the parameter will be deleted.
 *
 * @param url - Source URL string
 * @param name - Parameter name
 * @param value - Parameter value
 * @returns An updated URL string
 */
function setURLParameter(url, name, value) {
  var urlParsed = new URL(url);
  var encodedName = encodeURIComponent(name);
  var encodedValue = value ? encodeURIComponent(value) : undefined;
  // mutating searchParams will change the encoding, so we have to do this ourselves
  var searchString = urlParsed.search === "" ? "?" : urlParsed.search;
  var searchPieces = [];
  var _iterator3 = _createForOfIteratorHelper(searchString.slice(1).split("&")),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var pair = _step3.value;
      if (pair) {
        var _pair$split = pair.split("=", 2),
          _pair$split2 = _slicedToArray(_pair$split, 1),
          key = _pair$split2[0];
        if (key !== encodedName) {
          searchPieces.push(pair);
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  if (encodedValue) {
    searchPieces.push("".concat(encodedName, "=").concat(encodedValue));
  }
  urlParsed.search = searchPieces.length ? "?".concat(searchPieces.join("&")) : "";
  return urlParsed.toString();
}
/**
 * Get URL parameter by name.
 *
 * @param url -
 * @param name -
 */
function getURLParameter(url, name) {
  var _a;
  var urlParsed = new URL(url);
  return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;
}
/**
 * Set URL host.
 *
 * @param url - Source URL string
 * @param host - New host string
 * @returns An updated URL string
 */
function setURLHost(url, host) {
  var urlParsed = new URL(url);
  urlParsed.hostname = host;
  return urlParsed.toString();
}
/**
 * Get URL path from an URL string.
 *
 * @param url - Source URL string
 */
function getURLPath(url) {
  try {
    var urlParsed = new URL(url);
    return urlParsed.pathname;
  } catch (e) {
    return undefined;
  }
}
/**
 * Get URL scheme from an URL string.
 *
 * @param url - Source URL string
 */
function getURLScheme(url) {
  try {
    var urlParsed = new URL(url);
    return urlParsed.protocol.endsWith(":") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;
  } catch (e) {
    return undefined;
  }
}
/**
 * Get URL path and query from an URL string.
 *
 * @param url - Source URL string
 */
function getURLPathAndQuery(url) {
  var urlParsed = new URL(url);
  var pathString = urlParsed.pathname;
  if (!pathString) {
    throw new RangeError("Invalid url without valid path.");
  }
  var queryString = urlParsed.search || "";
  queryString = queryString.trim();
  if (queryString !== "") {
    queryString = queryString.startsWith("?") ? queryString : "?".concat(queryString); // Ensure query string start with '?'
  }
  return "".concat(pathString).concat(queryString);
}
/**
 * Get URL query key value pairs from an URL string.
 *
 * @param url -
 */
function getURLQueries(url) {
  var queryString = new URL(url).search;
  if (!queryString) {
    return {};
  }
  queryString = queryString.trim();
  queryString = queryString.startsWith("?") ? queryString.substring(1) : queryString;
  var querySubStrings = queryString.split("&");
  querySubStrings = querySubStrings.filter(function (value) {
    var indexOfEqual = value.indexOf("=");
    var lastIndexOfEqual = value.lastIndexOf("=");
    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
  });
  var queries = {};
  var _iterator4 = _createForOfIteratorHelper(querySubStrings),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var querySubString = _step4.value;
      var splitResults = querySubString.split("=");
      var key = splitResults[0];
      var value = splitResults[1];
      queries[key] = value;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return queries;
}
/**
 * Append a string to URL query.
 *
 * @param url - Source URL string.
 * @param queryParts - String to be appended to the URL query.
 * @returns An updated URL string.
 */
function appendToURLQuery(url, queryParts) {
  var urlParsed = new URL(url);
  var query = urlParsed.search;
  if (query) {
    query += "&" + queryParts;
  } else {
    query = queryParts;
  }
  urlParsed.search = query;
  return urlParsed.toString();
}
/**
 * Rounds a date off to seconds.
 *
 * @param date -
 * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
 *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
 * @returns Date string in ISO8061 format, with or without 7 milliseconds component
 */
function truncatedISO8061Date(date) {
  var withMilliseconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  // Date.toISOString() will return like "2018-10-29T06:34:36.139Z"
  var dateString = date.toISOString();
  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000" + "Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
/**
 * Base64 encode.
 *
 * @param content -
 */
function base64encode(content) {
  return !_coreUtil.isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
/**
 * Base64 decode.
 *
 * @param encodedString -
 */
function base64decode(encodedString) {
  return !_coreUtil.isNode ? atob(encodedString) : Buffer.from(encodedString, "base64").toString();
}
/**
 * Generate a 64 bytes base64 block ID string.
 *
 * @param blockIndex -
 */
function generateBlockID(blockIDPrefix, blockIndex) {
  // To generate a 64 bytes base64 string, source string should be 48
  var maxSourceStringLength = 48;
  // A blob can have a maximum of 100,000 uncommitted blocks at any given time
  var maxBlockIndexLength = 6;
  var maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
  }
  var res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
  return base64encode(res);
}
/**
 * Delay specified time interval.
 *
 * @param timeInMs -
 * @param aborter -
 * @param abortError -
 */
function delay(_x, _x2, _x3) {
  return _delay.apply(this, arguments);
}
/**
 * String.prototype.padStart()
 *
 * @param currentString -
 * @param targetLength -
 * @param padString -
 */
function _delay() {
  _delay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(timeInMs, aborter, abortError) {
    return _regeneratorRuntime().wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", new Promise(function (resolve, reject) {
            /* eslint-disable-next-line prefer-const */
            var timeout;
            var abortHandler = function abortHandler() {
              if (timeout !== undefined) {
                clearTimeout(timeout);
              }
              reject(abortError);
            };
            var resolveHandler = function resolveHandler() {
              if (aborter !== undefined) {
                aborter.removeEventListener("abort", abortHandler);
              }
              resolve();
            };
            timeout = setTimeout(resolveHandler, timeInMs);
            if (aborter !== undefined) {
              aborter.addEventListener("abort", abortHandler);
            }
          }));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return _delay.apply(this, arguments);
}
function padStart(currentString, targetLength) {
  var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : " ";
  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes
  if (String.prototype.padStart) {
    return currentString.padStart(targetLength, padString);
  }
  padString = padString || " ";
  if (currentString.length > targetLength) {
    return currentString;
  } else {
    targetLength = targetLength - currentString.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length);
    }
    return padString.slice(0, targetLength) + currentString;
  }
}
function sanitizeURL(url) {
  var safeURL = url;
  if (getURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE)) {
    safeURL = setURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE, "*****");
  }
  return safeURL;
}
function sanitizeHeaders(originalHeader) {
  var headers = (0, _coreRestPipeline.createHttpHeaders)();
  var _iterator5 = _createForOfIteratorHelper(originalHeader),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _step5$value = _slicedToArray(_step5.value, 2),
        name = _step5$value[0],
        value = _step5$value[1];
      if (name.toLowerCase() === _constants.HeaderConstants.AUTHORIZATION.toLowerCase()) {
        headers.set(name, "*****");
      } else if (name.toLowerCase() === _constants.HeaderConstants.X_MS_COPY_SOURCE) {
        headers.set(name, sanitizeURL(value));
      } else {
        headers.set(name, value);
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  return headers;
}
/**
 * If two strings are equal when compared case insensitive.
 *
 * @param str1 -
 * @param str2 -
 */
function iEqual(str1, str2) {
  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
/**
 * Extracts account name from the url
 * @param url - url to extract the account name from
 * @returns with the account name
 */
function getAccountNameFromUrl(url) {
  var parsedUrl = new URL(url);
  var accountName;
  try {
    if (parsedUrl.hostname.split(".")[1] === "blob") {
      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
      accountName = parsedUrl.hostname.split(".")[0];
    } else if (isIpEndpointStyle(parsedUrl)) {
      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/
      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/
      // .getPath() -> /devstoreaccount1/
      accountName = parsedUrl.pathname.split("/")[1];
    } else {
      // Custom domain case: "https://customdomain.com/containername/blob".
      accountName = "";
    }
    return accountName;
  } catch (error) {
    throw new Error("Unable to extract accountName with provided information.");
  }
}
function isIpEndpointStyle(parsedUrl) {
  var host = parsedUrl.host;
  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.
  // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.
  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.
  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.
  return /^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || Boolean(parsedUrl.port) && _constants.PathStylePorts.includes(parsedUrl.port);
}
/**
 * Convert Tags to encoded string.
 *
 * @param tags -
 */
function toBlobTagsString(tags) {
  if (tags === undefined) {
    return undefined;
  }
  var tagPairs = [];
  for (var key in tags) {
    if (Object.prototype.hasOwnProperty.call(tags, key)) {
      var value = tags[key];
      tagPairs.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value)));
    }
  }
  return tagPairs.join("&");
}
/**
 * Convert Tags type to BlobTags.
 *
 * @param tags -
 */
function toBlobTags(tags) {
  if (tags === undefined) {
    return undefined;
  }
  var res = {
    blobTagSet: []
  };
  for (var key in tags) {
    if (Object.prototype.hasOwnProperty.call(tags, key)) {
      var value = tags[key];
      res.blobTagSet.push({
        key: key,
        value: value
      });
    }
  }
  return res;
}
/**
 * Covert BlobTags to Tags type.
 *
 * @param tags -
 */
function toTags(tags) {
  if (tags === undefined) {
    return undefined;
  }
  var res = {};
  var _iterator6 = _createForOfIteratorHelper(tags.blobTagSet),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var blobTag = _step6.value;
      res[blobTag.key] = blobTag.value;
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  return res;
}
/**
 * Convert BlobQueryTextConfiguration to QuerySerialization type.
 *
 * @param textConfiguration -
 */
function toQuerySerialization(textConfiguration) {
  if (textConfiguration === undefined) {
    return undefined;
  }
  switch (textConfiguration.kind) {
    case "csv":
      return {
        format: {
          type: "delimited",
          delimitedTextConfiguration: {
            columnSeparator: textConfiguration.columnSeparator || ",",
            fieldQuote: textConfiguration.fieldQuote || "",
            recordSeparator: textConfiguration.recordSeparator,
            escapeChar: textConfiguration.escapeCharacter || "",
            headersPresent: textConfiguration.hasHeaders || false
          }
        }
      };
    case "json":
      return {
        format: {
          type: "json",
          jsonTextConfiguration: {
            recordSeparator: textConfiguration.recordSeparator
          }
        }
      };
    case "arrow":
      return {
        format: {
          type: "arrow",
          arrowConfiguration: {
            schema: textConfiguration.schema
          }
        }
      };
    case "parquet":
      return {
        format: {
          type: "parquet"
        }
      };
    default:
      throw Error("Invalid BlobQueryTextConfiguration.");
  }
}
function parseObjectReplicationRecord(objectReplicationRecord) {
  if (!objectReplicationRecord) {
    return undefined;
  }
  if ("policy-id" in objectReplicationRecord) {
    // If the dictionary contains a key with policy id, we are not required to do any parsing since
    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.
    return undefined;
  }
  var orProperties = [];
  var _loop = function _loop() {
    var ids = key.split("_");
    var policyPrefix = "or-";
    if (ids[0].startsWith(policyPrefix)) {
      ids[0] = ids[0].substring(policyPrefix.length);
    }
    var rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
    };
    var policyIndex = orProperties.findIndex(function (policy) {
      return policy.policyId === ids[0];
    });
    if (policyIndex > -1) {
      orProperties[policyIndex].rules.push(rule);
    } else {
      orProperties.push({
        policyId: ids[0],
        rules: [rule]
      });
    }
  };
  for (var key in objectReplicationRecord) {
    _loop();
  }
  return orProperties;
}
/**
 * Attach a TokenCredential to an object.
 *
 * @param thing -
 * @param credential -
 */
function attachCredential(thing, credential) {
  thing.credential = credential;
  return thing;
}
function httpAuthorizationToString(httpAuthorization) {
  return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : undefined;
}
function BlobNameToString(name) {
  if (name.encoded) {
    return decodeURIComponent(name.content);
  } else {
    return name.content;
  }
}
function ConvertInternalResponseOfListBlobFlat(internalResponse) {
  return Object.assign(Object.assign({}, internalResponse), {
    segment: {
      blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {
        var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
          name: BlobNameToString(blobItemInteral.name)
        });
        return blobItem;
      })
    }
  });
}
function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
  var _a;
  return Object.assign(Object.assign({}, internalResponse), {
    segment: {
      blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(function (blobPrefixInternal) {
        var blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), {
          name: BlobNameToString(blobPrefixInternal.name)
        });
        return blobPrefix;
      }),
      blobItems: internalResponse.segment.blobItems.map(function (blobItemInteral) {
        var blobItem = Object.assign(Object.assign({}, blobItemInteral), {
          name: BlobNameToString(blobItemInteral.name)
        });
        return blobItem;
      })
    }
  });
}
function ExtractPageRangeInfoItems(getPageRangesSegment) {
  var pageRange, clearRange, pageRangeIndex, clearRangeIndex;
  return _regeneratorRuntime().wrap(function ExtractPageRangeInfoItems$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        pageRange = [];
        clearRange = [];
        if (getPageRangesSegment.pageRange) pageRange = getPageRangesSegment.pageRange;
        if (getPageRangesSegment.clearRange) clearRange = getPageRangesSegment.clearRange;
        pageRangeIndex = 0;
        clearRangeIndex = 0;
      case 6:
        if (!(pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length)) {
          _context.next = 18;
          break;
        }
        if (!(pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start)) {
          _context.next = 13;
          break;
        }
        _context.next = 10;
        return {
          start: pageRange[pageRangeIndex].start,
          end: pageRange[pageRangeIndex].end,
          isClear: false
        };
      case 10:
        ++pageRangeIndex;
        _context.next = 16;
        break;
      case 13:
        _context.next = 15;
        return {
          start: clearRange[clearRangeIndex].start,
          end: clearRange[clearRangeIndex].end,
          isClear: true
        };
      case 15:
        ++clearRangeIndex;
      case 16:
        _context.next = 6;
        break;
      case 18:
        if (!(pageRangeIndex < pageRange.length)) {
          _context.next = 24;
          break;
        }
        _context.next = 21;
        return {
          start: pageRange[pageRangeIndex].start,
          end: pageRange[pageRangeIndex].end,
          isClear: false
        };
      case 21:
        ++pageRangeIndex;
        _context.next = 18;
        break;
      case 24:
        if (!(clearRangeIndex < clearRange.length)) {
          _context.next = 30;
          break;
        }
        _context.next = 27;
        return {
          start: clearRange[clearRangeIndex].start,
          end: clearRange[clearRangeIndex].end,
          isClear: true
        };
      case 27:
        ++clearRangeIndex;
        _context.next = 24;
        break;
      case 30:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
/**
 * Escape the blobName but keep path separator ('/').
 */
function EscapePath(blobName) {
  var split = blobName.split("/");
  for (var i = 0; i < split.length; i++) {
    split[i] = encodeURIComponent(split[i]);
  }
  return split.join("/");
}
/**
 * A typesafe helper for ensuring that a given response object has
 * the original _response attached.
 * @param response - A response object from calling a client operation
 * @returns The same object, but with known _response property
 */
function assertResponse(response) {
  if ("_response" in response) {
    return response;
  }
  throw new TypeError("Unexpected response object ".concat(response));
}
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NewRetryPolicyFactory = NewRetryPolicyFactory;
exports.StorageRetryPolicyType = exports.StorageRetryPolicy = void 0;
var _abortController = require("@azure/abort-controller");
var _RequestPolicy = require("./RequestPolicy");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
var _log = require("../log");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A factory method used to generated a RetryPolicy factory.
 *
 * @param retryOptions -
 */
function NewRetryPolicyFactory(retryOptions) {
  return {
    create: function create(nextPolicy, options) {
      return new StorageRetryPolicy(nextPolicy, options, retryOptions);
    }
  };
}
/**
 * RetryPolicy types.
 */
var StorageRetryPolicyType;
(function (StorageRetryPolicyType) {
  /**
   * Exponential retry. Retry time delay grows exponentially.
   */
  StorageRetryPolicyType[StorageRetryPolicyType["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  /**
   * Linear retry. Retry time delay grows linearly.
   */
  StorageRetryPolicyType[StorageRetryPolicyType["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (exports.StorageRetryPolicyType = StorageRetryPolicyType = {}));
// Default values of StorageRetryOptions
var DEFAULT_RETRY_OPTIONS = {
  maxRetryDelayInMs: 120 * 1000,
  maxTries: 4,
  retryDelayInMs: 4 * 1000,
  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: undefined // Use server side default timeout strategy
};
var RETRY_ABORT_ERROR = new _abortController.AbortError("The operation was aborted.");
/**
 * Retry policy with exponential retry and linear retry implemented.
 */
var StorageRetryPolicy = exports.StorageRetryPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
  /**
   * Creates an instance of RetryPolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param retryOptions -
   */
  function StorageRetryPolicy(nextPolicy, options) {
    var _this;
    var retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;
    _classCallCheck(this, StorageRetryPolicy);
    _this = _callSuper(this, StorageRetryPolicy, [nextPolicy, options]);
    // Initialize retry options
    _this.retryOptions = {
      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
    };
    return _this;
  }
  /**
   * Sends request.
   *
   * @param request -
   */
  _inherits(StorageRetryPolicy, _BaseRequestPolicy);
  return _createClass(StorageRetryPolicy, [{
    key: "sendRequest",
    value: (function () {
      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.attemptSendRequest(request, false, 1));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function sendRequest(_x) {
        return _sendRequest.apply(this, arguments);
      }
      return sendRequest;
    }()
    /**
     * Decide and perform next retry. Won't mutate request parameter.
     *
     * @param request -
     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
     *                                   the resource was not found. This may be due to replication delay. So, in this
     *                                   case, we'll never try the secondary again for this operation.
     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
     *                                   the attempt will be performed by this method call.
     */
    )
  }, {
    key: "attemptSendRequest",
    value: (function () {
      var _attemptSendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, secondaryHas404, attempt) {
        var newRequest, isPrimaryRetry, response;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              newRequest = request.clone();
              isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") || attempt % 2 === 1;
              if (!isPrimaryRetry) {
                newRequest.url = (0, _utils.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);
              }
              // Set the server-side timeout query parameter "timeout=[seconds]"
              if (this.retryOptions.tryTimeoutInMs) {
                newRequest.url = (0, _utils.setURLParameter)(newRequest.url, _constants.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());
              }
              _context2.prev = 4;
              _log.logger.info("RetryPolicy: =====> Try=".concat(attempt, " ").concat(isPrimaryRetry ? "Primary" : "Secondary"));
              _context2.next = 8;
              return this._nextPolicy.sendRequest(newRequest);
            case 8:
              response = _context2.sent;
              if (this.shouldRetry(isPrimaryRetry, attempt, response)) {
                _context2.next = 11;
                break;
              }
              return _context2.abrupt("return", response);
            case 11:
              secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
              _context2.next = 19;
              break;
            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](4);
              _log.logger.error("RetryPolicy: Caught error, message: ".concat(_context2.t0.message, ", code: ").concat(_context2.t0.code));
              if (this.shouldRetry(isPrimaryRetry, attempt, response, _context2.t0)) {
                _context2.next = 19;
                break;
              }
              throw _context2.t0;
            case 19:
              _context2.next = 21;
              return this.delay(isPrimaryRetry, attempt, request.abortSignal);
            case 21:
              return _context2.abrupt("return", this.attemptSendRequest(request, secondaryHas404, ++attempt));
            case 22:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[4, 14]]);
      }));
      function attemptSendRequest(_x2, _x3, _x4) {
        return _attemptSendRequest.apply(this, arguments);
      }
      return attemptSendRequest;
    }()
    /**
     * Decide whether to retry according to last HTTP response and retry counters.
     *
     * @param isPrimaryRetry -
     * @param attempt -
     * @param response -
     * @param err -
     */
    )
  }, {
    key: "shouldRetry",
    value: function shouldRetry(isPrimaryRetry, attempt, response, err) {
      if (attempt >= this.retryOptions.maxTries) {
        _log.logger.info("RetryPolicy: Attempt(s) ".concat(attempt, " >= maxTries ").concat(this.retryOptions.maxTries, ", no further try."));
        return false;
      }
      // Handle network failures, you may need to customize the list when you implement
      // your own http client
      var retriableErrors = ["ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR" // For default xhr based http client provided in ms-rest-js
      ];
      if (err) {
        var _iterator = _createForOfIteratorHelper(retriableErrors),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var retriableError = _step.value;
            if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
              _log.logger.info("RetryPolicy: Network error ".concat(retriableError, " found, will retry."));
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      // If attempt was against the secondary & it returned a StatusNotFound (404), then
      // the resource was not found. This may be due to replication delay. So, in this
      // case, we'll never try the secondary again for this operation.
      if (response || err) {
        var statusCode = response ? response.status : err ? err.statusCode : 0;
        if (!isPrimaryRetry && statusCode === 404) {
          _log.logger.info("RetryPolicy: Secondary access with 404, will retry.");
          return true;
        }
        // Server internal error or server timeout
        if (statusCode === 503 || statusCode === 500) {
          _log.logger.info("RetryPolicy: Will retry for status code ".concat(statusCode, "."));
          return true;
        }
      }
      // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.
      // if (response) {
      //   // Retry select Copy Source Error Codes.
      //   if (response?.status >= 400) {
      //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);
      //     if (copySourceError !== undefined) {
      //       switch (copySourceError) {
      //         case "InternalError":
      //         case "OperationTimedOut":
      //         case "ServerBusy":
      //           return true;
      //       }
      //     }
      //   }
      // }
      if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith("Error \"Error: Unclosed root tag"))) {
        _log.logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
        return true;
      }
      return false;
    }
    /**
     * Delay a calculated time between retries.
     *
     * @param isPrimaryRetry -
     * @param attempt -
     * @param abortSignal -
     */
  }, {
    key: "delay",
    value: (function () {
      var _delay2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isPrimaryRetry, attempt, abortSignal) {
        var delayTimeInMs;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              delayTimeInMs = 0;
              if (!isPrimaryRetry) {
                _context3.next = 11;
                break;
              }
              _context3.t0 = this.retryOptions.retryPolicyType;
              _context3.next = _context3.t0 === StorageRetryPolicyType.EXPONENTIAL ? 5 : _context3.t0 === StorageRetryPolicyType.FIXED ? 7 : 9;
              break;
            case 5:
              delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
              return _context3.abrupt("break", 9);
            case 7:
              delayTimeInMs = this.retryOptions.retryDelayInMs;
              return _context3.abrupt("break", 9);
            case 9:
              _context3.next = 12;
              break;
            case 11:
              delayTimeInMs = Math.random() * 1000;
            case 12:
              _log.logger.info("RetryPolicy: Delay for ".concat(delayTimeInMs, "ms"));
              return _context3.abrupt("return", (0, _utils.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR));
            case 14:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function delay(_x5, _x6, _x7) {
        return _delay2.apply(this, arguments);
      }
      return delay;
    }())
  }]);
}(_RequestPolicy.BaseRequestPolicy);
},{"@azure/abort-controller":"node_modules/@azure/abort-controller/dist-esm/src/index.js","./RequestPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","../log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StorageRetryPolicy", {
  enumerable: true,
  get: function () {
    return _StorageRetryPolicy.StorageRetryPolicy;
  }
});
exports.StorageRetryPolicyFactory = void 0;
Object.defineProperty(exports, "StorageRetryPolicyType", {
  enumerable: true,
  get: function () {
    return _StorageRetryPolicy.StorageRetryPolicyType;
  }
});
var _StorageRetryPolicy = require("./policies/StorageRetryPolicy");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
 */
var StorageRetryPolicyFactory = exports.StorageRetryPolicyFactory = /*#__PURE__*/function () {
  /**
   * Creates an instance of StorageRetryPolicyFactory.
   * @param retryOptions -
   */
  function StorageRetryPolicyFactory(retryOptions) {
    _classCallCheck(this, StorageRetryPolicyFactory);
    this.retryOptions = retryOptions;
  }
  /**
   * Creates a StorageRetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */
  return _createClass(StorageRetryPolicyFactory, [{
    key: "create",
    value: function create(nextPolicy, options) {
      return new _StorageRetryPolicy.StorageRetryPolicy(nextPolicy, options, this.retryOptions);
    }
  }]);
}();
},{"./policies/StorageRetryPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageSharedKeyCredential = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var StorageSharedKeyCredential = exports.StorageSharedKeyCredential = /*#__PURE__*/_createClass(function StorageSharedKeyCredential() {
  _classCallCheck(this, StorageSharedKeyCredential);
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CredentialPolicy = void 0;
var _RequestPolicy = require("./RequestPolicy");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Credential policy used to sign HTTP(S) requests before sending. This is an
 * abstract class.
 */
var CredentialPolicy = exports.CredentialPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
  function CredentialPolicy() {
    _classCallCheck(this, CredentialPolicy);
    return _callSuper(this, CredentialPolicy, arguments);
  }
  _inherits(CredentialPolicy, _BaseRequestPolicy);
  return _createClass(CredentialPolicy, [{
    key: "sendRequest",
    value:
    /**
     * Sends out request.
     *
     * @param request -
     */
    function sendRequest(request) {
      return this._nextPolicy.sendRequest(this.signRequest(request));
    }
    /**
     * Child classes must implement this method with request signing. This method
     * will be executed in {@link sendRequest}.
     *
     * @param request -
     */
  }, {
    key: "signRequest",
    value: function signRequest(request) {
      // Child classes must override this method with request signing. This method
      // will be executed in sendRequest().
      return request;
    }
  }]);
}(_RequestPolicy.BaseRequestPolicy);
},{"./RequestPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousCredentialPolicy = void 0;
var _CredentialPolicy2 = require("./CredentialPolicy");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
 * or for use with Shared Access Signatures (SAS).
 */
var AnonymousCredentialPolicy = exports.AnonymousCredentialPolicy = /*#__PURE__*/function (_CredentialPolicy) {
  /**
   * Creates an instance of AnonymousCredentialPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  function AnonymousCredentialPolicy(nextPolicy, options) {
    _classCallCheck(this, AnonymousCredentialPolicy);
    return _callSuper(this, AnonymousCredentialPolicy, [nextPolicy, options]);
  }
  _inherits(AnonymousCredentialPolicy, _CredentialPolicy);
  return _createClass(AnonymousCredentialPolicy);
}(_CredentialPolicy2.CredentialPolicy);
},{"./CredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Credential = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Credential is an abstract class for Azure Storage HTTP requests signing. This
 * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
 */
var Credential = exports.Credential = /*#__PURE__*/function () {
  function Credential() {
    _classCallCheck(this, Credential);
  }
  return _createClass(Credential, [{
    key: "create",
    value:
    /**
     * Creates a RequestPolicy object.
     *
     * @param _nextPolicy -
     * @param _options -
     */
    function create(_nextPolicy, _options) {
      throw new Error("Method should be implemented in children classes.");
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousCredential = void 0;
var _AnonymousCredentialPolicy = require("../policies/AnonymousCredentialPolicy");
var _Credential2 = require("./Credential");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * AnonymousCredential provides a credentialPolicyCreator member used to create
 * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with
 * HTTP(S) requests that read public resources or for use with Shared Access
 * Signatures (SAS).
 */
var AnonymousCredential = exports.AnonymousCredential = /*#__PURE__*/function (_Credential) {
  function AnonymousCredential() {
    _classCallCheck(this, AnonymousCredential);
    return _callSuper(this, AnonymousCredential, arguments);
  }
  _inherits(AnonymousCredential, _Credential);
  return _createClass(AnonymousCredential, [{
    key: "create",
    value:
    /**
     * Creates an {@link AnonymousCredentialPolicy} object.
     *
     * @param nextPolicy -
     * @param options -
     */
    function create(nextPolicy, options) {
      return new _AnonymousCredentialPolicy.AnonymousCredentialPolicy(nextPolicy, options);
    }
  }]);
}(_Credential2.Credential);
},{"../policies/AnonymousCredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","./Credential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

var _defaultHttpClient;
function getCachedDefaultHttpClient() {
  if (!_defaultHttpClient) {
    _defaultHttpClient = (0, _coreRestPipeline.createDefaultHttpClient)();
  }
  return _defaultHttpClient;
}
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storageBrowserPolicy = storageBrowserPolicy;
exports.storageBrowserPolicyName = void 0;
var _coreUtil = require("@azure/core-util");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the StorageBrowserPolicy.
 */
var storageBrowserPolicyName = exports.storageBrowserPolicyName = "storageBrowserPolicy";
/**
 * storageBrowserPolicy is a policy used to prevent browsers from caching requests
 * and to remove cookies and explicit content-length headers.
 */
function storageBrowserPolicy() {
  return {
    name: storageBrowserPolicyName,
    sendRequest: function sendRequest(request, next) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_coreUtil.isNode) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", next(request));
            case 2:
              if (request.method === "GET" || request.method === "HEAD") {
                request.url = (0, _utils.setURLParameter)(request.url, _constants.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
              }
              request.headers.delete(_constants.HeaderConstants.COOKIE);
              // According to XHR standards, content-length should be fully controlled by browsers
              request.headers.delete(_constants.HeaderConstants.CONTENT_LENGTH);
              return _context.abrupt("return", next(request));
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
    }
  };
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageRetryPolicyType = void 0;
exports.storageRetryPolicy = storageRetryPolicy;
exports.storageRetryPolicyName = void 0;
var _abortController = require("@azure/abort-controller");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreUtil = require("@azure/core-util");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
var _log = require("../log");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Name of the {@link storageRetryPolicy}
 */
var storageRetryPolicyName = exports.storageRetryPolicyName = "storageRetryPolicy";
/**
 * RetryPolicy types.
 */
var StorageRetryPolicyType;
(function (StorageRetryPolicyType) {
  /**
   * Exponential retry. Retry time delay grows exponentially.
   */
  StorageRetryPolicyType[StorageRetryPolicyType["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  /**
   * Linear retry. Retry time delay grows linearly.
   */
  StorageRetryPolicyType[StorageRetryPolicyType["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (exports.StorageRetryPolicyType = StorageRetryPolicyType = {}));
// Default values of StorageRetryOptions
var DEFAULT_RETRY_OPTIONS = {
  maxRetryDelayInMs: 120 * 1000,
  maxTries: 4,
  retryDelayInMs: 4 * 1000,
  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: undefined // Use server side default timeout strategy
};
var retriableErrors = ["ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR"];
var RETRY_ABORT_ERROR = new _abortController.AbortError("The operation was aborted.");
/**
 * Retry policy with exponential retry and linear retry implemented.
 */
function storageRetryPolicy() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _a, _b, _c, _d, _e, _f;
  var retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;
  var maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;
  var retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;
  var maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;
  var secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;
  var tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;
  function shouldRetry(_ref) {
    var isPrimaryRetry = _ref.isPrimaryRetry,
      attempt = _ref.attempt,
      response = _ref.response,
      error = _ref.error;
    var _a, _b;
    if (attempt >= maxTries) {
      _log.logger.info("RetryPolicy: Attempt(s) ".concat(attempt, " >= maxTries ").concat(maxTries, ", no further try."));
      return false;
    }
    if (error) {
      var _iterator = _createForOfIteratorHelper(retriableErrors),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var retriableError = _step.value;
          if (error.name.toUpperCase().includes(retriableError) || error.message.toUpperCase().includes(retriableError) || error.code && error.code.toString().toUpperCase() === retriableError) {
            _log.logger.info("RetryPolicy: Network error ".concat(retriableError, " found, will retry."));
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if ((error === null || error === void 0 ? void 0 : error.code) === "PARSE_ERROR" && (error === null || error === void 0 ? void 0 : error.message.startsWith("Error \"Error: Unclosed root tag"))) {
        _log.logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
        return true;
      }
    }
    // If attempt was against the secondary & it returned a StatusNotFound (404), then
    // the resource was not found. This may be due to replication delay. So, in this
    // case, we'll never try the secondary again for this operation.
    if (response || error) {
      var statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;
      if (!isPrimaryRetry && statusCode === 404) {
        _log.logger.info("RetryPolicy: Secondary access with 404, will retry.");
        return true;
      }
      // Server internal error or server timeout
      if (statusCode === 503 || statusCode === 500) {
        _log.logger.info("RetryPolicy: Will retry for status code ".concat(statusCode, "."));
        return true;
      }
    }
    // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.
    // if (response) {
    //   // Retry select Copy Source Error Codes.
    //   if (response?.status >= 400) {
    //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);
    //     if (copySourceError !== undefined) {
    //       switch (copySourceError) {
    //         case "InternalError":
    //         case "OperationTimedOut":
    //         case "ServerBusy":
    //           return true;
    //       }
    //     }
    //   }
    // }
    return false;
  }
  function calculateDelay(isPrimaryRetry, attempt) {
    var delayTimeInMs = 0;
    if (isPrimaryRetry) {
      switch (retryPolicyType) {
        case StorageRetryPolicyType.EXPONENTIAL:
          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);
          break;
        case StorageRetryPolicyType.FIXED:
          delayTimeInMs = retryDelayInMs;
          break;
      }
    } else {
      delayTimeInMs = Math.random() * 1000;
    }
    _log.logger.info("RetryPolicy: Delay for ".concat(delayTimeInMs, "ms"));
    return delayTimeInMs;
  }
  return {
    name: storageRetryPolicyName,
    sendRequest: function sendRequest(request, next) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var primaryUrl, secondaryUrl, secondaryHas404, attempt, retryAgain, response, error, isPrimaryRetry;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              // Set the server-side timeout query parameter "timeout=[seconds]"
              if (tryTimeoutInMs) {
                request.url = (0, _utils.setURLParameter)(request.url, _constants.URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));
              }
              primaryUrl = request.url;
              secondaryUrl = secondaryHost ? (0, _utils.setURLHost)(request.url, secondaryHost) : undefined;
              secondaryHas404 = false;
              attempt = 1;
              retryAgain = true;
            case 6:
              if (!retryAgain) {
                _context.next = 35;
                break;
              }
              isPrimaryRetry = secondaryHas404 || !secondaryUrl || !["GET", "HEAD", "OPTIONS"].includes(request.method) || attempt % 2 === 1;
              request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;
              response = undefined;
              error = undefined;
              _context.prev = 11;
              _log.logger.info("RetryPolicy: =====> Try=".concat(attempt, " ").concat(isPrimaryRetry ? "Primary" : "Secondary"));
              _context.next = 15;
              return next(request);
            case 15:
              response = _context.sent;
              secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
              _context.next = 28;
              break;
            case 19:
              _context.prev = 19;
              _context.t0 = _context["catch"](11);
              if (!(0, _coreRestPipeline.isRestError)(_context.t0)) {
                _context.next = 26;
                break;
              }
              _log.logger.error("RetryPolicy: Caught error, message: ".concat(_context.t0.message, ", code: ").concat(_context.t0.code));
              error = _context.t0;
              _context.next = 28;
              break;
            case 26:
              _log.logger.error("RetryPolicy: Caught error, message: ".concat((0, _coreUtil.getErrorMessage)(_context.t0)));
              throw _context.t0;
            case 28:
              retryAgain = shouldRetry({
                isPrimaryRetry: isPrimaryRetry,
                attempt: attempt,
                response: response,
                error: error
              });
              if (!retryAgain) {
                _context.next = 32;
                break;
              }
              _context.next = 32;
              return (0, _utils.delay)(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);
            case 32:
              attempt++;
              _context.next = 6;
              break;
            case 35:
              if (!response) {
                _context.next = 37;
                break;
              }
              return _context.abrupt("return", response);
            case 37:
              throw error !== null && error !== void 0 ? error : new _coreRestPipeline.RestError("RetryPolicy failed without known error.");
            case 38:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[11, 19]]);
      }))();
    }
  };
}
},{"@azure/abort-controller":"node_modules/@azure/abort-controller/dist-esm/src/index.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","../log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storageSharedKeyCredentialPolicy = storageSharedKeyCredentialPolicy;
exports.storageSharedKeyCredentialPolicyName = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the storageSharedKeyCredentialPolicy.
 */
var storageSharedKeyCredentialPolicyName = exports.storageSharedKeyCredentialPolicyName = "storageSharedKeyCredentialPolicy";
/**
 * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.
 */
function storageSharedKeyCredentialPolicy(_options) {
  return {
    name: storageSharedKeyCredentialPolicyName,
    sendRequest: function sendRequest(request, next) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", next(request));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
    }
  };
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageBrowserPolicy = void 0;
var _RequestPolicy = require("./RequestPolicy");
var _coreUtil = require("@azure/core-util");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
 *
 * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
 * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
 * thus avoid the browser cache.
 *
 * 2. Remove cookie header for security
 *
 * 3. Remove content-length header to avoid browsers warning
 */
var StorageBrowserPolicy = exports.StorageBrowserPolicy = /*#__PURE__*/function (_BaseRequestPolicy) {
  /**
   * Creates an instance of StorageBrowserPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  function StorageBrowserPolicy(nextPolicy, options) {
    _classCallCheck(this, StorageBrowserPolicy);
    return _callSuper(this, StorageBrowserPolicy, [nextPolicy, options]);
  }
  /**
   * Sends out request.
   *
   * @param request -
   */
  _inherits(StorageBrowserPolicy, _BaseRequestPolicy);
  return _createClass(StorageBrowserPolicy, [{
    key: "sendRequest",
    value: (function () {
      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!_coreUtil.isNode) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return", this._nextPolicy.sendRequest(request));
            case 2:
              if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") {
                request.url = (0, _utils.setURLParameter)(request.url, _constants.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
              }
              request.headers.remove(_constants.HeaderConstants.COOKIE);
              // According to XHR standards, content-length should be fully controlled by browsers
              request.headers.remove(_constants.HeaderConstants.CONTENT_LENGTH);
              return _context.abrupt("return", this._nextPolicy.sendRequest(request));
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function sendRequest(_x) {
        return _sendRequest.apply(this, arguments);
      }
      return sendRequest;
    }())
  }]);
}(_RequestPolicy.BaseRequestPolicy);
},{"./RequestPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StorageBrowserPolicy", {
  enumerable: true,
  get: function () {
    return _StorageBrowserPolicy.StorageBrowserPolicy;
  }
});
exports.StorageBrowserPolicyFactory = void 0;
var _StorageBrowserPolicy = require("./policies/StorageBrowserPolicy");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.
 */
var StorageBrowserPolicyFactory = exports.StorageBrowserPolicyFactory = /*#__PURE__*/function () {
  function StorageBrowserPolicyFactory() {
    _classCallCheck(this, StorageBrowserPolicyFactory);
  }
  return _createClass(StorageBrowserPolicyFactory, [{
    key: "create",
    value:
    /**
     * Creates a StorageBrowserPolicyFactory object.
     *
     * @param nextPolicy -
     * @param options -
     */
    function create(nextPolicy, options) {
      return new _StorageBrowserPolicy.StorageBrowserPolicy(nextPolicy, options);
    }
  }]);
}();
},{"./policies/StorageBrowserPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storageCorrectContentLengthPolicy = storageCorrectContentLengthPolicy;
exports.storageCorrectContentLengthPolicyName = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The programmatic identifier of the storageCorrectContentLengthPolicy.
 */
var storageCorrectContentLengthPolicyName = exports.storageCorrectContentLengthPolicyName = "StorageCorrectContentLengthPolicy";
/**
 * storageCorrectContentLengthPolicy to correctly set Content-Length header with request body length.
 */
function storageCorrectContentLengthPolicy() {
  return {
    name: storageCorrectContentLengthPolicyName,
    sendRequest: function sendRequest(request, next) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", next(request));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
    }
  };
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pipeline = void 0;
Object.defineProperty(exports, "StorageOAuthScopes", {
  enumerable: true,
  get: function () {
    return _constants.StorageOAuthScopes;
  }
});
exports.getCoreClientOptions = getCoreClientOptions;
exports.getCredentialFromPipeline = getCredentialFromPipeline;
exports.isPipelineLike = isPipelineLike;
exports.newPipeline = newPipeline;
var _tslib = require("tslib");
var _coreHttpCompat = require("@azure/core-http-compat");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreClient = require("@azure/core-client");
var _coreXml = require("@azure/core-xml");
var _coreAuth = require("@azure/core-auth");
var _log = require("./log");
var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");
var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _constants = require("./utils/constants");
var _cache = require("./utils/cache");
var _StorageBrowserPolicyV = require("./policies/StorageBrowserPolicyV2");
var _StorageRetryPolicyV = require("./policies/StorageRetryPolicyV2");
var _StorageSharedKeyCredentialPolicyV = require("./policies/StorageSharedKeyCredentialPolicyV2");
var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");
var _StorageCorrectContentLengthPolicy = require("./policies/StorageCorrectContentLengthPolicy");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Export following interfaces and types for customers who want to implement their
// own RequestPolicy or HTTPClient
/**
 * A helper to decide if a given argument satisfies the Pipeline contract
 * @param pipeline - An argument that may be a Pipeline
 * @returns true when the argument satisfies the Pipeline contract
 */
function isPipelineLike(pipeline) {
  if (!pipeline || _typeof(pipeline) !== "object") {
    return false;
  }
  var castPipeline = pipeline;
  return Array.isArray(castPipeline.factories) && _typeof(castPipeline.options) === "object" && typeof castPipeline.toServiceClientOptions === "function";
}
/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling {@link newPipeline}.
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 *
 * Refer to {@link newPipeline} and provided policies before implementing your
 * customized Pipeline.
 */
var Pipeline = exports.Pipeline = /*#__PURE__*/function () {
  /**
   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
   *
   * @param factories -
   * @param options -
   */
  function Pipeline(factories) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Pipeline);
    this.factories = factories;
    this.options = options;
  }
  /**
   * Transfer Pipeline object to ServiceClientOptions object which is required by
   * ServiceClient constructor.
   *
   * @returns The ServiceClientOptions object from this Pipeline.
   */
  return _createClass(Pipeline, [{
    key: "toServiceClientOptions",
    value: function toServiceClientOptions() {
      return {
        httpClient: this.options.httpClient,
        requestPolicyFactories: this.factories
      };
    }
  }]);
}();
/**
 * Creates a new Pipeline object with Credential provided.
 *
 * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
 * @param pipelineOptions - Optional. Options.
 * @returns A new Pipeline object.
 */
function newPipeline(credential) {
  var pipelineOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!credential) {
    credential = new _AnonymousCredential.AnonymousCredential();
  }
  var pipeline = new Pipeline([], pipelineOptions);
  pipeline._credential = credential;
  return pipeline;
}
function processDownlevelPipeline(pipeline) {
  var knownFactoryFunctions = [isAnonymousCredential, isStorageSharedKeyCredential, isCoreHttpBearerTokenFactory, isStorageBrowserPolicyFactory, isStorageRetryPolicyFactory, isStorageTelemetryPolicyFactory, isCoreHttpPolicyFactory];
  if (pipeline.factories.length) {
    var novelFactories = pipeline.factories.filter(function (factory) {
      return !knownFactoryFunctions.some(function (knownFactory) {
        return knownFactory(factory);
      });
    });
    if (novelFactories.length) {
      var hasInjector = novelFactories.some(function (factory) {
        return isInjectorPolicyFactory(factory);
      });
      // if there are any left over, wrap in a requestPolicyFactoryPolicy
      return {
        wrappedPolicies: (0, _coreHttpCompat.createRequestPolicyFactoryPolicy)(novelFactories),
        afterRetry: hasInjector
      };
    }
  }
  return undefined;
}
function getCoreClientOptions(pipeline) {
  var _a;
  var _b = pipeline.options,
    v1Client = _b.httpClient,
    restOptions = (0, _tslib.__rest)(_b, ["httpClient"]);
  var httpClient = pipeline._coreHttpClient;
  if (!httpClient) {
    httpClient = v1Client ? (0, _coreHttpCompat.convertHttpClient)(v1Client) : (0, _cache.getCachedDefaultHttpClient)();
    pipeline._coreHttpClient = httpClient;
  }
  var corePipeline = pipeline._corePipeline;
  if (!corePipeline) {
    var packageDetails = "azsdk-js-azure-storage-blob/".concat(_constants.SDK_VERSION);
    var userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix ? "".concat(restOptions.userAgentOptions.userAgentPrefix, " ").concat(packageDetails) : "".concat(packageDetails);
    corePipeline = (0, _coreClient.createClientPipeline)(Object.assign(Object.assign({}, restOptions), {
      loggingOptions: {
        additionalAllowedHeaderNames: _constants.StorageBlobLoggingAllowedHeaderNames,
        additionalAllowedQueryParameters: _constants.StorageBlobLoggingAllowedQueryParameters,
        logger: _log.logger.info
      },
      userAgentOptions: {
        userAgentPrefix: userAgentPrefix
      },
      serializationOptions: {
        stringifyXML: _coreXml.stringifyXML,
        serializerOptions: {
          xml: {
            // Use customized XML char key of "#" so we can deserialize metadata
            // with "_" key
            xmlCharKey: "#"
          }
        }
      },
      deserializationOptions: {
        parseXML: _coreXml.parseXML,
        serializerOptions: {
          xml: {
            // Use customized XML char key of "#" so we can deserialize metadata
            // with "_" key
            xmlCharKey: "#"
          }
        }
      }
    }));
    corePipeline.removePolicy({
      phase: "Retry"
    });
    corePipeline.removePolicy({
      name: _coreRestPipeline.decompressResponsePolicyName
    });
    corePipeline.addPolicy((0, _StorageCorrectContentLengthPolicy.storageCorrectContentLengthPolicy)());
    corePipeline.addPolicy((0, _StorageRetryPolicyV.storageRetryPolicy)(restOptions.retryOptions), {
      phase: "Retry"
    });
    corePipeline.addPolicy((0, _StorageBrowserPolicyV.storageBrowserPolicy)());
    var downlevelResults = processDownlevelPipeline(pipeline);
    if (downlevelResults) {
      corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? {
        afterPhase: "Retry"
      } : undefined);
    }
    var credential = getCredentialFromPipeline(pipeline);
    if ((0, _coreAuth.isTokenCredential)(credential)) {
      corePipeline.addPolicy((0, _coreRestPipeline.bearerTokenAuthenticationPolicy)({
        credential: credential,
        scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : _constants.StorageOAuthScopes,
        challengeCallbacks: {
          authorizeRequestOnChallenge: _coreClient.authorizeRequestOnTenantChallenge
        }
      }), {
        phase: "Sign"
      });
    } else if (credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential) {
      corePipeline.addPolicy((0, _StorageSharedKeyCredentialPolicyV.storageSharedKeyCredentialPolicy)({
        accountName: credential.accountName,
        accountKey: credential.accountKey
      }), {
        phase: "Sign"
      });
    }
    pipeline._corePipeline = corePipeline;
  }
  return Object.assign(Object.assign({}, restOptions), {
    allowInsecureConnection: true,
    httpClient: httpClient,
    pipeline: corePipeline
  });
}
function getCredentialFromPipeline(pipeline) {
  // see if we squirreled one away on the type itself
  if (pipeline._credential) {
    return pipeline._credential;
  }
  // if it came from another package, loop over the factories and look for one like before
  var credential = new _AnonymousCredential.AnonymousCredential();
  var _iterator = _createForOfIteratorHelper(pipeline.factories),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var factory = _step.value;
      if ((0, _coreAuth.isTokenCredential)(factory.credential)) {
        // Only works if the factory has been attached a "credential" property.
        // We do that in newPipeline() when using TokenCredential.
        credential = factory.credential;
      } else if (isStorageSharedKeyCredential(factory)) {
        return factory;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return credential;
}
function isStorageSharedKeyCredential(factory) {
  if (factory instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential) {
    return true;
  }
  return factory.constructor.name === "StorageSharedKeyCredential";
}
function isAnonymousCredential(factory) {
  if (factory instanceof _AnonymousCredential.AnonymousCredential) {
    return true;
  }
  return factory.constructor.name === "AnonymousCredential";
}
function isCoreHttpBearerTokenFactory(factory) {
  return (0, _coreAuth.isTokenCredential)(factory.credential);
}
function isStorageBrowserPolicyFactory(factory) {
  if (factory instanceof _StorageBrowserPolicyFactory.StorageBrowserPolicyFactory) {
    return true;
  }
  return factory.constructor.name === "StorageBrowserPolicyFactory";
}
function isStorageRetryPolicyFactory(factory) {
  if (factory instanceof _StorageRetryPolicyFactory.StorageRetryPolicyFactory) {
    return true;
  }
  return factory.constructor.name === "StorageRetryPolicyFactory";
}
function isStorageTelemetryPolicyFactory(factory) {
  return factory.constructor.name === "TelemetryPolicyFactory";
}
function isInjectorPolicyFactory(factory) {
  return factory.constructor.name === "InjectorPolicyFactory";
}
function isCoreHttpPolicyFactory(factory) {
  var knownPolicies = ["GenerateClientRequestIdPolicy", "TracingPolicy", "LogPolicy", "ProxyPolicy", "DisableResponseDecompressionPolicy", "KeepAlivePolicy", "DeserializationPolicy"];
  var mockHttpClient = {
    sendRequest: function () {
      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", {
                request: request,
                headers: request.headers.clone(),
                status: 500
              });
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function sendRequest(_x) {
        return _sendRequest.apply(this, arguments);
      }
      return sendRequest;
    }()
  };
  var mockRequestPolicyOptions = {
    log: function log(_logLevel, _message) {
      /* do nothing */
    },
    shouldLog: function shouldLog(_logLevel) {
      return false;
    }
  };
  var policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);
  var policyName = policyInstance.constructor.name;
  // bundlers sometimes add a custom suffix to the class name to make it unique
  return knownPolicies.some(function (knownPolicyName) {
    return policyName.startsWith(knownPolicyName);
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http-compat":"node_modules/@azure/core-http-compat/dist/browser/index.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","@azure/core-xml":"node_modules/@azure/core-xml/dist/browser/index.js","@azure/core-auth":"node_modules/@azure/core-auth/dist/browser/index.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js","./StorageRetryPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./utils/cache":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js","./policies/StorageBrowserPolicyV2":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js","./policies/StorageRetryPolicyV2":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js","./policies/StorageSharedKeyCredentialPolicyV2":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js","./StorageBrowserPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","./policies/StorageCorrectContentLengthPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownStorageErrorCode = exports.KnownEncryptionAlgorithmType = exports.KnownBlobExpiryOptions = void 0;
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link EncryptionAlgorithmType} that the service accepts. */
var KnownEncryptionAlgorithmType;
(function (KnownEncryptionAlgorithmType) {
  /** AES256 */
  KnownEncryptionAlgorithmType["AES256"] = "AES256";
})(KnownEncryptionAlgorithmType || (exports.KnownEncryptionAlgorithmType = KnownEncryptionAlgorithmType = {}));
/** Known values of {@link BlobExpiryOptions} that the service accepts. */
var KnownBlobExpiryOptions;
(function (KnownBlobExpiryOptions) {
  /** NeverExpire */
  KnownBlobExpiryOptions["NeverExpire"] = "NeverExpire";
  /** RelativeToCreation */
  KnownBlobExpiryOptions["RelativeToCreation"] = "RelativeToCreation";
  /** RelativeToNow */
  KnownBlobExpiryOptions["RelativeToNow"] = "RelativeToNow";
  /** Absolute */
  KnownBlobExpiryOptions["Absolute"] = "Absolute";
})(KnownBlobExpiryOptions || (exports.KnownBlobExpiryOptions = KnownBlobExpiryOptions = {}));
/** Known values of {@link StorageErrorCode} that the service accepts. */
var KnownStorageErrorCode;
(function (KnownStorageErrorCode) {
  /** AccountAlreadyExists */
  KnownStorageErrorCode["AccountAlreadyExists"] = "AccountAlreadyExists";
  /** AccountBeingCreated */
  KnownStorageErrorCode["AccountBeingCreated"] = "AccountBeingCreated";
  /** AccountIsDisabled */
  KnownStorageErrorCode["AccountIsDisabled"] = "AccountIsDisabled";
  /** AuthenticationFailed */
  KnownStorageErrorCode["AuthenticationFailed"] = "AuthenticationFailed";
  /** AuthorizationFailure */
  KnownStorageErrorCode["AuthorizationFailure"] = "AuthorizationFailure";
  /** ConditionHeadersNotSupported */
  KnownStorageErrorCode["ConditionHeadersNotSupported"] = "ConditionHeadersNotSupported";
  /** ConditionNotMet */
  KnownStorageErrorCode["ConditionNotMet"] = "ConditionNotMet";
  /** EmptyMetadataKey */
  KnownStorageErrorCode["EmptyMetadataKey"] = "EmptyMetadataKey";
  /** InsufficientAccountPermissions */
  KnownStorageErrorCode["InsufficientAccountPermissions"] = "InsufficientAccountPermissions";
  /** InternalError */
  KnownStorageErrorCode["InternalError"] = "InternalError";
  /** InvalidAuthenticationInfo */
  KnownStorageErrorCode["InvalidAuthenticationInfo"] = "InvalidAuthenticationInfo";
  /** InvalidHeaderValue */
  KnownStorageErrorCode["InvalidHeaderValue"] = "InvalidHeaderValue";
  /** InvalidHttpVerb */
  KnownStorageErrorCode["InvalidHttpVerb"] = "InvalidHttpVerb";
  /** InvalidInput */
  KnownStorageErrorCode["InvalidInput"] = "InvalidInput";
  /** InvalidMd5 */
  KnownStorageErrorCode["InvalidMd5"] = "InvalidMd5";
  /** InvalidMetadata */
  KnownStorageErrorCode["InvalidMetadata"] = "InvalidMetadata";
  /** InvalidQueryParameterValue */
  KnownStorageErrorCode["InvalidQueryParameterValue"] = "InvalidQueryParameterValue";
  /** InvalidRange */
  KnownStorageErrorCode["InvalidRange"] = "InvalidRange";
  /** InvalidResourceName */
  KnownStorageErrorCode["InvalidResourceName"] = "InvalidResourceName";
  /** InvalidUri */
  KnownStorageErrorCode["InvalidUri"] = "InvalidUri";
  /** InvalidXmlDocument */
  KnownStorageErrorCode["InvalidXmlDocument"] = "InvalidXmlDocument";
  /** InvalidXmlNodeValue */
  KnownStorageErrorCode["InvalidXmlNodeValue"] = "InvalidXmlNodeValue";
  /** Md5Mismatch */
  KnownStorageErrorCode["Md5Mismatch"] = "Md5Mismatch";
  /** MetadataTooLarge */
  KnownStorageErrorCode["MetadataTooLarge"] = "MetadataTooLarge";
  /** MissingContentLengthHeader */
  KnownStorageErrorCode["MissingContentLengthHeader"] = "MissingContentLengthHeader";
  /** MissingRequiredQueryParameter */
  KnownStorageErrorCode["MissingRequiredQueryParameter"] = "MissingRequiredQueryParameter";
  /** MissingRequiredHeader */
  KnownStorageErrorCode["MissingRequiredHeader"] = "MissingRequiredHeader";
  /** MissingRequiredXmlNode */
  KnownStorageErrorCode["MissingRequiredXmlNode"] = "MissingRequiredXmlNode";
  /** MultipleConditionHeadersNotSupported */
  KnownStorageErrorCode["MultipleConditionHeadersNotSupported"] = "MultipleConditionHeadersNotSupported";
  /** OperationTimedOut */
  KnownStorageErrorCode["OperationTimedOut"] = "OperationTimedOut";
  /** OutOfRangeInput */
  KnownStorageErrorCode["OutOfRangeInput"] = "OutOfRangeInput";
  /** OutOfRangeQueryParameterValue */
  KnownStorageErrorCode["OutOfRangeQueryParameterValue"] = "OutOfRangeQueryParameterValue";
  /** RequestBodyTooLarge */
  KnownStorageErrorCode["RequestBodyTooLarge"] = "RequestBodyTooLarge";
  /** ResourceTypeMismatch */
  KnownStorageErrorCode["ResourceTypeMismatch"] = "ResourceTypeMismatch";
  /** RequestUrlFailedToParse */
  KnownStorageErrorCode["RequestUrlFailedToParse"] = "RequestUrlFailedToParse";
  /** ResourceAlreadyExists */
  KnownStorageErrorCode["ResourceAlreadyExists"] = "ResourceAlreadyExists";
  /** ResourceNotFound */
  KnownStorageErrorCode["ResourceNotFound"] = "ResourceNotFound";
  /** ServerBusy */
  KnownStorageErrorCode["ServerBusy"] = "ServerBusy";
  /** UnsupportedHeader */
  KnownStorageErrorCode["UnsupportedHeader"] = "UnsupportedHeader";
  /** UnsupportedXmlNode */
  KnownStorageErrorCode["UnsupportedXmlNode"] = "UnsupportedXmlNode";
  /** UnsupportedQueryParameter */
  KnownStorageErrorCode["UnsupportedQueryParameter"] = "UnsupportedQueryParameter";
  /** UnsupportedHttpVerb */
  KnownStorageErrorCode["UnsupportedHttpVerb"] = "UnsupportedHttpVerb";
  /** AppendPositionConditionNotMet */
  KnownStorageErrorCode["AppendPositionConditionNotMet"] = "AppendPositionConditionNotMet";
  /** BlobAlreadyExists */
  KnownStorageErrorCode["BlobAlreadyExists"] = "BlobAlreadyExists";
  /** BlobImmutableDueToPolicy */
  KnownStorageErrorCode["BlobImmutableDueToPolicy"] = "BlobImmutableDueToPolicy";
  /** BlobNotFound */
  KnownStorageErrorCode["BlobNotFound"] = "BlobNotFound";
  /** BlobOverwritten */
  KnownStorageErrorCode["BlobOverwritten"] = "BlobOverwritten";
  /** BlobTierInadequateForContentLength */
  KnownStorageErrorCode["BlobTierInadequateForContentLength"] = "BlobTierInadequateForContentLength";
  /** BlobUsesCustomerSpecifiedEncryption */
  KnownStorageErrorCode["BlobUsesCustomerSpecifiedEncryption"] = "BlobUsesCustomerSpecifiedEncryption";
  /** BlockCountExceedsLimit */
  KnownStorageErrorCode["BlockCountExceedsLimit"] = "BlockCountExceedsLimit";
  /** BlockListTooLong */
  KnownStorageErrorCode["BlockListTooLong"] = "BlockListTooLong";
  /** CannotChangeToLowerTier */
  KnownStorageErrorCode["CannotChangeToLowerTier"] = "CannotChangeToLowerTier";
  /** CannotVerifyCopySource */
  KnownStorageErrorCode["CannotVerifyCopySource"] = "CannotVerifyCopySource";
  /** ContainerAlreadyExists */
  KnownStorageErrorCode["ContainerAlreadyExists"] = "ContainerAlreadyExists";
  /** ContainerBeingDeleted */
  KnownStorageErrorCode["ContainerBeingDeleted"] = "ContainerBeingDeleted";
  /** ContainerDisabled */
  KnownStorageErrorCode["ContainerDisabled"] = "ContainerDisabled";
  /** ContainerNotFound */
  KnownStorageErrorCode["ContainerNotFound"] = "ContainerNotFound";
  /** ContentLengthLargerThanTierLimit */
  KnownStorageErrorCode["ContentLengthLargerThanTierLimit"] = "ContentLengthLargerThanTierLimit";
  /** CopyAcrossAccountsNotSupported */
  KnownStorageErrorCode["CopyAcrossAccountsNotSupported"] = "CopyAcrossAccountsNotSupported";
  /** CopyIdMismatch */
  KnownStorageErrorCode["CopyIdMismatch"] = "CopyIdMismatch";
  /** FeatureVersionMismatch */
  KnownStorageErrorCode["FeatureVersionMismatch"] = "FeatureVersionMismatch";
  /** IncrementalCopyBlobMismatch */
  KnownStorageErrorCode["IncrementalCopyBlobMismatch"] = "IncrementalCopyBlobMismatch";
  /** IncrementalCopyOfEarlierVersionSnapshotNotAllowed */
  KnownStorageErrorCode["IncrementalCopyOfEarlierVersionSnapshotNotAllowed"] = "IncrementalCopyOfEarlierVersionSnapshotNotAllowed";
  /** IncrementalCopySourceMustBeSnapshot */
  KnownStorageErrorCode["IncrementalCopySourceMustBeSnapshot"] = "IncrementalCopySourceMustBeSnapshot";
  /** InfiniteLeaseDurationRequired */
  KnownStorageErrorCode["InfiniteLeaseDurationRequired"] = "InfiniteLeaseDurationRequired";
  /** InvalidBlobOrBlock */
  KnownStorageErrorCode["InvalidBlobOrBlock"] = "InvalidBlobOrBlock";
  /** InvalidBlobTier */
  KnownStorageErrorCode["InvalidBlobTier"] = "InvalidBlobTier";
  /** InvalidBlobType */
  KnownStorageErrorCode["InvalidBlobType"] = "InvalidBlobType";
  /** InvalidBlockId */
  KnownStorageErrorCode["InvalidBlockId"] = "InvalidBlockId";
  /** InvalidBlockList */
  KnownStorageErrorCode["InvalidBlockList"] = "InvalidBlockList";
  /** InvalidOperation */
  KnownStorageErrorCode["InvalidOperation"] = "InvalidOperation";
  /** InvalidPageRange */
  KnownStorageErrorCode["InvalidPageRange"] = "InvalidPageRange";
  /** InvalidSourceBlobType */
  KnownStorageErrorCode["InvalidSourceBlobType"] = "InvalidSourceBlobType";
  /** InvalidSourceBlobUrl */
  KnownStorageErrorCode["InvalidSourceBlobUrl"] = "InvalidSourceBlobUrl";
  /** InvalidVersionForPageBlobOperation */
  KnownStorageErrorCode["InvalidVersionForPageBlobOperation"] = "InvalidVersionForPageBlobOperation";
  /** LeaseAlreadyPresent */
  KnownStorageErrorCode["LeaseAlreadyPresent"] = "LeaseAlreadyPresent";
  /** LeaseAlreadyBroken */
  KnownStorageErrorCode["LeaseAlreadyBroken"] = "LeaseAlreadyBroken";
  /** LeaseIdMismatchWithBlobOperation */
  KnownStorageErrorCode["LeaseIdMismatchWithBlobOperation"] = "LeaseIdMismatchWithBlobOperation";
  /** LeaseIdMismatchWithContainerOperation */
  KnownStorageErrorCode["LeaseIdMismatchWithContainerOperation"] = "LeaseIdMismatchWithContainerOperation";
  /** LeaseIdMismatchWithLeaseOperation */
  KnownStorageErrorCode["LeaseIdMismatchWithLeaseOperation"] = "LeaseIdMismatchWithLeaseOperation";
  /** LeaseIdMissing */
  KnownStorageErrorCode["LeaseIdMissing"] = "LeaseIdMissing";
  /** LeaseIsBreakingAndCannotBeAcquired */
  KnownStorageErrorCode["LeaseIsBreakingAndCannotBeAcquired"] = "LeaseIsBreakingAndCannotBeAcquired";
  /** LeaseIsBreakingAndCannotBeChanged */
  KnownStorageErrorCode["LeaseIsBreakingAndCannotBeChanged"] = "LeaseIsBreakingAndCannotBeChanged";
  /** LeaseIsBrokenAndCannotBeRenewed */
  KnownStorageErrorCode["LeaseIsBrokenAndCannotBeRenewed"] = "LeaseIsBrokenAndCannotBeRenewed";
  /** LeaseLost */
  KnownStorageErrorCode["LeaseLost"] = "LeaseLost";
  /** LeaseNotPresentWithBlobOperation */
  KnownStorageErrorCode["LeaseNotPresentWithBlobOperation"] = "LeaseNotPresentWithBlobOperation";
  /** LeaseNotPresentWithContainerOperation */
  KnownStorageErrorCode["LeaseNotPresentWithContainerOperation"] = "LeaseNotPresentWithContainerOperation";
  /** LeaseNotPresentWithLeaseOperation */
  KnownStorageErrorCode["LeaseNotPresentWithLeaseOperation"] = "LeaseNotPresentWithLeaseOperation";
  /** MaxBlobSizeConditionNotMet */
  KnownStorageErrorCode["MaxBlobSizeConditionNotMet"] = "MaxBlobSizeConditionNotMet";
  /** NoAuthenticationInformation */
  KnownStorageErrorCode["NoAuthenticationInformation"] = "NoAuthenticationInformation";
  /** NoPendingCopyOperation */
  KnownStorageErrorCode["NoPendingCopyOperation"] = "NoPendingCopyOperation";
  /** OperationNotAllowedOnIncrementalCopyBlob */
  KnownStorageErrorCode["OperationNotAllowedOnIncrementalCopyBlob"] = "OperationNotAllowedOnIncrementalCopyBlob";
  /** PendingCopyOperation */
  KnownStorageErrorCode["PendingCopyOperation"] = "PendingCopyOperation";
  /** PreviousSnapshotCannotBeNewer */
  KnownStorageErrorCode["PreviousSnapshotCannotBeNewer"] = "PreviousSnapshotCannotBeNewer";
  /** PreviousSnapshotNotFound */
  KnownStorageErrorCode["PreviousSnapshotNotFound"] = "PreviousSnapshotNotFound";
  /** PreviousSnapshotOperationNotSupported */
  KnownStorageErrorCode["PreviousSnapshotOperationNotSupported"] = "PreviousSnapshotOperationNotSupported";
  /** SequenceNumberConditionNotMet */
  KnownStorageErrorCode["SequenceNumberConditionNotMet"] = "SequenceNumberConditionNotMet";
  /** SequenceNumberIncrementTooLarge */
  KnownStorageErrorCode["SequenceNumberIncrementTooLarge"] = "SequenceNumberIncrementTooLarge";
  /** SnapshotCountExceeded */
  KnownStorageErrorCode["SnapshotCountExceeded"] = "SnapshotCountExceeded";
  /** SnapshotOperationRateExceeded */
  KnownStorageErrorCode["SnapshotOperationRateExceeded"] = "SnapshotOperationRateExceeded";
  /** SnapshotsPresent */
  KnownStorageErrorCode["SnapshotsPresent"] = "SnapshotsPresent";
  /** SourceConditionNotMet */
  KnownStorageErrorCode["SourceConditionNotMet"] = "SourceConditionNotMet";
  /** SystemInUse */
  KnownStorageErrorCode["SystemInUse"] = "SystemInUse";
  /** TargetConditionNotMet */
  KnownStorageErrorCode["TargetConditionNotMet"] = "TargetConditionNotMet";
  /** UnauthorizedBlobOverwrite */
  KnownStorageErrorCode["UnauthorizedBlobOverwrite"] = "UnauthorizedBlobOverwrite";
  /** BlobBeingRehydrated */
  KnownStorageErrorCode["BlobBeingRehydrated"] = "BlobBeingRehydrated";
  /** BlobArchived */
  KnownStorageErrorCode["BlobArchived"] = "BlobArchived";
  /** BlobNotArchived */
  KnownStorageErrorCode["BlobNotArchived"] = "BlobNotArchived";
  /** AuthorizationSourceIPMismatch */
  KnownStorageErrorCode["AuthorizationSourceIPMismatch"] = "AuthorizationSourceIPMismatch";
  /** AuthorizationProtocolMismatch */
  KnownStorageErrorCode["AuthorizationProtocolMismatch"] = "AuthorizationProtocolMismatch";
  /** AuthorizationPermissionMismatch */
  KnownStorageErrorCode["AuthorizationPermissionMismatch"] = "AuthorizationPermissionMismatch";
  /** AuthorizationServiceMismatch */
  KnownStorageErrorCode["AuthorizationServiceMismatch"] = "AuthorizationServiceMismatch";
  /** AuthorizationResourceTypeMismatch */
  KnownStorageErrorCode["AuthorizationResourceTypeMismatch"] = "AuthorizationResourceTypeMismatch";
})(KnownStorageErrorCode || (exports.KnownStorageErrorCode = KnownStorageErrorCode = {}));
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerGetAccountInfoExceptionHeaders = exports.ContainerGetAccessPolicyHeaders = exports.ContainerGetAccessPolicyExceptionHeaders = exports.ContainerFilterBlobsHeaders = exports.ContainerFilterBlobsExceptionHeaders = exports.ContainerDeleteHeaders = exports.ContainerDeleteExceptionHeaders = exports.ContainerCreateHeaders = exports.ContainerCreateExceptionHeaders = exports.ContainerChangeLeaseHeaders = exports.ContainerChangeLeaseExceptionHeaders = exports.ContainerBreakLeaseHeaders = exports.ContainerBreakLeaseExceptionHeaders = exports.ContainerAcquireLeaseHeaders = exports.ContainerAcquireLeaseExceptionHeaders = exports.ClearRange = exports.BlockLookupList = exports.BlockList = exports.BlockBlobUploadHeaders = exports.BlockBlobUploadExceptionHeaders = exports.BlockBlobStageBlockHeaders = exports.BlockBlobStageBlockFromURLHeaders = exports.BlockBlobStageBlockFromURLExceptionHeaders = exports.BlockBlobStageBlockExceptionHeaders = exports.BlockBlobPutBlobFromUrlHeaders = exports.BlockBlobPutBlobFromUrlExceptionHeaders = exports.BlockBlobGetBlockListHeaders = exports.BlockBlobGetBlockListExceptionHeaders = exports.BlockBlobCommitBlockListHeaders = exports.BlockBlobCommitBlockListExceptionHeaders = exports.Block = exports.BlobUndeleteHeaders = exports.BlobUndeleteExceptionHeaders = exports.BlobTags = exports.BlobTag = exports.BlobStartCopyFromURLHeaders = exports.BlobStartCopyFromURLExceptionHeaders = exports.BlobSetTierHeaders = exports.BlobSetTierExceptionHeaders = exports.BlobSetTagsHeaders = exports.BlobSetTagsExceptionHeaders = exports.BlobSetMetadataHeaders = exports.BlobSetMetadataExceptionHeaders = exports.BlobSetLegalHoldHeaders = exports.BlobSetLegalHoldExceptionHeaders = exports.BlobSetImmutabilityPolicyHeaders = exports.BlobSetImmutabilityPolicyExceptionHeaders = exports.BlobSetHttpHeadersHeaders = exports.BlobSetHttpHeadersExceptionHeaders = exports.BlobSetExpiryHeaders = exports.BlobSetExpiryExceptionHeaders = exports.BlobServiceStatistics = exports.BlobServiceProperties = exports.BlobRenewLeaseHeaders = exports.BlobRenewLeaseExceptionHeaders = exports.BlobReleaseLeaseHeaders = exports.BlobReleaseLeaseExceptionHeaders = exports.BlobQueryHeaders = exports.BlobQueryExceptionHeaders = exports.BlobPropertiesInternal = exports.BlobPrefix = exports.BlobName = exports.BlobItemInternal = exports.BlobHierarchyListSegment = exports.BlobGetTagsHeaders = exports.BlobGetTagsExceptionHeaders = exports.BlobGetPropertiesHeaders = exports.BlobGetPropertiesExceptionHeaders = exports.BlobGetAccountInfoHeaders = exports.BlobGetAccountInfoExceptionHeaders = exports.BlobFlatListSegment = exports.BlobDownloadHeaders = exports.BlobDownloadExceptionHeaders = exports.BlobDeleteImmutabilityPolicyHeaders = exports.BlobDeleteImmutabilityPolicyExceptionHeaders = exports.BlobDeleteHeaders = exports.BlobDeleteExceptionHeaders = exports.BlobCreateSnapshotHeaders = exports.BlobCreateSnapshotExceptionHeaders = exports.BlobCopyFromURLHeaders = exports.BlobCopyFromURLExceptionHeaders = exports.BlobChangeLeaseHeaders = exports.BlobChangeLeaseExceptionHeaders = exports.BlobBreakLeaseHeaders = exports.BlobBreakLeaseExceptionHeaders = exports.BlobAcquireLeaseHeaders = exports.BlobAcquireLeaseExceptionHeaders = exports.BlobAbortCopyFromURLHeaders = exports.BlobAbortCopyFromURLExceptionHeaders = exports.ArrowField = exports.ArrowConfiguration = exports.AppendBlobSealHeaders = exports.AppendBlobSealExceptionHeaders = exports.AppendBlobCreateHeaders = exports.AppendBlobCreateExceptionHeaders = exports.AppendBlobAppendBlockHeaders = exports.AppendBlobAppendBlockFromUrlHeaders = exports.AppendBlobAppendBlockFromUrlExceptionHeaders = exports.AppendBlobAppendBlockExceptionHeaders = exports.AccessPolicy = void 0;
exports.UserDelegationKey = exports.StorageError = exports.StaticWebsite = exports.SignedIdentifier = exports.ServiceSubmitBatchHeaders = exports.ServiceSubmitBatchExceptionHeaders = exports.ServiceSetPropertiesHeaders = exports.ServiceSetPropertiesExceptionHeaders = exports.ServiceListContainersSegmentHeaders = exports.ServiceListContainersSegmentExceptionHeaders = exports.ServiceGetUserDelegationKeyHeaders = exports.ServiceGetUserDelegationKeyExceptionHeaders = exports.ServiceGetStatisticsHeaders = exports.ServiceGetStatisticsExceptionHeaders = exports.ServiceGetPropertiesHeaders = exports.ServiceGetPropertiesExceptionHeaders = exports.ServiceGetAccountInfoHeaders = exports.ServiceGetAccountInfoExceptionHeaders = exports.ServiceFilterBlobsHeaders = exports.ServiceFilterBlobsExceptionHeaders = exports.RetentionPolicy = exports.QuerySerialization = exports.QueryRequest = exports.QueryFormat = exports.PageRange = exports.PageList = exports.PageBlobUploadPagesHeaders = exports.PageBlobUploadPagesFromURLHeaders = exports.PageBlobUploadPagesFromURLExceptionHeaders = exports.PageBlobUploadPagesExceptionHeaders = exports.PageBlobUpdateSequenceNumberHeaders = exports.PageBlobUpdateSequenceNumberExceptionHeaders = exports.PageBlobResizeHeaders = exports.PageBlobResizeExceptionHeaders = exports.PageBlobGetPageRangesHeaders = exports.PageBlobGetPageRangesExceptionHeaders = exports.PageBlobGetPageRangesDiffHeaders = exports.PageBlobGetPageRangesDiffExceptionHeaders = exports.PageBlobCreateHeaders = exports.PageBlobCreateExceptionHeaders = exports.PageBlobCopyIncrementalHeaders = exports.PageBlobCopyIncrementalExceptionHeaders = exports.PageBlobClearPagesHeaders = exports.PageBlobClearPagesExceptionHeaders = exports.Metrics = exports.Logging = exports.ListContainersSegmentResponse = exports.ListBlobsHierarchySegmentResponse = exports.ListBlobsFlatSegmentResponse = exports.KeyInfo = exports.JsonTextConfiguration = exports.GeoReplication = exports.FilterBlobSegment = exports.FilterBlobItem = exports.DelimitedTextConfiguration = exports.CorsRule = exports.ContainerSubmitBatchHeaders = exports.ContainerSubmitBatchExceptionHeaders = exports.ContainerSetMetadataHeaders = exports.ContainerSetMetadataExceptionHeaders = exports.ContainerSetAccessPolicyHeaders = exports.ContainerSetAccessPolicyExceptionHeaders = exports.ContainerRestoreHeaders = exports.ContainerRestoreExceptionHeaders = exports.ContainerRenewLeaseHeaders = exports.ContainerRenewLeaseExceptionHeaders = exports.ContainerRenameHeaders = exports.ContainerRenameExceptionHeaders = exports.ContainerReleaseLeaseHeaders = exports.ContainerReleaseLeaseExceptionHeaders = exports.ContainerProperties = exports.ContainerListBlobHierarchySegmentHeaders = exports.ContainerListBlobHierarchySegmentExceptionHeaders = exports.ContainerListBlobFlatSegmentHeaders = exports.ContainerListBlobFlatSegmentExceptionHeaders = exports.ContainerItem = exports.ContainerGetPropertiesHeaders = exports.ContainerGetPropertiesExceptionHeaders = exports.ContainerGetAccountInfoHeaders = void 0;
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
var BlobServiceProperties = exports.BlobServiceProperties = {
  serializedName: "BlobServiceProperties",
  xmlName: "StorageServiceProperties",
  type: {
    name: "Composite",
    className: "BlobServiceProperties",
    modelProperties: {
      blobAnalyticsLogging: {
        serializedName: "Logging",
        xmlName: "Logging",
        type: {
          name: "Composite",
          className: "Logging"
        }
      },
      hourMetrics: {
        serializedName: "HourMetrics",
        xmlName: "HourMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      minuteMetrics: {
        serializedName: "MinuteMetrics",
        xmlName: "MinuteMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      cors: {
        serializedName: "Cors",
        xmlName: "Cors",
        xmlIsWrapped: true,
        xmlElementName: "CorsRule",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      },
      defaultServiceVersion: {
        serializedName: "DefaultServiceVersion",
        xmlName: "DefaultServiceVersion",
        type: {
          name: "String"
        }
      },
      deleteRetentionPolicy: {
        serializedName: "DeleteRetentionPolicy",
        xmlName: "DeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      staticWebsite: {
        serializedName: "StaticWebsite",
        xmlName: "StaticWebsite",
        type: {
          name: "Composite",
          className: "StaticWebsite"
        }
      }
    }
  }
};
var Logging = exports.Logging = {
  serializedName: "Logging",
  type: {
    name: "Composite",
    className: "Logging",
    modelProperties: {
      version: {
        serializedName: "Version",
        required: true,
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      deleteProperty: {
        serializedName: "Delete",
        required: true,
        xmlName: "Delete",
        type: {
          name: "Boolean"
        }
      },
      read: {
        serializedName: "Read",
        required: true,
        xmlName: "Read",
        type: {
          name: "Boolean"
        }
      },
      write: {
        serializedName: "Write",
        required: true,
        xmlName: "Write",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
var RetentionPolicy = exports.RetentionPolicy = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "Days",
        xmlName: "Days",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var Metrics = exports.Metrics = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      includeAPIs: {
        serializedName: "IncludeAPIs",
        xmlName: "IncludeAPIs",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
var CorsRule = exports.CorsRule = {
  serializedName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        serializedName: "AllowedOrigins",
        required: true,
        xmlName: "AllowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        serializedName: "AllowedMethods",
        required: true,
        xmlName: "AllowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        serializedName: "AllowedHeaders",
        required: true,
        xmlName: "AllowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        serializedName: "ExposedHeaders",
        required: true,
        xmlName: "ExposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "MaxAgeInSeconds",
        required: true,
        xmlName: "MaxAgeInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var StaticWebsite = exports.StaticWebsite = {
  serializedName: "StaticWebsite",
  type: {
    name: "Composite",
    className: "StaticWebsite",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      indexDocument: {
        serializedName: "IndexDocument",
        xmlName: "IndexDocument",
        type: {
          name: "String"
        }
      },
      errorDocument404Path: {
        serializedName: "ErrorDocument404Path",
        xmlName: "ErrorDocument404Path",
        type: {
          name: "String"
        }
      },
      defaultIndexDocumentPath: {
        serializedName: "DefaultIndexDocumentPath",
        xmlName: "DefaultIndexDocumentPath",
        type: {
          name: "String"
        }
      }
    }
  }
};
var StorageError = exports.StorageError = {
  serializedName: "StorageError",
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      message: {
        serializedName: "Message",
        xmlName: "Message",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "Code",
        xmlName: "Code",
        type: {
          name: "String"
        }
      },
      authenticationErrorDetail: {
        serializedName: "AuthenticationErrorDetail",
        xmlName: "AuthenticationErrorDetail",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobServiceStatistics = exports.BlobServiceStatistics = {
  serializedName: "BlobServiceStatistics",
  xmlName: "StorageServiceStats",
  type: {
    name: "Composite",
    className: "BlobServiceStatistics",
    modelProperties: {
      geoReplication: {
        serializedName: "GeoReplication",
        xmlName: "GeoReplication",
        type: {
          name: "Composite",
          className: "GeoReplication"
        }
      }
    }
  }
};
var GeoReplication = exports.GeoReplication = {
  serializedName: "GeoReplication",
  type: {
    name: "Composite",
    className: "GeoReplication",
    modelProperties: {
      status: {
        serializedName: "Status",
        required: true,
        xmlName: "Status",
        type: {
          name: "Enum",
          allowedValues: ["live", "bootstrap", "unavailable"]
        }
      },
      lastSyncOn: {
        serializedName: "LastSyncTime",
        required: true,
        xmlName: "LastSyncTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ListContainersSegmentResponse = exports.ListContainersSegmentResponse = {
  serializedName: "ListContainersSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListContainersSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      containerItems: {
        serializedName: "ContainerItems",
        required: true,
        xmlName: "Containers",
        xmlIsWrapped: true,
        xmlElementName: "Container",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerItem = exports.ContainerItem = {
  serializedName: "ContainerItem",
  xmlName: "Container",
  type: {
    name: "Composite",
    className: "ContainerItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "Deleted",
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "ContainerProperties"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
var ContainerProperties = exports.ContainerProperties = {
  serializedName: "ContainerProperties",
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      publicAccess: {
        serializedName: "PublicAccess",
        xmlName: "PublicAccess",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "HasImmutabilityPolicy",
        xmlName: "HasImmutabilityPolicy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "HasLegalHold",
        xmlName: "HasLegalHold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "DefaultEncryptionScope",
        xmlName: "DefaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      preventEncryptionScopeOverride: {
        serializedName: "DenyEncryptionScopeOverride",
        xmlName: "DenyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "ImmutableStorageWithVersioningEnabled",
        xmlName: "ImmutableStorageWithVersioningEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var KeyInfo = exports.KeyInfo = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        required: true,
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      }
    }
  }
};
var UserDelegationKey = exports.UserDelegationKey = {
  serializedName: "UserDelegationKey",
  type: {
    name: "Composite",
    className: "UserDelegationKey",
    modelProperties: {
      signedObjectId: {
        serializedName: "SignedOid",
        required: true,
        xmlName: "SignedOid",
        type: {
          name: "String"
        }
      },
      signedTenantId: {
        serializedName: "SignedTid",
        required: true,
        xmlName: "SignedTid",
        type: {
          name: "String"
        }
      },
      signedStartsOn: {
        serializedName: "SignedStart",
        required: true,
        xmlName: "SignedStart",
        type: {
          name: "String"
        }
      },
      signedExpiresOn: {
        serializedName: "SignedExpiry",
        required: true,
        xmlName: "SignedExpiry",
        type: {
          name: "String"
        }
      },
      signedService: {
        serializedName: "SignedService",
        required: true,
        xmlName: "SignedService",
        type: {
          name: "String"
        }
      },
      signedVersion: {
        serializedName: "SignedVersion",
        required: true,
        xmlName: "SignedVersion",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
var FilterBlobSegment = exports.FilterBlobSegment = {
  serializedName: "FilterBlobSegment",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "FilterBlobSegment",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      where: {
        serializedName: "Where",
        required: true,
        xmlName: "Where",
        type: {
          name: "String"
        }
      },
      blobs: {
        serializedName: "Blobs",
        required: true,
        xmlName: "Blobs",
        xmlIsWrapped: true,
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterBlobItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var FilterBlobItem = exports.FilterBlobItem = {
  serializedName: "FilterBlobItem",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "FilterBlobItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "Tags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      }
    }
  }
};
var BlobTags = exports.BlobTags = {
  serializedName: "BlobTags",
  xmlName: "Tags",
  type: {
    name: "Composite",
    className: "BlobTags",
    modelProperties: {
      blobTagSet: {
        serializedName: "BlobTagSet",
        required: true,
        xmlName: "TagSet",
        xmlIsWrapped: true,
        xmlElementName: "Tag",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobTag"
            }
          }
        }
      }
    }
  }
};
var BlobTag = exports.BlobTag = {
  serializedName: "BlobTag",
  xmlName: "Tag",
  type: {
    name: "Composite",
    className: "BlobTag",
    modelProperties: {
      key: {
        serializedName: "Key",
        required: true,
        xmlName: "Key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
var SignedIdentifier = exports.SignedIdentifier = {
  serializedName: "SignedIdentifier",
  xmlName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        serializedName: "Id",
        required: true,
        xmlName: "Id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        serializedName: "AccessPolicy",
        xmlName: "AccessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};
var AccessPolicy = exports.AccessPolicy = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "Permission",
        xmlName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ListBlobsFlatSegmentResponse = exports.ListBlobsFlatSegmentResponse = {
  serializedName: "ListBlobsFlatSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsFlatSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobFlatListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobFlatListSegment = exports.BlobFlatListSegment = {
  serializedName: "BlobFlatListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobFlatListSegment",
    modelProperties: {
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
var BlobItemInternal = exports.BlobItemInternal = {
  serializedName: "BlobItemInternal",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "BlobItemInternal",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      },
      deleted: {
        serializedName: "Deleted",
        required: true,
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      snapshot: {
        serializedName: "Snapshot",
        required: true,
        xmlName: "Snapshot",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "VersionId",
        xmlName: "VersionId",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "IsCurrentVersion",
        xmlName: "IsCurrentVersion",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "BlobPropertiesInternal"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTags: {
        serializedName: "BlobTags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      },
      objectReplicationMetadata: {
        serializedName: "ObjectReplicationMetadata",
        xmlName: "OrMetadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      hasVersionsOnly: {
        serializedName: "HasVersionsOnly",
        xmlName: "HasVersionsOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var BlobName = exports.BlobName = {
  serializedName: "BlobName",
  type: {
    name: "Composite",
    className: "BlobName",
    modelProperties: {
      encoded: {
        serializedName: "Encoded",
        xmlName: "Encoded",
        xmlIsAttribute: true,
        type: {
          name: "Boolean"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        xmlIsMsText: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobPropertiesInternal = exports.BlobPropertiesInternal = {
  serializedName: "BlobPropertiesInternal",
  xmlName: "Properties",
  type: {
    name: "Composite",
    className: "BlobPropertiesInternal",
    modelProperties: {
      createdOn: {
        serializedName: "Creation-Time",
        xmlName: "Creation-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "Content-Length",
        xmlName: "Content-Length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "Content-Type",
        xmlName: "Content-Type",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "Content-Encoding",
        xmlName: "Content-Encoding",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "Content-Language",
        xmlName: "Content-Language",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      },
      contentDisposition: {
        serializedName: "Content-Disposition",
        xmlName: "Content-Disposition",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "Cache-Control",
        xmlName: "Cache-Control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "BlobType",
        xmlName: "BlobType",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      copyId: {
        serializedName: "CopyId",
        xmlName: "CopyId",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "CopyStatus",
        xmlName: "CopyStatus",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      copySource: {
        serializedName: "CopySource",
        xmlName: "CopySource",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "CopyProgress",
        xmlName: "CopyProgress",
        type: {
          name: "String"
        }
      },
      copyCompletedOn: {
        serializedName: "CopyCompletionTime",
        xmlName: "CopyCompletionTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "CopyStatusDescription",
        xmlName: "CopyStatusDescription",
        type: {
          name: "String"
        }
      },
      serverEncrypted: {
        serializedName: "ServerEncrypted",
        xmlName: "ServerEncrypted",
        type: {
          name: "Boolean"
        }
      },
      incrementalCopy: {
        serializedName: "IncrementalCopy",
        xmlName: "IncrementalCopy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "DestinationSnapshot",
        xmlName: "DestinationSnapshot",
        type: {
          name: "String"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      accessTier: {
        serializedName: "AccessTier",
        xmlName: "AccessTier",
        type: {
          name: "Enum",
          allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold"]
        }
      },
      accessTierInferred: {
        serializedName: "AccessTierInferred",
        xmlName: "AccessTierInferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "ArchiveStatus",
        xmlName: "ArchiveStatus",
        type: {
          name: "Enum",
          allowedValues: ["rehydrate-pending-to-hot", "rehydrate-pending-to-cool", "rehydrate-pending-to-cold"]
        }
      },
      customerProvidedKeySha256: {
        serializedName: "CustomerProvidedKeySha256",
        xmlName: "CustomerProvidedKeySha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "EncryptionScope",
        xmlName: "EncryptionScope",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "AccessTierChangeTime",
        xmlName: "AccessTierChangeTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      tagCount: {
        serializedName: "TagCount",
        xmlName: "TagCount",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "Expiry-Time",
        xmlName: "Expiry-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "Sealed",
        xmlName: "Sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "RehydratePriority",
        xmlName: "RehydratePriority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessedOn: {
        serializedName: "LastAccessTime",
        xmlName: "LastAccessTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "ImmutabilityPolicyUntilDate",
        xmlName: "ImmutabilityPolicyUntilDate",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "ImmutabilityPolicyMode",
        xmlName: "ImmutabilityPolicyMode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "LegalHold",
        xmlName: "LegalHold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var ListBlobsHierarchySegmentResponse = exports.ListBlobsHierarchySegmentResponse = {
  serializedName: "ListBlobsHierarchySegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsHierarchySegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      delimiter: {
        serializedName: "Delimiter",
        xmlName: "Delimiter",
        type: {
          name: "String"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobHierarchyListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobHierarchyListSegment = exports.BlobHierarchyListSegment = {
  serializedName: "BlobHierarchyListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobHierarchyListSegment",
    modelProperties: {
      blobPrefixes: {
        serializedName: "BlobPrefixes",
        xmlName: "BlobPrefixes",
        xmlElementName: "BlobPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobPrefix"
            }
          }
        }
      },
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
var BlobPrefix = exports.BlobPrefix = {
  serializedName: "BlobPrefix",
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      }
    }
  }
};
var BlockLookupList = exports.BlockLookupList = {
  serializedName: "BlockLookupList",
  xmlName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockLookupList",
    modelProperties: {
      committed: {
        serializedName: "Committed",
        xmlName: "Committed",
        xmlElementName: "Committed",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uncommitted: {
        serializedName: "Uncommitted",
        xmlName: "Uncommitted",
        xmlElementName: "Uncommitted",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      latest: {
        serializedName: "Latest",
        xmlName: "Latest",
        xmlElementName: "Latest",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
var BlockList = exports.BlockList = {
  serializedName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockList",
    modelProperties: {
      committedBlocks: {
        serializedName: "CommittedBlocks",
        xmlName: "CommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      },
      uncommittedBlocks: {
        serializedName: "UncommittedBlocks",
        xmlName: "UncommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      }
    }
  }
};
var Block = exports.Block = {
  serializedName: "Block",
  type: {
    name: "Composite",
    className: "Block",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "Size",
        required: true,
        xmlName: "Size",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var PageList = exports.PageList = {
  serializedName: "PageList",
  type: {
    name: "Composite",
    className: "PageList",
    modelProperties: {
      pageRange: {
        serializedName: "PageRange",
        xmlName: "PageRange",
        xmlElementName: "PageRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PageRange"
            }
          }
        }
      },
      clearRange: {
        serializedName: "ClearRange",
        xmlName: "ClearRange",
        xmlElementName: "ClearRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClearRange"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageRange = exports.PageRange = {
  serializedName: "PageRange",
  xmlName: "PageRange",
  type: {
    name: "Composite",
    className: "PageRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var ClearRange = exports.ClearRange = {
  serializedName: "ClearRange",
  xmlName: "ClearRange",
  type: {
    name: "Composite",
    className: "ClearRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var QueryRequest = exports.QueryRequest = {
  serializedName: "QueryRequest",
  xmlName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      queryType: {
        serializedName: "QueryType",
        required: true,
        xmlName: "QueryType",
        type: {
          name: "String"
        }
      },
      expression: {
        serializedName: "Expression",
        required: true,
        xmlName: "Expression",
        type: {
          name: "String"
        }
      },
      inputSerialization: {
        serializedName: "InputSerialization",
        xmlName: "InputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      },
      outputSerialization: {
        serializedName: "OutputSerialization",
        xmlName: "OutputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      }
    }
  }
};
var QuerySerialization = exports.QuerySerialization = {
  serializedName: "QuerySerialization",
  type: {
    name: "Composite",
    className: "QuerySerialization",
    modelProperties: {
      format: {
        serializedName: "Format",
        xmlName: "Format",
        type: {
          name: "Composite",
          className: "QueryFormat"
        }
      }
    }
  }
};
var QueryFormat = exports.QueryFormat = {
  serializedName: "QueryFormat",
  type: {
    name: "Composite",
    className: "QueryFormat",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "Enum",
          allowedValues: ["delimited", "json", "arrow", "parquet"]
        }
      },
      delimitedTextConfiguration: {
        serializedName: "DelimitedTextConfiguration",
        xmlName: "DelimitedTextConfiguration",
        type: {
          name: "Composite",
          className: "DelimitedTextConfiguration"
        }
      },
      jsonTextConfiguration: {
        serializedName: "JsonTextConfiguration",
        xmlName: "JsonTextConfiguration",
        type: {
          name: "Composite",
          className: "JsonTextConfiguration"
        }
      },
      arrowConfiguration: {
        serializedName: "ArrowConfiguration",
        xmlName: "ArrowConfiguration",
        type: {
          name: "Composite",
          className: "ArrowConfiguration"
        }
      },
      parquetTextConfiguration: {
        serializedName: "ParquetTextConfiguration",
        xmlName: "ParquetTextConfiguration",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "any"
            }
          }
        }
      }
    }
  }
};
var DelimitedTextConfiguration = exports.DelimitedTextConfiguration = {
  serializedName: "DelimitedTextConfiguration",
  xmlName: "DelimitedTextConfiguration",
  type: {
    name: "Composite",
    className: "DelimitedTextConfiguration",
    modelProperties: {
      columnSeparator: {
        serializedName: "ColumnSeparator",
        xmlName: "ColumnSeparator",
        type: {
          name: "String"
        }
      },
      fieldQuote: {
        serializedName: "FieldQuote",
        xmlName: "FieldQuote",
        type: {
          name: "String"
        }
      },
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      },
      escapeChar: {
        serializedName: "EscapeChar",
        xmlName: "EscapeChar",
        type: {
          name: "String"
        }
      },
      headersPresent: {
        serializedName: "HeadersPresent",
        xmlName: "HasHeaders",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var JsonTextConfiguration = exports.JsonTextConfiguration = {
  serializedName: "JsonTextConfiguration",
  xmlName: "JsonTextConfiguration",
  type: {
    name: "Composite",
    className: "JsonTextConfiguration",
    modelProperties: {
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ArrowConfiguration = exports.ArrowConfiguration = {
  serializedName: "ArrowConfiguration",
  xmlName: "ArrowConfiguration",
  type: {
    name: "Composite",
    className: "ArrowConfiguration",
    modelProperties: {
      schema: {
        serializedName: "Schema",
        required: true,
        xmlName: "Schema",
        xmlIsWrapped: true,
        xmlElementName: "Field",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArrowField"
            }
          }
        }
      }
    }
  }
};
var ArrowField = exports.ArrowField = {
  serializedName: "ArrowField",
  xmlName: "Field",
  type: {
    name: "Composite",
    className: "ArrowField",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "Precision",
        xmlName: "Precision",
        type: {
          name: "Number"
        }
      },
      scale: {
        serializedName: "Scale",
        xmlName: "Scale",
        type: {
          name: "Number"
        }
      }
    }
  }
};
var ServiceSetPropertiesHeaders = exports.ServiceSetPropertiesHeaders = {
  serializedName: "Service_setPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSetPropertiesExceptionHeaders = exports.ServiceSetPropertiesExceptionHeaders = {
  serializedName: "Service_setPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetPropertiesHeaders = exports.ServiceGetPropertiesHeaders = {
  serializedName: "Service_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetPropertiesExceptionHeaders = exports.ServiceGetPropertiesExceptionHeaders = {
  serializedName: "Service_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetStatisticsHeaders = exports.ServiceGetStatisticsHeaders = {
  serializedName: "Service_getStatisticsHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetStatisticsExceptionHeaders = exports.ServiceGetStatisticsExceptionHeaders = {
  serializedName: "Service_getStatisticsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceListContainersSegmentHeaders = exports.ServiceListContainersSegmentHeaders = {
  serializedName: "Service_listContainersSegmentHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceListContainersSegmentExceptionHeaders = exports.ServiceListContainersSegmentExceptionHeaders = {
  serializedName: "Service_listContainersSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetUserDelegationKeyHeaders = exports.ServiceGetUserDelegationKeyHeaders = {
  serializedName: "Service_getUserDelegationKeyHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetUserDelegationKeyExceptionHeaders = exports.ServiceGetUserDelegationKeyExceptionHeaders = {
  serializedName: "Service_getUserDelegationKeyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetAccountInfoHeaders = exports.ServiceGetAccountInfoHeaders = {
  serializedName: "Service_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceGetAccountInfoExceptionHeaders = exports.ServiceGetAccountInfoExceptionHeaders = {
  serializedName: "Service_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSubmitBatchHeaders = exports.ServiceSubmitBatchHeaders = {
  serializedName: "Service_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceSubmitBatchExceptionHeaders = exports.ServiceSubmitBatchExceptionHeaders = {
  serializedName: "Service_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceFilterBlobsHeaders = exports.ServiceFilterBlobsHeaders = {
  serializedName: "Service_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ServiceFilterBlobsExceptionHeaders = exports.ServiceFilterBlobsExceptionHeaders = {
  serializedName: "Service_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerCreateHeaders = exports.ContainerCreateHeaders = {
  serializedName: "Container_createHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerCreateExceptionHeaders = exports.ContainerCreateExceptionHeaders = {
  serializedName: "Container_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetPropertiesHeaders = exports.ContainerGetPropertiesHeaders = {
  serializedName: "Container_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "x-ms-has-immutability-policy",
        xmlName: "x-ms-has-immutability-policy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "x-ms-has-legal-hold",
        xmlName: "x-ms-has-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "x-ms-immutable-storage-with-versioning-enabled",
        xmlName: "x-ms-immutable-storage-with-versioning-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetPropertiesExceptionHeaders = exports.ContainerGetPropertiesExceptionHeaders = {
  serializedName: "Container_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerDeleteHeaders = exports.ContainerDeleteHeaders = {
  serializedName: "Container_deleteHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerDeleteExceptionHeaders = exports.ContainerDeleteExceptionHeaders = {
  serializedName: "Container_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetMetadataHeaders = exports.ContainerSetMetadataHeaders = {
  serializedName: "Container_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetMetadataExceptionHeaders = exports.ContainerSetMetadataExceptionHeaders = {
  serializedName: "Container_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccessPolicyHeaders = exports.ContainerGetAccessPolicyHeaders = {
  serializedName: "Container_getAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyHeaders",
    modelProperties: {
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccessPolicyExceptionHeaders = exports.ContainerGetAccessPolicyExceptionHeaders = {
  serializedName: "Container_getAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetAccessPolicyHeaders = exports.ContainerSetAccessPolicyHeaders = {
  serializedName: "Container_setAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSetAccessPolicyExceptionHeaders = exports.ContainerSetAccessPolicyExceptionHeaders = {
  serializedName: "Container_setAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRestoreHeaders = exports.ContainerRestoreHeaders = {
  serializedName: "Container_restoreHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRestoreExceptionHeaders = exports.ContainerRestoreExceptionHeaders = {
  serializedName: "Container_restoreExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenameHeaders = exports.ContainerRenameHeaders = {
  serializedName: "Container_renameHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenameExceptionHeaders = exports.ContainerRenameExceptionHeaders = {
  serializedName: "Container_renameExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSubmitBatchHeaders = exports.ContainerSubmitBatchHeaders = {
  serializedName: "Container_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerSubmitBatchExceptionHeaders = exports.ContainerSubmitBatchExceptionHeaders = {
  serializedName: "Container_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerFilterBlobsHeaders = exports.ContainerFilterBlobsHeaders = {
  serializedName: "Container_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerFilterBlobsExceptionHeaders = exports.ContainerFilterBlobsExceptionHeaders = {
  serializedName: "Container_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerAcquireLeaseHeaders = exports.ContainerAcquireLeaseHeaders = {
  serializedName: "Container_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerAcquireLeaseExceptionHeaders = exports.ContainerAcquireLeaseExceptionHeaders = {
  serializedName: "Container_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerReleaseLeaseHeaders = exports.ContainerReleaseLeaseHeaders = {
  serializedName: "Container_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerReleaseLeaseExceptionHeaders = exports.ContainerReleaseLeaseExceptionHeaders = {
  serializedName: "Container_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerRenewLeaseHeaders = exports.ContainerRenewLeaseHeaders = {
  serializedName: "Container_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerRenewLeaseExceptionHeaders = exports.ContainerRenewLeaseExceptionHeaders = {
  serializedName: "Container_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerBreakLeaseHeaders = exports.ContainerBreakLeaseHeaders = {
  serializedName: "Container_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerBreakLeaseExceptionHeaders = exports.ContainerBreakLeaseExceptionHeaders = {
  serializedName: "Container_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerChangeLeaseHeaders = exports.ContainerChangeLeaseHeaders = {
  serializedName: "Container_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var ContainerChangeLeaseExceptionHeaders = exports.ContainerChangeLeaseExceptionHeaders = {
  serializedName: "Container_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobFlatSegmentHeaders = exports.ContainerListBlobFlatSegmentHeaders = {
  serializedName: "Container_listBlobFlatSegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobFlatSegmentExceptionHeaders = exports.ContainerListBlobFlatSegmentExceptionHeaders = {
  serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobHierarchySegmentHeaders = exports.ContainerListBlobHierarchySegmentHeaders = {
  serializedName: "Container_listBlobHierarchySegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerListBlobHierarchySegmentExceptionHeaders = exports.ContainerListBlobHierarchySegmentExceptionHeaders = {
  serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var ContainerGetAccountInfoHeaders = exports.ContainerGetAccountInfoHeaders = {
  serializedName: "Container_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var ContainerGetAccountInfoExceptionHeaders = exports.ContainerGetAccountInfoExceptionHeaders = {
  serializedName: "Container_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDownloadHeaders = exports.BlobDownloadHeaders = {
  serializedName: "Blob_downloadHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        headerCollectionPrefix: "x-ms-or-",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
var BlobDownloadExceptionHeaders = exports.BlobDownloadExceptionHeaders = {
  serializedName: "Blob_downloadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetPropertiesHeaders = exports.BlobGetPropertiesHeaders = {
  serializedName: "Blob_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        headerCollectionPrefix: "x-ms-or-",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      isIncrementalCopy: {
        serializedName: "x-ms-incremental-copy",
        xmlName: "x-ms-incremental-copy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "x-ms-copy-destination-snapshot",
        xmlName: "x-ms-copy-destination-snapshot",
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      accessTier: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
          name: "String"
        }
      },
      accessTierInferred: {
        serializedName: "x-ms-access-tier-inferred",
        xmlName: "x-ms-access-tier-inferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "x-ms-archive-status",
        xmlName: "x-ms-archive-status",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "x-ms-access-tier-change-time",
        xmlName: "x-ms-access-tier-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetPropertiesExceptionHeaders = exports.BlobGetPropertiesExceptionHeaders = {
  serializedName: "Blob_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteHeaders = exports.BlobDeleteHeaders = {
  serializedName: "Blob_deleteHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteExceptionHeaders = exports.BlobDeleteExceptionHeaders = {
  serializedName: "Blob_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobUndeleteHeaders = exports.BlobUndeleteHeaders = {
  serializedName: "Blob_undeleteHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobUndeleteExceptionHeaders = exports.BlobUndeleteExceptionHeaders = {
  serializedName: "Blob_undeleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetExpiryHeaders = exports.BlobSetExpiryHeaders = {
  serializedName: "Blob_setExpiryHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobSetExpiryExceptionHeaders = exports.BlobSetExpiryExceptionHeaders = {
  serializedName: "Blob_setExpiryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetHttpHeadersHeaders = exports.BlobSetHttpHeadersHeaders = {
  serializedName: "Blob_setHttpHeadersHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetHttpHeadersExceptionHeaders = exports.BlobSetHttpHeadersExceptionHeaders = {
  serializedName: "Blob_setHttpHeadersExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetImmutabilityPolicyHeaders = exports.BlobSetImmutabilityPolicyHeaders = {
  serializedName: "Blob_setImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiry: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      }
    }
  }
};
var BlobSetImmutabilityPolicyExceptionHeaders = exports.BlobSetImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobDeleteImmutabilityPolicyHeaders = exports.BlobDeleteImmutabilityPolicyHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobDeleteImmutabilityPolicyExceptionHeaders = exports.BlobDeleteImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetLegalHoldHeaders = exports.BlobSetLegalHoldHeaders = {
  serializedName: "Blob_setLegalHoldHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var BlobSetLegalHoldExceptionHeaders = exports.BlobSetLegalHoldExceptionHeaders = {
  serializedName: "Blob_setLegalHoldExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetMetadataHeaders = exports.BlobSetMetadataHeaders = {
  serializedName: "Blob_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetMetadataExceptionHeaders = exports.BlobSetMetadataExceptionHeaders = {
  serializedName: "Blob_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAcquireLeaseHeaders = exports.BlobAcquireLeaseHeaders = {
  serializedName: "Blob_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobAcquireLeaseExceptionHeaders = exports.BlobAcquireLeaseExceptionHeaders = {
  serializedName: "Blob_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobReleaseLeaseHeaders = exports.BlobReleaseLeaseHeaders = {
  serializedName: "Blob_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobReleaseLeaseExceptionHeaders = exports.BlobReleaseLeaseExceptionHeaders = {
  serializedName: "Blob_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobRenewLeaseHeaders = exports.BlobRenewLeaseHeaders = {
  serializedName: "Blob_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobRenewLeaseExceptionHeaders = exports.BlobRenewLeaseExceptionHeaders = {
  serializedName: "Blob_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobChangeLeaseHeaders = exports.BlobChangeLeaseHeaders = {
  serializedName: "Blob_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobChangeLeaseExceptionHeaders = exports.BlobChangeLeaseExceptionHeaders = {
  serializedName: "Blob_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobBreakLeaseHeaders = exports.BlobBreakLeaseHeaders = {
  serializedName: "Blob_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
var BlobBreakLeaseExceptionHeaders = exports.BlobBreakLeaseExceptionHeaders = {
  serializedName: "Blob_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCreateSnapshotHeaders = exports.BlobCreateSnapshotHeaders = {
  serializedName: "Blob_createSnapshotHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotHeaders",
    modelProperties: {
      snapshot: {
        serializedName: "x-ms-snapshot",
        xmlName: "x-ms-snapshot",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCreateSnapshotExceptionHeaders = exports.BlobCreateSnapshotExceptionHeaders = {
  serializedName: "Blob_createSnapshotExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobStartCopyFromURLHeaders = exports.BlobStartCopyFromURLHeaders = {
  serializedName: "Blob_startCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobStartCopyFromURLExceptionHeaders = exports.BlobStartCopyFromURLExceptionHeaders = {
  serializedName: "Blob_startCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCopyFromURLHeaders = exports.BlobCopyFromURLHeaders = {
  serializedName: "Blob_copyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        defaultValue: "success",
        isConstant: true,
        serializedName: "x-ms-copy-status",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobCopyFromURLExceptionHeaders = exports.BlobCopyFromURLExceptionHeaders = {
  serializedName: "Blob_copyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAbortCopyFromURLHeaders = exports.BlobAbortCopyFromURLHeaders = {
  serializedName: "Blob_abortCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobAbortCopyFromURLExceptionHeaders = exports.BlobAbortCopyFromURLExceptionHeaders = {
  serializedName: "Blob_abortCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTierHeaders = exports.BlobSetTierHeaders = {
  serializedName: "Blob_setTierHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTierExceptionHeaders = exports.BlobSetTierExceptionHeaders = {
  serializedName: "Blob_setTierExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetAccountInfoHeaders = exports.BlobGetAccountInfoHeaders = {
  serializedName: "Blob_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var BlobGetAccountInfoExceptionHeaders = exports.BlobGetAccountInfoExceptionHeaders = {
  serializedName: "Blob_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobQueryHeaders = exports.BlobQueryHeaders = {
  serializedName: "Blob_queryHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletionTime: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
var BlobQueryExceptionHeaders = exports.BlobQueryExceptionHeaders = {
  serializedName: "Blob_queryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetTagsHeaders = exports.BlobGetTagsHeaders = {
  serializedName: "Blob_getTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobGetTagsExceptionHeaders = exports.BlobGetTagsExceptionHeaders = {
  serializedName: "Blob_getTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTagsHeaders = exports.BlobSetTagsHeaders = {
  serializedName: "Blob_setTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlobSetTagsExceptionHeaders = exports.BlobSetTagsExceptionHeaders = {
  serializedName: "Blob_setTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCreateHeaders = exports.PageBlobCreateHeaders = {
  serializedName: "PageBlob_createHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCreateExceptionHeaders = exports.PageBlobCreateExceptionHeaders = {
  serializedName: "PageBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesHeaders = exports.PageBlobUploadPagesHeaders = {
  serializedName: "PageBlob_uploadPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesExceptionHeaders = exports.PageBlobUploadPagesExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobClearPagesHeaders = exports.PageBlobClearPagesHeaders = {
  serializedName: "PageBlob_clearPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobClearPagesExceptionHeaders = exports.PageBlobClearPagesExceptionHeaders = {
  serializedName: "PageBlob_clearPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesFromURLHeaders = exports.PageBlobUploadPagesFromURLHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUploadPagesFromURLExceptionHeaders = exports.PageBlobUploadPagesFromURLExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesHeaders = exports.PageBlobGetPageRangesHeaders = {
  serializedName: "PageBlob_getPageRangesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesExceptionHeaders = exports.PageBlobGetPageRangesExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesDiffHeaders = exports.PageBlobGetPageRangesDiffHeaders = {
  serializedName: "PageBlob_getPageRangesDiffHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobGetPageRangesDiffExceptionHeaders = exports.PageBlobGetPageRangesDiffExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobResizeHeaders = exports.PageBlobResizeHeaders = {
  serializedName: "PageBlob_resizeHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobResizeExceptionHeaders = exports.PageBlobResizeExceptionHeaders = {
  serializedName: "PageBlob_resizeExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUpdateSequenceNumberHeaders = exports.PageBlobUpdateSequenceNumberHeaders = {
  serializedName: "PageBlob_updateSequenceNumberHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobUpdateSequenceNumberExceptionHeaders = exports.PageBlobUpdateSequenceNumberExceptionHeaders = {
  serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCopyIncrementalHeaders = exports.PageBlobCopyIncrementalHeaders = {
  serializedName: "PageBlob_copyIncrementalHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var PageBlobCopyIncrementalExceptionHeaders = exports.PageBlobCopyIncrementalExceptionHeaders = {
  serializedName: "PageBlob_copyIncrementalExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobCreateHeaders = exports.AppendBlobCreateHeaders = {
  serializedName: "AppendBlob_createHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobCreateExceptionHeaders = exports.AppendBlobCreateExceptionHeaders = {
  serializedName: "AppendBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockHeaders = exports.AppendBlobAppendBlockHeaders = {
  serializedName: "AppendBlob_appendBlockHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockExceptionHeaders = exports.AppendBlobAppendBlockExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockFromUrlHeaders = exports.AppendBlobAppendBlockFromUrlHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobAppendBlockFromUrlExceptionHeaders = exports.AppendBlobAppendBlockFromUrlExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var AppendBlobSealHeaders = exports.AppendBlobSealHeaders = {
  serializedName: "AppendBlob_sealHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
var AppendBlobSealExceptionHeaders = exports.AppendBlobSealExceptionHeaders = {
  serializedName: "AppendBlob_sealExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobUploadHeaders = exports.BlockBlobUploadHeaders = {
  serializedName: "BlockBlob_uploadHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobUploadExceptionHeaders = exports.BlockBlobUploadExceptionHeaders = {
  serializedName: "BlockBlob_uploadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobPutBlobFromUrlHeaders = exports.BlockBlobPutBlobFromUrlHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobPutBlobFromUrlExceptionHeaders = exports.BlockBlobPutBlobFromUrlExceptionHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockHeaders = exports.BlockBlobStageBlockHeaders = {
  serializedName: "BlockBlob_stageBlockHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockExceptionHeaders = exports.BlockBlobStageBlockExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockFromURLHeaders = exports.BlockBlobStageBlockFromURLHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobStageBlockFromURLExceptionHeaders = exports.BlockBlobStageBlockFromURLExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobCommitBlockListHeaders = exports.BlockBlobCommitBlockListHeaders = {
  serializedName: "BlockBlob_commitBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobCommitBlockListExceptionHeaders = exports.BlockBlobCommitBlockListExceptionHeaders = {
  serializedName: "BlockBlob_commitBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobGetBlockListHeaders = exports.BlockBlobGetBlockListHeaders = {
  serializedName: "BlockBlob_getBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
var BlockBlobGetBlockListExceptionHeaders = exports.BlockBlobGetBlockListExceptionHeaders = {
  serializedName: "BlockBlob_getBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multipartContentType = exports.metadata = exports.maxSize = exports.maxPageSize = exports.marker = exports.listType = exports.legalHold1 = exports.legalHold = exports.leaseId1 = exports.leaseId = exports.keyInfo = exports.include1 = exports.include = exports.immutabilityPolicyMode = exports.immutabilityPolicyExpiry = exports.ifUnmodifiedSince = exports.ifTags = exports.ifSequenceNumberLessThanOrEqualTo = exports.ifSequenceNumberLessThan = exports.ifSequenceNumberEqualTo = exports.ifNoneMatch = exports.ifModifiedSince = exports.ifMatch = exports.expiryOptions = exports.expiresOn = exports.encryptionScope = exports.encryptionKeySha256 = exports.encryptionKey = exports.encryptionAlgorithm = exports.duration = exports.delimiter = exports.deletedContainerVersion = exports.deletedContainerName = exports.deleteSnapshots = exports.defaultEncryptionScope = exports.copySourceTags = exports.copySourceBlobProperties = exports.copySourceAuthorization = exports.copySource = exports.copyId = exports.copyActionAbortConstant = exports.contentType1 = exports.contentType = exports.contentLength = exports.containerAcl = exports.comp9 = exports.comp8 = exports.comp7 = exports.comp6 = exports.comp5 = exports.comp4 = exports.comp3 = exports.comp25 = exports.comp24 = exports.comp23 = exports.comp22 = exports.comp21 = exports.comp20 = exports.comp2 = exports.comp19 = exports.comp18 = exports.comp17 = exports.comp16 = exports.comp15 = exports.comp14 = exports.comp13 = exports.comp12 = exports.comp11 = exports.comp10 = exports.comp1 = exports.comp = exports.breakPeriod = exports.body1 = exports.body = exports.blocks = exports.blockId = exports.blobType2 = exports.blobType1 = exports.blobType = exports.blobTagsString = exports.blobServiceProperties = exports.blobSequenceNumber = exports.blobDeleteType = exports.blobContentType = exports.blobContentMD5 = exports.blobContentLength = exports.blobContentLanguage = exports.blobContentEncoding = exports.blobContentDisposition = exports.blobCacheControl = exports.appendPosition = exports.action4 = exports.action3 = exports.action2 = exports.action1 = exports.action = exports.access = exports.accept2 = exports.accept1 = exports.accept = void 0;
exports.xMsRequiresSync = exports.where = exports.versionId = exports.version = exports.url = exports.transactionalContentMD5 = exports.transactionalContentCrc64 = exports.timeoutInSeconds = exports.tier1 = exports.tier = exports.tags = exports.sourceUrl = exports.sourceRange1 = exports.sourceRange = exports.sourceLeaseId = exports.sourceIfUnmodifiedSince = exports.sourceIfTags = exports.sourceIfNoneMatch = exports.sourceIfModifiedSince = exports.sourceIfMatch = exports.sourceContentMD5 = exports.sourceContentCrc64 = exports.sourceContainerName = exports.snapshot = exports.sequenceNumberAction = exports.sealBlob = exports.restype2 = exports.restype1 = exports.restype = exports.requestId = exports.rehydratePriority = exports.rangeGetContentMD5 = exports.rangeGetContentCRC64 = exports.range1 = exports.range = exports.queryRequest = exports.proposedLeaseId1 = exports.proposedLeaseId = exports.prevsnapshot = exports.preventEncryptionScopeOverride = exports.prevSnapshotUrl = exports.prefix = exports.pageWrite1 = exports.pageWrite = void 0;
var _mappers = require("../models/mappers");
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

var contentType = exports.contentType = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var blobServiceProperties = exports.blobServiceProperties = {
  parameterPath: "blobServiceProperties",
  mapper: _mappers.BlobServiceProperties
};
var accept = exports.accept = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var url = exports.url = {
  parameterPath: "url",
  mapper: {
    serializedName: "url",
    required: true,
    xmlName: "url",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
var restype = exports.restype = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "service",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var comp = exports.comp = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "properties",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var timeoutInSeconds = exports.timeoutInSeconds = {
  parameterPath: ["options", "timeoutInSeconds"],
  mapper: {
    constraints: {
      InclusiveMinimum: 0
    },
    serializedName: "timeout",
    xmlName: "timeout",
    type: {
      name: "Number"
    }
  }
};
var version = exports.version = {
  parameterPath: "version",
  mapper: {
    defaultValue: "2024-08-04",
    isConstant: true,
    serializedName: "x-ms-version",
    type: {
      name: "String"
    }
  }
};
var requestId = exports.requestId = {
  parameterPath: ["options", "requestId"],
  mapper: {
    serializedName: "x-ms-client-request-id",
    xmlName: "x-ms-client-request-id",
    type: {
      name: "String"
    }
  }
};
var accept1 = exports.accept1 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var comp1 = exports.comp1 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "stats",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp2 = exports.comp2 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "list",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var prefix = exports.prefix = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    xmlName: "prefix",
    type: {
      name: "String"
    }
  }
};
var marker = exports.marker = {
  parameterPath: ["options", "marker"],
  mapper: {
    serializedName: "marker",
    xmlName: "marker",
    type: {
      name: "String"
    }
  }
};
var maxPageSize = exports.maxPageSize = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "maxresults",
    xmlName: "maxresults",
    type: {
      name: "Number"
    }
  }
};
var include = exports.include = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListContainersIncludeType",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["metadata", "deleted", "system"]
        }
      }
    }
  },
  collectionFormat: "CSV"
};
var keyInfo = exports.keyInfo = {
  parameterPath: "keyInfo",
  mapper: _mappers.KeyInfo
};
var comp3 = exports.comp3 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "userdelegationkey",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var restype1 = exports.restype1 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "account",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var body = exports.body = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
var comp4 = exports.comp4 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "batch",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var contentLength = exports.contentLength = {
  parameterPath: "contentLength",
  mapper: {
    serializedName: "Content-Length",
    required: true,
    xmlName: "Content-Length",
    type: {
      name: "Number"
    }
  }
};
var multipartContentType = exports.multipartContentType = {
  parameterPath: "multipartContentType",
  mapper: {
    serializedName: "Content-Type",
    required: true,
    xmlName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var comp5 = exports.comp5 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blobs",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var where = exports.where = {
  parameterPath: ["options", "where"],
  mapper: {
    serializedName: "where",
    xmlName: "where",
    type: {
      name: "String"
    }
  }
};
var restype2 = exports.restype2 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "container",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
var metadata = exports.metadata = {
  parameterPath: ["options", "metadata"],
  mapper: {
    serializedName: "x-ms-meta",
    xmlName: "x-ms-meta",
    headerCollectionPrefix: "x-ms-meta-",
    type: {
      name: "Dictionary",
      value: {
        type: {
          name: "String"
        }
      }
    }
  }
};
var access = exports.access = {
  parameterPath: ["options", "access"],
  mapper: {
    serializedName: "x-ms-blob-public-access",
    xmlName: "x-ms-blob-public-access",
    type: {
      name: "Enum",
      allowedValues: ["container", "blob"]
    }
  }
};
var defaultEncryptionScope = exports.defaultEncryptionScope = {
  parameterPath: ["options", "containerEncryptionScope", "defaultEncryptionScope"],
  mapper: {
    serializedName: "x-ms-default-encryption-scope",
    xmlName: "x-ms-default-encryption-scope",
    type: {
      name: "String"
    }
  }
};
var preventEncryptionScopeOverride = exports.preventEncryptionScopeOverride = {
  parameterPath: ["options", "containerEncryptionScope", "preventEncryptionScopeOverride"],
  mapper: {
    serializedName: "x-ms-deny-encryption-scope-override",
    xmlName: "x-ms-deny-encryption-scope-override",
    type: {
      name: "Boolean"
    }
  }
};
var leaseId = exports.leaseId = {
  parameterPath: ["options", "leaseAccessConditions", "leaseId"],
  mapper: {
    serializedName: "x-ms-lease-id",
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
var ifModifiedSince = exports.ifModifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    xmlName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var ifUnmodifiedSince = exports.ifUnmodifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    xmlName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var comp6 = exports.comp6 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "metadata",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp7 = exports.comp7 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "acl",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var containerAcl = exports.containerAcl = {
  parameterPath: ["options", "containerAcl"],
  mapper: {
    serializedName: "containerAcl",
    xmlName: "SignedIdentifiers",
    xmlIsWrapped: true,
    xmlElementName: "SignedIdentifier",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "SignedIdentifier"
        }
      }
    }
  }
};
var comp8 = exports.comp8 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "undelete",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var deletedContainerName = exports.deletedContainerName = {
  parameterPath: ["options", "deletedContainerName"],
  mapper: {
    serializedName: "x-ms-deleted-container-name",
    xmlName: "x-ms-deleted-container-name",
    type: {
      name: "String"
    }
  }
};
var deletedContainerVersion = exports.deletedContainerVersion = {
  parameterPath: ["options", "deletedContainerVersion"],
  mapper: {
    serializedName: "x-ms-deleted-container-version",
    xmlName: "x-ms-deleted-container-version",
    type: {
      name: "String"
    }
  }
};
var comp9 = exports.comp9 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "rename",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var sourceContainerName = exports.sourceContainerName = {
  parameterPath: "sourceContainerName",
  mapper: {
    serializedName: "x-ms-source-container-name",
    required: true,
    xmlName: "x-ms-source-container-name",
    type: {
      name: "String"
    }
  }
};
var sourceLeaseId = exports.sourceLeaseId = {
  parameterPath: ["options", "sourceLeaseId"],
  mapper: {
    serializedName: "x-ms-source-lease-id",
    xmlName: "x-ms-source-lease-id",
    type: {
      name: "String"
    }
  }
};
var comp10 = exports.comp10 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "lease",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var action = exports.action = {
  parameterPath: "action",
  mapper: {
    defaultValue: "acquire",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var duration = exports.duration = {
  parameterPath: ["options", "duration"],
  mapper: {
    serializedName: "x-ms-lease-duration",
    xmlName: "x-ms-lease-duration",
    type: {
      name: "Number"
    }
  }
};
var proposedLeaseId = exports.proposedLeaseId = {
  parameterPath: ["options", "proposedLeaseId"],
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
var action1 = exports.action1 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "release",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var leaseId1 = exports.leaseId1 = {
  parameterPath: "leaseId",
  mapper: {
    serializedName: "x-ms-lease-id",
    required: true,
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
var action2 = exports.action2 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "renew",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var action3 = exports.action3 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "break",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var breakPeriod = exports.breakPeriod = {
  parameterPath: ["options", "breakPeriod"],
  mapper: {
    serializedName: "x-ms-lease-break-period",
    xmlName: "x-ms-lease-break-period",
    type: {
      name: "Number"
    }
  }
};
var action4 = exports.action4 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "change",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
var proposedLeaseId1 = exports.proposedLeaseId1 = {
  parameterPath: "proposedLeaseId",
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    required: true,
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
var include1 = exports.include1 = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListBlobsIncludeItem",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["copy", "deleted", "metadata", "snapshots", "uncommittedblobs", "versions", "tags", "immutabilitypolicy", "legalhold", "deletedwithversions"]
        }
      }
    }
  },
  collectionFormat: "CSV"
};
var delimiter = exports.delimiter = {
  parameterPath: "delimiter",
  mapper: {
    serializedName: "delimiter",
    required: true,
    xmlName: "delimiter",
    type: {
      name: "String"
    }
  }
};
var snapshot = exports.snapshot = {
  parameterPath: ["options", "snapshot"],
  mapper: {
    serializedName: "snapshot",
    xmlName: "snapshot",
    type: {
      name: "String"
    }
  }
};
var versionId = exports.versionId = {
  parameterPath: ["options", "versionId"],
  mapper: {
    serializedName: "versionid",
    xmlName: "versionid",
    type: {
      name: "String"
    }
  }
};
var range = exports.range = {
  parameterPath: ["options", "range"],
  mapper: {
    serializedName: "x-ms-range",
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
var rangeGetContentMD5 = exports.rangeGetContentMD5 = {
  parameterPath: ["options", "rangeGetContentMD5"],
  mapper: {
    serializedName: "x-ms-range-get-content-md5",
    xmlName: "x-ms-range-get-content-md5",
    type: {
      name: "Boolean"
    }
  }
};
var rangeGetContentCRC64 = exports.rangeGetContentCRC64 = {
  parameterPath: ["options", "rangeGetContentCRC64"],
  mapper: {
    serializedName: "x-ms-range-get-content-crc64",
    xmlName: "x-ms-range-get-content-crc64",
    type: {
      name: "Boolean"
    }
  }
};
var encryptionKey = exports.encryptionKey = {
  parameterPath: ["options", "cpkInfo", "encryptionKey"],
  mapper: {
    serializedName: "x-ms-encryption-key",
    xmlName: "x-ms-encryption-key",
    type: {
      name: "String"
    }
  }
};
var encryptionKeySha256 = exports.encryptionKeySha256 = {
  parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
  mapper: {
    serializedName: "x-ms-encryption-key-sha256",
    xmlName: "x-ms-encryption-key-sha256",
    type: {
      name: "String"
    }
  }
};
var encryptionAlgorithm = exports.encryptionAlgorithm = {
  parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
  mapper: {
    serializedName: "x-ms-encryption-algorithm",
    xmlName: "x-ms-encryption-algorithm",
    type: {
      name: "String"
    }
  }
};
var ifMatch = exports.ifMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};
var ifNoneMatch = exports.ifNoneMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    xmlName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};
var ifTags = exports.ifTags = {
  parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
  mapper: {
    serializedName: "x-ms-if-tags",
    xmlName: "x-ms-if-tags",
    type: {
      name: "String"
    }
  }
};
var deleteSnapshots = exports.deleteSnapshots = {
  parameterPath: ["options", "deleteSnapshots"],
  mapper: {
    serializedName: "x-ms-delete-snapshots",
    xmlName: "x-ms-delete-snapshots",
    type: {
      name: "Enum",
      allowedValues: ["include", "only"]
    }
  }
};
var blobDeleteType = exports.blobDeleteType = {
  parameterPath: ["options", "blobDeleteType"],
  mapper: {
    serializedName: "deletetype",
    xmlName: "deletetype",
    type: {
      name: "String"
    }
  }
};
var comp11 = exports.comp11 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "expiry",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var expiryOptions = exports.expiryOptions = {
  parameterPath: "expiryOptions",
  mapper: {
    serializedName: "x-ms-expiry-option",
    required: true,
    xmlName: "x-ms-expiry-option",
    type: {
      name: "String"
    }
  }
};
var expiresOn = exports.expiresOn = {
  parameterPath: ["options", "expiresOn"],
  mapper: {
    serializedName: "x-ms-expiry-time",
    xmlName: "x-ms-expiry-time",
    type: {
      name: "String"
    }
  }
};
var blobCacheControl = exports.blobCacheControl = {
  parameterPath: ["options", "blobHttpHeaders", "blobCacheControl"],
  mapper: {
    serializedName: "x-ms-blob-cache-control",
    xmlName: "x-ms-blob-cache-control",
    type: {
      name: "String"
    }
  }
};
var blobContentType = exports.blobContentType = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentType"],
  mapper: {
    serializedName: "x-ms-blob-content-type",
    xmlName: "x-ms-blob-content-type",
    type: {
      name: "String"
    }
  }
};
var blobContentMD5 = exports.blobContentMD5 = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentMD5"],
  mapper: {
    serializedName: "x-ms-blob-content-md5",
    xmlName: "x-ms-blob-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
var blobContentEncoding = exports.blobContentEncoding = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentEncoding"],
  mapper: {
    serializedName: "x-ms-blob-content-encoding",
    xmlName: "x-ms-blob-content-encoding",
    type: {
      name: "String"
    }
  }
};
var blobContentLanguage = exports.blobContentLanguage = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentLanguage"],
  mapper: {
    serializedName: "x-ms-blob-content-language",
    xmlName: "x-ms-blob-content-language",
    type: {
      name: "String"
    }
  }
};
var blobContentDisposition = exports.blobContentDisposition = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentDisposition"],
  mapper: {
    serializedName: "x-ms-blob-content-disposition",
    xmlName: "x-ms-blob-content-disposition",
    type: {
      name: "String"
    }
  }
};
var comp12 = exports.comp12 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "immutabilityPolicies",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var immutabilityPolicyExpiry = exports.immutabilityPolicyExpiry = {
  parameterPath: ["options", "immutabilityPolicyExpiry"],
  mapper: {
    serializedName: "x-ms-immutability-policy-until-date",
    xmlName: "x-ms-immutability-policy-until-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var immutabilityPolicyMode = exports.immutabilityPolicyMode = {
  parameterPath: ["options", "immutabilityPolicyMode"],
  mapper: {
    serializedName: "x-ms-immutability-policy-mode",
    xmlName: "x-ms-immutability-policy-mode",
    type: {
      name: "Enum",
      allowedValues: ["Mutable", "Unlocked", "Locked"]
    }
  }
};
var comp13 = exports.comp13 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "legalhold",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var legalHold = exports.legalHold = {
  parameterPath: "legalHold",
  mapper: {
    serializedName: "x-ms-legal-hold",
    required: true,
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
var encryptionScope = exports.encryptionScope = {
  parameterPath: ["options", "encryptionScope"],
  mapper: {
    serializedName: "x-ms-encryption-scope",
    xmlName: "x-ms-encryption-scope",
    type: {
      name: "String"
    }
  }
};
var comp14 = exports.comp14 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "snapshot",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tier = exports.tier = {
  parameterPath: ["options", "tier"],
  mapper: {
    serializedName: "x-ms-access-tier",
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold"]
    }
  }
};
var rehydratePriority = exports.rehydratePriority = {
  parameterPath: ["options", "rehydratePriority"],
  mapper: {
    serializedName: "x-ms-rehydrate-priority",
    xmlName: "x-ms-rehydrate-priority",
    type: {
      name: "Enum",
      allowedValues: ["High", "Standard"]
    }
  }
};
var sourceIfModifiedSince = exports.sourceIfModifiedSince = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfModifiedSince"],
  mapper: {
    serializedName: "x-ms-source-if-modified-since",
    xmlName: "x-ms-source-if-modified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var sourceIfUnmodifiedSince = exports.sourceIfUnmodifiedSince = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfUnmodifiedSince"],
  mapper: {
    serializedName: "x-ms-source-if-unmodified-since",
    xmlName: "x-ms-source-if-unmodified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
var sourceIfMatch = exports.sourceIfMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
  mapper: {
    serializedName: "x-ms-source-if-match",
    xmlName: "x-ms-source-if-match",
    type: {
      name: "String"
    }
  }
};
var sourceIfNoneMatch = exports.sourceIfNoneMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfNoneMatch"],
  mapper: {
    serializedName: "x-ms-source-if-none-match",
    xmlName: "x-ms-source-if-none-match",
    type: {
      name: "String"
    }
  }
};
var sourceIfTags = exports.sourceIfTags = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
  mapper: {
    serializedName: "x-ms-source-if-tags",
    xmlName: "x-ms-source-if-tags",
    type: {
      name: "String"
    }
  }
};
var copySource = exports.copySource = {
  parameterPath: "copySource",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
var blobTagsString = exports.blobTagsString = {
  parameterPath: ["options", "blobTagsString"],
  mapper: {
    serializedName: "x-ms-tags",
    xmlName: "x-ms-tags",
    type: {
      name: "String"
    }
  }
};
var sealBlob = exports.sealBlob = {
  parameterPath: ["options", "sealBlob"],
  mapper: {
    serializedName: "x-ms-seal-blob",
    xmlName: "x-ms-seal-blob",
    type: {
      name: "Boolean"
    }
  }
};
var legalHold1 = exports.legalHold1 = {
  parameterPath: ["options", "legalHold"],
  mapper: {
    serializedName: "x-ms-legal-hold",
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
var xMsRequiresSync = exports.xMsRequiresSync = {
  parameterPath: "xMsRequiresSync",
  mapper: {
    defaultValue: "true",
    isConstant: true,
    serializedName: "x-ms-requires-sync",
    type: {
      name: "String"
    }
  }
};
var sourceContentMD5 = exports.sourceContentMD5 = {
  parameterPath: ["options", "sourceContentMD5"],
  mapper: {
    serializedName: "x-ms-source-content-md5",
    xmlName: "x-ms-source-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
var copySourceAuthorization = exports.copySourceAuthorization = {
  parameterPath: ["options", "copySourceAuthorization"],
  mapper: {
    serializedName: "x-ms-copy-source-authorization",
    xmlName: "x-ms-copy-source-authorization",
    type: {
      name: "String"
    }
  }
};
var copySourceTags = exports.copySourceTags = {
  parameterPath: ["options", "copySourceTags"],
  mapper: {
    serializedName: "x-ms-copy-source-tag-option",
    xmlName: "x-ms-copy-source-tag-option",
    type: {
      name: "Enum",
      allowedValues: ["REPLACE", "COPY"]
    }
  }
};
var comp15 = exports.comp15 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "copy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var copyActionAbortConstant = exports.copyActionAbortConstant = {
  parameterPath: "copyActionAbortConstant",
  mapper: {
    defaultValue: "abort",
    isConstant: true,
    serializedName: "x-ms-copy-action",
    type: {
      name: "String"
    }
  }
};
var copyId = exports.copyId = {
  parameterPath: "copyId",
  mapper: {
    serializedName: "copyid",
    required: true,
    xmlName: "copyid",
    type: {
      name: "String"
    }
  }
};
var comp16 = exports.comp16 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tier",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tier1 = exports.tier1 = {
  parameterPath: "tier",
  mapper: {
    serializedName: "x-ms-access-tier",
    required: true,
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: ["P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold"]
    }
  }
};
var queryRequest = exports.queryRequest = {
  parameterPath: ["options", "queryRequest"],
  mapper: _mappers.QueryRequest
};
var comp17 = exports.comp17 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "query",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var comp18 = exports.comp18 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tags",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var tags = exports.tags = {
  parameterPath: ["options", "tags"],
  mapper: _mappers.BlobTags
};
var transactionalContentMD5 = exports.transactionalContentMD5 = {
  parameterPath: ["options", "transactionalContentMD5"],
  mapper: {
    serializedName: "Content-MD5",
    xmlName: "Content-MD5",
    type: {
      name: "ByteArray"
    }
  }
};
var transactionalContentCrc64 = exports.transactionalContentCrc64 = {
  parameterPath: ["options", "transactionalContentCrc64"],
  mapper: {
    serializedName: "x-ms-content-crc64",
    xmlName: "x-ms-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
var blobType = exports.blobType = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "PageBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var blobContentLength = exports.blobContentLength = {
  parameterPath: "blobContentLength",
  mapper: {
    serializedName: "x-ms-blob-content-length",
    required: true,
    xmlName: "x-ms-blob-content-length",
    type: {
      name: "Number"
    }
  }
};
var blobSequenceNumber = exports.blobSequenceNumber = {
  parameterPath: ["options", "blobSequenceNumber"],
  mapper: {
    defaultValue: 0,
    serializedName: "x-ms-blob-sequence-number",
    xmlName: "x-ms-blob-sequence-number",
    type: {
      name: "Number"
    }
  }
};
var contentType1 = exports.contentType1 = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
var body1 = exports.body1 = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
var accept2 = exports.accept2 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
var comp19 = exports.comp19 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "page",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var pageWrite = exports.pageWrite = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "update",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
var ifSequenceNumberLessThanOrEqualTo = exports.ifSequenceNumberLessThanOrEqualTo = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThanOrEqualTo"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-le",
    xmlName: "x-ms-if-sequence-number-le",
    type: {
      name: "Number"
    }
  }
};
var ifSequenceNumberLessThan = exports.ifSequenceNumberLessThan = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThan"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-lt",
    xmlName: "x-ms-if-sequence-number-lt",
    type: {
      name: "Number"
    }
  }
};
var ifSequenceNumberEqualTo = exports.ifSequenceNumberEqualTo = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberEqualTo"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-eq",
    xmlName: "x-ms-if-sequence-number-eq",
    type: {
      name: "Number"
    }
  }
};
var pageWrite1 = exports.pageWrite1 = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "clear",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
var sourceUrl = exports.sourceUrl = {
  parameterPath: "sourceUrl",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
var sourceRange = exports.sourceRange = {
  parameterPath: "sourceRange",
  mapper: {
    serializedName: "x-ms-source-range",
    required: true,
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
var sourceContentCrc64 = exports.sourceContentCrc64 = {
  parameterPath: ["options", "sourceContentCrc64"],
  mapper: {
    serializedName: "x-ms-source-content-crc64",
    xmlName: "x-ms-source-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
var range1 = exports.range1 = {
  parameterPath: "range",
  mapper: {
    serializedName: "x-ms-range",
    required: true,
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
var comp20 = exports.comp20 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "pagelist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var prevsnapshot = exports.prevsnapshot = {
  parameterPath: ["options", "prevsnapshot"],
  mapper: {
    serializedName: "prevsnapshot",
    xmlName: "prevsnapshot",
    type: {
      name: "String"
    }
  }
};
var prevSnapshotUrl = exports.prevSnapshotUrl = {
  parameterPath: ["options", "prevSnapshotUrl"],
  mapper: {
    serializedName: "x-ms-previous-snapshot-url",
    xmlName: "x-ms-previous-snapshot-url",
    type: {
      name: "String"
    }
  }
};
var sequenceNumberAction = exports.sequenceNumberAction = {
  parameterPath: "sequenceNumberAction",
  mapper: {
    serializedName: "x-ms-sequence-number-action",
    required: true,
    xmlName: "x-ms-sequence-number-action",
    type: {
      name: "Enum",
      allowedValues: ["max", "update", "increment"]
    }
  }
};
var comp21 = exports.comp21 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "incrementalcopy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blobType1 = exports.blobType1 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "AppendBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var comp22 = exports.comp22 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "appendblock",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var maxSize = exports.maxSize = {
  parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
  mapper: {
    serializedName: "x-ms-blob-condition-maxsize",
    xmlName: "x-ms-blob-condition-maxsize",
    type: {
      name: "Number"
    }
  }
};
var appendPosition = exports.appendPosition = {
  parameterPath: ["options", "appendPositionAccessConditions", "appendPosition"],
  mapper: {
    serializedName: "x-ms-blob-condition-appendpos",
    xmlName: "x-ms-blob-condition-appendpos",
    type: {
      name: "Number"
    }
  }
};
var sourceRange1 = exports.sourceRange1 = {
  parameterPath: ["options", "sourceRange"],
  mapper: {
    serializedName: "x-ms-source-range",
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
var comp23 = exports.comp23 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "seal",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blobType2 = exports.blobType2 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "BlockBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
var copySourceBlobProperties = exports.copySourceBlobProperties = {
  parameterPath: ["options", "copySourceBlobProperties"],
  mapper: {
    serializedName: "x-ms-copy-source-blob-properties",
    xmlName: "x-ms-copy-source-blob-properties",
    type: {
      name: "Boolean"
    }
  }
};
var comp24 = exports.comp24 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "block",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var blockId = exports.blockId = {
  parameterPath: "blockId",
  mapper: {
    serializedName: "blockid",
    required: true,
    xmlName: "blockid",
    type: {
      name: "String"
    }
  }
};
var blocks = exports.blocks = {
  parameterPath: "blocks",
  mapper: _mappers.BlockLookupList
};
var comp25 = exports.comp25 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blocklist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
var listType = exports.listType = {
  parameterPath: "listType",
  mapper: {
    defaultValue: "committed",
    serializedName: "blocklisttype",
    required: true,
    xmlName: "blocklisttype",
    type: {
      name: "Enum",
      allowedValues: ["committed", "uncommitted", "all"]
    }
  }
};
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServiceImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Service operations. */
var ServiceImpl = exports.ServiceImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  function ServiceImpl(client) {
    _classCallCheck(this, ServiceImpl);
    this.client = client;
  }
  /**
   * Sets properties for a storage account's Blob service endpoint, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules
   * @param blobServiceProperties The StorageService properties.
   * @param options The options parameters.
   */
  return _createClass(ServiceImpl, [{
    key: "setProperties",
    value: function setProperties(blobServiceProperties, options) {
      return this.client.sendOperationRequest({
        blobServiceProperties: blobServiceProperties,
        options: options
      }, setPropertiesOperationSpec);
    }
    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics
     * and CORS (Cross-Origin Resource Sharing) rules.
     * @param options The options parameters.
     */
  }, {
    key: "getProperties",
    value: function getProperties(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getPropertiesOperationSpec);
    }
    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the
     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
     * account.
     * @param options The options parameters.
     */
  }, {
    key: "getStatistics",
    value: function getStatistics(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getStatisticsOperationSpec);
    }
    /**
     * The List Containers Segment operation returns a list of the containers under the specified account
     * @param options The options parameters.
     */
  }, {
    key: "listContainersSegment",
    value: function listContainersSegment(options) {
      return this.client.sendOperationRequest({
        options: options
      }, listContainersSegmentOperationSpec);
    }
    /**
     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
     * bearer token authentication.
     * @param keyInfo Key information
     * @param options The options parameters.
     */
  }, {
    key: "getUserDelegationKey",
    value: function getUserDelegationKey(keyInfo, options) {
      return this.client.sendOperationRequest({
        keyInfo: keyInfo,
        options: options
      }, getUserDelegationKeyOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */
  }, {
    key: "getAccountInfo",
    value: function getAccountInfo(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getAccountInfoOperationSpec);
    }
    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * @param contentLength The length of the request.
     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
     * @param body Initial data
     * @param options The options parameters.
     */
  }, {
    key: "submitBatch",
    value: function submitBatch(contentLength, multipartContentType, body, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        multipartContentType: multipartContentType,
        body: body,
        options: options
      }, submitBatchOperationSpec);
    }
    /**
     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
     * given search expression.  Filter blobs searches across all containers within a storage account but
     * can be scoped within the expression to a single container.
     * @param options The options parameters.
     */
  }, {
    key: "filterBlobs",
    value: function filterBlobs(options) {
      return this.client.sendOperationRequest({
        options: options
      }, filterBlobsOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var setPropertiesOperationSpec = {
  path: "/",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders
    }
  },
  requestBody: Parameters.blobServiceProperties,
  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getPropertiesOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceProperties,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var getStatisticsOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceStatistics,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders
    }
  },
  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var listContainersSegmentOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersSegmentResponse,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.include],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var getUserDelegationKeyOperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UserDelegationKey,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders
    }
  },
  requestBody: Parameters.keyInfo,
  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp3],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getAccountInfoOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var submitBatchOperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var filterBlobsOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FilterBlobSegment,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Container operations. */
var ContainerImpl = exports.ContainerImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class Container class.
   * @param client Reference to the service client
   */
  function ContainerImpl(client) {
    _classCallCheck(this, ContainerImpl);
    this.client = client;
  }
  /**
   * creates a new container under the specified account. If the container with the same name already
   * exists, the operation fails
   * @param options The options parameters.
   */
  return _createClass(ContainerImpl, [{
    key: "create",
    value: function create(options) {
      return this.client.sendOperationRequest({
        options: options
      }, createOperationSpec);
    }
    /**
     * returns all user-defined metadata and system properties for the specified container. The data
     * returned does not include the container's list of blobs
     * @param options The options parameters.
     */
  }, {
    key: "getProperties",
    value: function getProperties(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getPropertiesOperationSpec);
    }
    /**
     * operation marks the specified container for deletion. The container and any blobs contained within
     * it are later deleted during garbage collection
     * @param options The options parameters.
     */
  }, {
    key: "delete",
    value: function _delete(options) {
      return this.client.sendOperationRequest({
        options: options
      }, deleteOperationSpec);
    }
    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * @param options The options parameters.
     */
  }, {
    key: "setMetadata",
    value: function setMetadata(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setMetadataOperationSpec);
    }
    /**
     * gets the permissions for the specified container. The permissions indicate whether container data
     * may be accessed publicly.
     * @param options The options parameters.
     */
  }, {
    key: "getAccessPolicy",
    value: function getAccessPolicy(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getAccessPolicyOperationSpec);
    }
    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a
     * container may be accessed publicly.
     * @param options The options parameters.
     */
  }, {
    key: "setAccessPolicy",
    value: function setAccessPolicy(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setAccessPolicyOperationSpec);
    }
    /**
     * Restores a previously-deleted container.
     * @param options The options parameters.
     */
  }, {
    key: "restore",
    value: function restore(options) {
      return this.client.sendOperationRequest({
        options: options
      }, restoreOperationSpec);
    }
    /**
     * Renames an existing container.
     * @param sourceContainerName Required.  Specifies the name of the container to rename.
     * @param options The options parameters.
     */
  }, {
    key: "rename",
    value: function rename(sourceContainerName, options) {
      return this.client.sendOperationRequest({
        sourceContainerName: sourceContainerName,
        options: options
      }, renameOperationSpec);
    }
    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * @param contentLength The length of the request.
     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
     * @param body Initial data
     * @param options The options parameters.
     */
  }, {
    key: "submitBatch",
    value: function submitBatch(contentLength, multipartContentType, body, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        multipartContentType: multipartContentType,
        body: body,
        options: options
      }, submitBatchOperationSpec);
    }
    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
     * search expression.  Filter blobs searches within the given container.
     * @param options The options parameters.
     */
  }, {
    key: "filterBlobs",
    value: function filterBlobs(options) {
      return this.client.sendOperationRequest({
        options: options
      }, filterBlobsOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param options The options parameters.
     */
  }, {
    key: "acquireLease",
    value: function acquireLease(options) {
      return this.client.sendOperationRequest({
        options: options
      }, acquireLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */
  }, {
    key: "releaseLease",
    value: function releaseLease(leaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        options: options
      }, releaseLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */
  }, {
    key: "renewLease",
    value: function renewLease(leaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        options: options
      }, renewLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param options The options parameters.
     */
  }, {
    key: "breakLease",
    value: function breakLease(options) {
      return this.client.sendOperationRequest({
        options: options
      }, breakLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
     *                        (String) for a list of valid GUID string formats.
     * @param options The options parameters.
     */
  }, {
    key: "changeLease",
    value: function changeLease(leaseId, proposedLeaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        proposedLeaseId: proposedLeaseId,
        options: options
      }, changeLeaseOperationSpec);
    }
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     * @param options The options parameters.
     */
  }, {
    key: "listBlobFlatSegment",
    value: function listBlobFlatSegment(options) {
      return this.client.sendOperationRequest({
        options: options
      }, listBlobFlatSegmentOperationSpec);
    }
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
     *                  character or a string.
     * @param options The options parameters.
     */
  }, {
    key: "listBlobHierarchySegment",
    value: function listBlobHierarchySegment(delimiter, options) {
      return this.client.sendOperationRequest({
        delimiter: delimiter,
        options: options
      }, listBlobHierarchySegmentOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */
  }, {
    key: "getAccountInfo",
    value: function getAccountInfo(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getAccountInfoOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var createOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.ContainerCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerCreateExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.access, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],
  isXML: true,
  serializer: xmlSerializer
};
var getPropertiesOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],
  isXML: true,
  serializer: xmlSerializer
};
var deleteOperationSpec = {
  path: "/{containerName}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.ContainerDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerDeleteExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  isXML: true,
  serializer: xmlSerializer
};
var setMetadataOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince],
  isXML: true,
  serializer: xmlSerializer
};
var getAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        },
        serializedName: "SignedIdentifiers",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier"
      },
      headersMapper: Mappers.ContainerGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],
  isXML: true,
  serializer: xmlSerializer
};
var setAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders
    }
  },
  requestBody: Parameters.containerAcl,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.access, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var restoreOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.ContainerRestoreHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRestoreExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.deletedContainerName, Parameters.deletedContainerVersion],
  isXML: true,
  serializer: xmlSerializer
};
var renameOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRenameHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRenameExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.sourceContainerName, Parameters.sourceLeaseId],
  isXML: true,
  serializer: xmlSerializer
};
var submitBatchOperationSpec = {
  path: "/{containerName}",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4, Parameters.restype2],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var filterBlobsOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FilterBlobSegment,
      headersMapper: Mappers.ContainerFilterBlobsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where, Parameters.restype2],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var acquireLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.ContainerAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId],
  isXML: true,
  serializer: xmlSerializer
};
var releaseLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1],
  isXML: true,
  serializer: xmlSerializer
};
var renewLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2],
  isXML: true,
  serializer: xmlSerializer
};
var breakLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.ContainerBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod],
  isXML: true,
  serializer: xmlSerializer
};
var changeLeaseOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.ContainerChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1],
  isXML: true,
  serializer: xmlSerializer
};
var listBlobFlatSegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,
      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var listBlobHierarchySegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,
      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1, Parameters.delimiter],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var getAccountInfoOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Blob operations. */
var BlobImpl = exports.BlobImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class Blob class.
   * @param client Reference to the service client
   */
  function BlobImpl(client) {
    _classCallCheck(this, BlobImpl);
    this.client = client;
  }
  /**
   * The Download operation reads or downloads a blob from the system, including its metadata and
   * properties. You can also call Download to read a snapshot.
   * @param options The options parameters.
   */
  return _createClass(BlobImpl, [{
    key: "download",
    value: function download(options) {
      return this.client.sendOperationRequest({
        options: options
      }, downloadOperationSpec);
    }
    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
     * properties for the blob. It does not return the content of the blob.
     * @param options The options parameters.
     */
  }, {
    key: "getProperties",
    value: function getProperties(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getPropertiesOperationSpec);
    }
    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
     * permanently removed from the storage account. If the storage account's soft delete feature is
     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
     * immediately. However, the blob service retains the blob or snapshot for the number of days specified
     * by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
     * permanently removed from the storage account. Note that you continue to be charged for the
     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
     * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
     * (ResourceNotFound).
     * @param options The options parameters.
     */
  }, {
    key: "delete",
    value: function _delete(options) {
      return this.client.sendOperationRequest({
        options: options
      }, deleteOperationSpec);
    }
    /**
     * Undelete a blob that was previously soft deleted
     * @param options The options parameters.
     */
  }, {
    key: "undelete",
    value: function undelete(options) {
      return this.client.sendOperationRequest({
        options: options
      }, undeleteOperationSpec);
    }
    /**
     * Sets the time a blob will expire and be deleted.
     * @param expiryOptions Required. Indicates mode of the expiry time
     * @param options The options parameters.
     */
  }, {
    key: "setExpiry",
    value: function setExpiry(expiryOptions, options) {
      return this.client.sendOperationRequest({
        expiryOptions: expiryOptions,
        options: options
      }, setExpiryOperationSpec);
    }
    /**
     * The Set HTTP Headers operation sets system properties on the blob
     * @param options The options parameters.
     */
  }, {
    key: "setHttpHeaders",
    value: function setHttpHeaders(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setHttpHeadersOperationSpec);
    }
    /**
     * The Set Immutability Policy operation sets the immutability policy on the blob
     * @param options The options parameters.
     */
  }, {
    key: "setImmutabilityPolicy",
    value: function setImmutabilityPolicy(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setImmutabilityPolicyOperationSpec);
    }
    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob
     * @param options The options parameters.
     */
  }, {
    key: "deleteImmutabilityPolicy",
    value: function deleteImmutabilityPolicy(options) {
      return this.client.sendOperationRequest({
        options: options
      }, deleteImmutabilityPolicyOperationSpec);
    }
    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param options The options parameters.
     */
  }, {
    key: "setLegalHold",
    value: function setLegalHold(legalHold, options) {
      return this.client.sendOperationRequest({
        legalHold: legalHold,
        options: options
      }, setLegalHoldOperationSpec);
    }
    /**
     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
     * name-value pairs
     * @param options The options parameters.
     */
  }, {
    key: "setMetadata",
    value: function setMetadata(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setMetadataOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param options The options parameters.
     */
  }, {
    key: "acquireLease",
    value: function acquireLease(options) {
      return this.client.sendOperationRequest({
        options: options
      }, acquireLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */
  }, {
    key: "releaseLease",
    value: function releaseLease(leaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        options: options
      }, releaseLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */
  }, {
    key: "renewLease",
    value: function renewLease(leaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        options: options
      }, renewLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
     *                        (String) for a list of valid GUID string formats.
     * @param options The options parameters.
     */
  }, {
    key: "changeLease",
    value: function changeLease(leaseId, proposedLeaseId, options) {
      return this.client.sendOperationRequest({
        leaseId: leaseId,
        proposedLeaseId: proposedLeaseId,
        options: options
      }, changeLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param options The options parameters.
     */
  }, {
    key: "breakLease",
    value: function breakLease(options) {
      return this.client.sendOperationRequest({
        options: options
      }, breakLeaseOperationSpec);
    }
    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob
     * @param options The options parameters.
     */
  }, {
    key: "createSnapshot",
    value: function createSnapshot(options) {
      return this.client.sendOperationRequest({
        options: options
      }, createSnapshotOperationSpec);
    }
    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */
  }, {
    key: "startCopyFromURL",
    value: function startCopyFromURL(copySource, options) {
      return this.client.sendOperationRequest({
        copySource: copySource,
        options: options
      }, startCopyFromURLOperationSpec);
    }
    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
     * a response until the copy is complete.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */
  }, {
    key: "copyFromURL",
    value: function copyFromURL(copySource, options) {
      return this.client.sendOperationRequest({
        copySource: copySource,
        options: options
      }, copyFromURLOperationSpec);
    }
    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
     * blob with zero length and full metadata.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
     *               operation.
     * @param options The options parameters.
     */
  }, {
    key: "abortCopyFromURL",
    value: function abortCopyFromURL(copyId, options) {
      return this.client.sendOperationRequest({
        copyId: copyId,
        options: options
      }, abortCopyFromURLOperationSpec);
    }
    /**
     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant storage only). A
     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
     * ETag.
     * @param tier Indicates the tier to be set on the blob.
     * @param options The options parameters.
     */
  }, {
    key: "setTier",
    value: function setTier(tier, options) {
      return this.client.sendOperationRequest({
        tier: tier,
        options: options
      }, setTierOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */
  }, {
    key: "getAccountInfo",
    value: function getAccountInfo(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getAccountInfoOperationSpec);
    }
    /**
     * The Query operation enables users to select/project on blob data by providing simple query
     * expressions.
     * @param options The options parameters.
     */
  }, {
    key: "query",
    value: function query(options) {
      return this.client.sendOperationRequest({
        options: options
      }, queryOperationSpec);
    }
    /**
     * The Get Tags operation enables users to get the tags associated with a blob.
     * @param options The options parameters.
     */
  }, {
    key: "getTags",
    value: function getTags(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getTagsOperationSpec);
    }
    /**
     * The Set Tags operation enables users to set tags on a blob.
     * @param options The options parameters.
     */
  }, {
    key: "setTags",
    value: function setTags(options) {
      return this.client.sendOperationRequest({
        options: options
      }, setTagsOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var downloadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    206: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDownloadExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var getPropertiesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.BlobGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var deleteOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.BlobDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDeleteExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.blobDeleteType],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.deleteSnapshots],
  isXML: true,
  serializer: xmlSerializer
};
var undeleteOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobUndeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobUndeleteExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var setExpiryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetExpiryHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetExpiryExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.expiryOptions, Parameters.expiresOn],
  isXML: true,
  serializer: xmlSerializer
};
var setHttpHeadersOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetHttpHeadersHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition],
  isXML: true,
  serializer: xmlSerializer
};
var setImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifUnmodifiedSince, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode],
  isXML: true,
  serializer: xmlSerializer
};
var deleteImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var setLegalHoldOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetLegalHoldHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.legalHold],
  isXML: true,
  serializer: xmlSerializer
};
var setMetadataOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetMetadataExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],
  isXML: true,
  serializer: xmlSerializer
};
var acquireLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlobAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var releaseLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var renewLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var changeLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var breakLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.BlobBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var createSnapshotOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlobCreateSnapshotHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],
  isXML: true,
  serializer: xmlSerializer
};
var startCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.BlobStartCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.tier, Parameters.rehydratePriority, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sealBlob, Parameters.legalHold1],
  isXML: true,
  serializer: xmlSerializer
};
var copyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.BlobCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.copySource, Parameters.blobTagsString, Parameters.legalHold1, Parameters.xMsRequiresSync, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags],
  isXML: true,
  serializer: xmlSerializer
};
var abortCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: Mappers.BlobAbortCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp15, Parameters.copyId],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.copyActionAbortConstant],
  isXML: true,
  serializer: xmlSerializer
};
var setTierOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    202: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetTierExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags, Parameters.rehydratePriority, Parameters.tier1],
  isXML: true,
  serializer: xmlSerializer
};
var getAccountInfoOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.BlobGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
var queryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.BlobQueryHeaders
    },
    206: {
      bodyMapper: {
        type: {
          name: "Stream"
        },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.BlobQueryHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobQueryExceptionHeaders
    }
  },
  requestBody: Parameters.queryRequest,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp17],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlobTags,
      headersMapper: Mappers.BlobGetTagsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetTagsExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp18],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var setTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: Mappers.BlobSetTagsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetTagsExceptionHeaders
    }
  },
  requestBody: Parameters.tags,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp18],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifTags, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageBlobImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PageBlob operations. */
var PageBlobImpl = exports.PageBlobImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class PageBlob class.
   * @param client Reference to the service client
   */
  function PageBlobImpl(client) {
    _classCallCheck(this, PageBlobImpl);
    this.client = client;
  }
  /**
   * The Create operation creates a new page blob.
   * @param contentLength The length of the request.
   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
   *                          page blob size must be aligned to a 512-byte boundary.
   * @param options The options parameters.
   */
  return _createClass(PageBlobImpl, [{
    key: "create",
    value: function create(contentLength, blobContentLength, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        blobContentLength: blobContentLength,
        options: options
      }, createOperationSpec);
    }
    /**
     * The Upload Pages operation writes a range of pages to a page blob
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */
  }, {
    key: "uploadPages",
    value: function uploadPages(contentLength, body, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        body: body,
        options: options
      }, uploadPagesOperationSpec);
    }
    /**
     * The Clear Pages operation clears a set of pages from a page blob
     * @param contentLength The length of the request.
     * @param options The options parameters.
     */
  }, {
    key: "clearPages",
    value: function clearPages(contentLength, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        options: options
      }, clearPagesOperationSpec);
    }
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
     * URL
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range. The length of this range should
     *                    match the ContentLength header and x-ms-range/Range destination range header.
     * @param contentLength The length of the request.
     * @param range The range of bytes to which the source range would be written. The range should be 512
     *              aligned and range-end is required.
     * @param options The options parameters.
     */
  }, {
    key: "uploadPagesFromURL",
    value: function uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {
      return this.client.sendOperationRequest({
        sourceUrl: sourceUrl,
        sourceRange: sourceRange,
        contentLength: contentLength,
        range: range,
        options: options
      }, uploadPagesFromURLOperationSpec);
    }
    /**
     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
     * page blob
     * @param options The options parameters.
     */
  }, {
    key: "getPageRanges",
    value: function getPageRanges(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getPageRangesOperationSpec);
    }
    /**
     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
     * changed between target blob and previous snapshot.
     * @param options The options parameters.
     */
  }, {
    key: "getPageRangesDiff",
    value: function getPageRangesDiff(options) {
      return this.client.sendOperationRequest({
        options: options
      }, getPageRangesDiffOperationSpec);
    }
    /**
     * Resize the Blob
     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
     *                          page blob size must be aligned to a 512-byte boundary.
     * @param options The options parameters.
     */
  }, {
    key: "resize",
    value: function resize(blobContentLength, options) {
      return this.client.sendOperationRequest({
        blobContentLength: blobContentLength,
        options: options
      }, resizeOperationSpec);
    }
    /**
     * Update the sequence number of the blob
     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
     *                             This property applies to page blobs only. This property indicates how the service should modify the
     *                             blob's sequence number
     * @param options The options parameters.
     */
  }, {
    key: "updateSequenceNumber",
    value: function updateSequenceNumber(sequenceNumberAction, options) {
      return this.client.sendOperationRequest({
        sequenceNumberAction: sequenceNumberAction,
        options: options
      }, updateSequenceNumberOperationSpec);
    }
    /**
     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
     * The snapshot is copied such that only the differential changes between the previously copied
     * snapshot are transferred to the destination. The copied snapshots are complete copies of the
     * original snapshot and can be read or copied from as usual. This API is supported since REST version
     * 2016-05-31.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */
  }, {
    key: "copyIncremental",
    value: function copyIncremental(copySource, options) {
      return this.client.sendOperationRequest({
        copySource: copySource,
        options: options
      }, copyIncrementalOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var createOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobCreateExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType, Parameters.blobContentLength, Parameters.blobSequenceNumber],
  isXML: true,
  serializer: xmlSerializer
};
var uploadPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
var clearPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobClearPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.pageWrite1],
  isXML: true,
  serializer: xmlSerializer
};
var uploadPagesFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.sourceUrl, Parameters.sourceRange, Parameters.sourceContentCrc64, Parameters.range1],
  isXML: true,
  serializer: xmlSerializer
};
var getPageRangesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
var getPageRangesDiffOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20, Parameters.prevsnapshot],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.prevSnapshotUrl],
  isXML: true,
  serializer: xmlSerializer
};
var resizeOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.PageBlobResizeHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobResizeExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.blobContentLength],
  isXML: true,
  serializer: xmlSerializer
};
var updateSequenceNumberOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobSequenceNumber, Parameters.sequenceNumberAction],
  isXML: true,
  serializer: xmlSerializer
};
var copyIncrementalOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.PageBlobCopyIncrementalHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.copySource],
  isXML: true,
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppendBlobImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing AppendBlob operations. */
var AppendBlobImpl = exports.AppendBlobImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class AppendBlob class.
   * @param client Reference to the service client
   */
  function AppendBlobImpl(client) {
    _classCallCheck(this, AppendBlobImpl);
    this.client = client;
  }
  /**
   * The Create Append Blob operation creates a new append blob.
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  return _createClass(AppendBlobImpl, [{
    key: "create",
    value: function create(contentLength, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        options: options
      }, createOperationSpec);
    }
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob. The
     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */
  }, {
    key: "appendBlock",
    value: function appendBlock(contentLength, body, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        body: body,
        options: options
      }, appendBlockOperationSpec);
    }
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob where
     * the contents are read from a source url. The Append Block operation is permitted only if the blob
     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
     * 2015-02-21 version or later.
     * @param sourceUrl Specify a URL to the copy source.
     * @param contentLength The length of the request.
     * @param options The options parameters.
     */
  }, {
    key: "appendBlockFromUrl",
    value: function appendBlockFromUrl(sourceUrl, contentLength, options) {
      return this.client.sendOperationRequest({
        sourceUrl: sourceUrl,
        contentLength: contentLength,
        options: options
      }, appendBlockFromUrlOperationSpec);
    }
    /**
     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
     * 2019-12-12 version or later.
     * @param options The options parameters.
     */
  }, {
    key: "seal",
    value: function seal(options) {
      return this.client.sendOperationRequest({
        options: options
      }, sealOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var createOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobCreateExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType1],
  isXML: true,
  serializer: xmlSerializer
};
var appendBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.maxSize, Parameters.appendPosition],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
var appendBlockFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.transactionalContentMD5, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.maxSize, Parameters.appendPosition, Parameters.sourceRange1],
  isXML: true,
  serializer: xmlSerializer
};
var sealOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.AppendBlobSealHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobSealExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.appendPosition],
  isXML: true,
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockBlobImpl = void 0;
var coreClient = _interopRequireWildcard(require("@azure/core-client"));
var Mappers = _interopRequireWildcard(require("../models/mappers"));
var Parameters = _interopRequireWildcard(require("../models/parameters"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BlockBlob operations. */
var BlockBlobImpl = exports.BlockBlobImpl = /*#__PURE__*/function () {
  /**
   * Initialize a new instance of the class BlockBlob class.
   * @param client Reference to the service client
   */
  function BlockBlobImpl(client) {
    _classCallCheck(this, BlockBlobImpl);
    this.client = client;
  }
  /**
   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
   * partial update of the content of a block blob, use the Put Block List operation.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  return _createClass(BlockBlobImpl, [{
    key: "upload",
    value: function upload(contentLength, body, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        body: body,
        options: options
      }, uploadOperationSpec);
    }
    /**
     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
     * use the Put Block from URL API in conjunction with Put Block List.
     * @param contentLength The length of the request.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */
  }, {
    key: "putBlobFromUrl",
    value: function putBlobFromUrl(contentLength, copySource, options) {
      return this.client.sendOperationRequest({
        contentLength: contentLength,
        copySource: copySource,
        options: options
      }, putBlobFromUrlOperationSpec);
    }
    /**
     * The Stage Block operation creates a new block to be committed as part of a blob
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
     *                for the blockid parameter must be the same size for each block.
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */
  }, {
    key: "stageBlock",
    value: function stageBlock(blockId, contentLength, body, options) {
      return this.client.sendOperationRequest({
        blockId: blockId,
        contentLength: contentLength,
        body: body,
        options: options
      }, stageBlockOperationSpec);
    }
    /**
     * The Stage Block operation creates a new block to be committed as part of a blob where the contents
     * are read from a URL.
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
     *                for the blockid parameter must be the same size for each block.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param options The options parameters.
     */
  }, {
    key: "stageBlockFromURL",
    value: function stageBlockFromURL(blockId, contentLength, sourceUrl, options) {
      return this.client.sendOperationRequest({
        blockId: blockId,
        contentLength: contentLength,
        sourceUrl: sourceUrl,
        options: options
      }, stageBlockFromURLOperationSpec);
    }
    /**
     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
     * blob. In order to be written as part of a blob, a block must have been successfully written to the
     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
     * only those blocks that have changed, then committing the new and existing blocks together. You can
     * do this by specifying whether to commit a block from the committed block list or from the
     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
     * it may belong to.
     * @param blocks Blob Blocks.
     * @param options The options parameters.
     */
  }, {
    key: "commitBlockList",
    value: function commitBlockList(blocks, options) {
      return this.client.sendOperationRequest({
        blocks: blocks,
        options: options
      }, commitBlockListOperationSpec);
    }
    /**
     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
     * blob
     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
     *                 blocks, or both lists together.
     * @param options The options parameters.
     */
  }, {
    key: "getBlockList",
    value: function getBlockList(listType, options) {
      return this.client.sendOperationRequest({
        listType: listType,
        options: options
      }, getBlockListOperationSpec);
    }
  }]);
}(); // Operation Specifications
var xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);
var uploadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobUploadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobUploadExceptionHeaders
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.blobType2],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
var putBlobFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.transactionalContentMD5, Parameters.blobType2, Parameters.copySourceBlobProperties],
  isXML: true,
  serializer: xmlSerializer
};
var stageBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
var stageBlockFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.sourceRange1],
  isXML: true,
  serializer: xmlSerializer
};
var commitBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobCommitBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders
    }
  },
  requestBody: Parameters.blocks,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
var getBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlockList,
      headersMapper: Mappers.BlockBlobGetBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp25, Parameters.listType],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],
  isXML: true,
  serializer: xmlSerializer
};
},{"@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _service = require("./service");
Object.keys(_service).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _service[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _service[key];
    }
  });
});
var _container = require("./container");
Object.keys(_container).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _container[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _container[key];
    }
  });
});
var _blob = require("./blob");
Object.keys(_blob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blob[key];
    }
  });
});
var _pageBlob = require("./pageBlob");
Object.keys(_pageBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pageBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pageBlob[key];
    }
  });
});
var _appendBlob = require("./appendBlob");
Object.keys(_appendBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _appendBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _appendBlob[key];
    }
  });
});
var _blockBlob = require("./blockBlob");
Object.keys(_blockBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blockBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blockBlob[key];
    }
  });
});
},{"./service":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js","./container":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js","./blob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js","./pageBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js","./appendBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js","./blockBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageClient = void 0;
var coreHttpCompat = _interopRequireWildcard(require("@azure/core-http-compat"));
var _operations = require("./operations");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } /*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
var StorageClient = exports.StorageClient = /*#__PURE__*/function (_coreHttpCompat$Exten) {
  /**
   * Initializes a new instance of the StorageClient class.
   * @param url The URL of the service account, container, or blob that is the target of the desired
   *            operation.
   * @param options The parameter options
   */
  function StorageClient(url, options) {
    var _this;
    _classCallCheck(this, StorageClient);
    var _a, _b;
    if (url === undefined) {
      throw new Error("'url' cannot be null");
    }
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    var defaults = {
      requestContentType: "application/json; charset=utf-8"
    };
    var packageDetails = "azsdk-js-azure-storage-blob/12.24.0";
    var userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? "".concat(options.userAgentOptions.userAgentPrefix, " ").concat(packageDetails) : "".concat(packageDetails);
    var optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), {
      userAgentOptions: {
        userAgentPrefix: userAgentPrefix
      },
      endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{url}"
    });
    _this = _callSuper(this, StorageClient, [optionsWithDefaults]);
    // Parameter assignments
    _this.url = url;
    // Assigning values to Constant parameters
    _this.version = options.version || "2024-08-04";
    _this.service = new _operations.ServiceImpl(_this);
    _this.container = new _operations.ContainerImpl(_this);
    _this.blob = new _operations.BlobImpl(_this);
    _this.pageBlob = new _operations.PageBlobImpl(_this);
    _this.appendBlob = new _operations.AppendBlobImpl(_this);
    _this.blockBlob = new _operations.BlockBlobImpl(_this);
    return _this;
  }
  _inherits(StorageClient, _coreHttpCompat$Exten);
  return _createClass(StorageClient);
}(coreHttpCompat.ExtendedServiceClient);
},{"@azure/core-http-compat":"node_modules/@azure/core-http-compat/dist/browser/index.js","./operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/service.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/pageBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/appendBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blockBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _service = require("./service");
Object.keys(_service).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _service[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _service[key];
    }
  });
});
var _container = require("./container");
Object.keys(_container).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _container[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _container[key];
    }
  });
});
var _blob = require("./blob");
Object.keys(_blob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blob[key];
    }
  });
});
var _pageBlob = require("./pageBlob");
Object.keys(_pageBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pageBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pageBlob[key];
    }
  });
});
var _appendBlob = require("./appendBlob");
Object.keys(_appendBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _appendBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _appendBlob[key];
    }
  });
});
var _blockBlob = require("./blockBlob");
Object.keys(_blockBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blockBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blockBlob[key];
    }
  });
});
},{"./service":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/service.js","./container":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/container.js","./blob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blob.js","./pageBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/pageBlob.js","./appendBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/appendBlob.js","./blockBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/blockBlob.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  StorageClient: true
};
Object.defineProperty(exports, "StorageClient", {
  enumerable: true,
  get: function () {
    return _storageClient.StorageClient;
  }
});
var _models = require("./models");
Object.keys(_models).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _models[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _models[key];
    }
  });
});
var _storageClient = require("./storageClient");
var _operationsInterfaces = require("./operationsInterfaces");
Object.keys(_operationsInterfaces).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _operationsInterfaces[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _operationsInterfaces[key];
    }
  });
});
},{"./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js","./storageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js","./operationsInterfaces":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operationsInterfaces/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageContextClient = void 0;
var _src = require("./generated/src");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * @internal
 */
var StorageContextClient = exports.StorageContextClient = /*#__PURE__*/function (_StorageClient) {
  function StorageContextClient() {
    _classCallCheck(this, StorageContextClient);
    return _callSuper(this, StorageContextClient, arguments);
  }
  _inherits(StorageContextClient, _StorageClient);
  return _createClass(StorageContextClient, [{
    key: "sendOperationRequest",
    value: function () {
      var _sendOperationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(operationArguments, operationSpec) {
        var operationSpecToSend;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              operationSpecToSend = Object.assign({}, operationSpec);
              if (operationSpecToSend.path === "/{containerName}" || operationSpecToSend.path === "/{containerName}/{blob}") {
                operationSpecToSend.path = "";
              }
              return _context.abrupt("return", _get(_getPrototypeOf(StorageContextClient.prototype), "sendOperationRequest", this).call(this, operationArguments, operationSpecToSend));
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function sendOperationRequest(_x, _x2) {
        return _sendOperationRequest.apply(this, arguments);
      }
      return sendOperationRequest;
    }()
  }]);
}(_src.StorageClient);
},{"./generated/src":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageClient = void 0;
var _StorageContextClient = require("./StorageContextClient");
var _Pipeline = require("./Pipeline");
var _utils = require("./utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}
 * and etc.
 */
var StorageClient = exports.StorageClient = /*#__PURE__*/_createClass(
/**
 * Creates an instance of StorageClient.
 * @param url - url to resource
 * @param pipeline - request policy pipeline.
 */
function StorageClient(url, pipeline) {
  _classCallCheck(this, StorageClient);
  // URL should be encoded and only once, protocol layer shouldn't encode URL again
  this.url = (0, _utils.escapeURLPath)(url);
  this.accountName = (0, _utils.getAccountNameFromUrl)(url);
  this.pipeline = pipeline;
  this.storageClientContext = new _StorageContextClient.StorageContextClient(this.url, (0, _Pipeline.getCoreClientOptions)(pipeline));
  this.isHttps = (0, _utils.iEqual)((0, _utils.getURLScheme)(this.url) || "", "https");
  this.credential = (0, _Pipeline.getCredentialFromPipeline)(pipeline);
  // Override protocol layer's default content-type
  var storageClientContext = this.storageClientContext;
  storageClientContext.requestContentType = undefined;
});
},{"./StorageContextClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tracingClient = void 0;
var _coreTracing = require("@azure/core-tracing");
var _constants = require("./constants");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a span using the global tracer.
 * @internal
 */
var tracingClient = exports.tracingClient = (0, _coreTracing.createTracingClient)({
  packageName: "@azure/storage-blob",
  packageVersion: _constants.SDK_VERSION,
  namespace: "Microsoft.Storage"
});
},{"@azure/core-tracing":"node_modules/@azure/core-tracing/dist/browser/index.js","./constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobSASPermissions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting
 * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all
 * the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var BlobSASPermissions = exports.BlobSASPermissions = /*#__PURE__*/function () {
  function BlobSASPermissions() {
    _classCallCheck(this, BlobSASPermissions);
    /**
     * Specifies Read access granted.
     */
    this.read = false;
    /**
     * Specifies Add access granted.
     */
    this.add = false;
    /**
     * Specifies Create access granted.
     */
    this.create = false;
    /**
     * Specifies Write access granted.
     */
    this.write = false;
    /**
     * Specifies Delete access granted.
     */
    this.delete = false;
    /**
     * Specifies Delete version access granted.
     */
    this.deleteVersion = false;
    /**
     * Specfies Tag access granted.
     */
    this.tag = false;
    /**
     * Specifies Move access granted.
     */
    this.move = false;
    /**
     * Specifies Execute access granted.
     */
    this.execute = false;
    /**
     * Specifies SetImmutabilityPolicy access granted.
     */
    this.setImmutabilityPolicy = false;
    /**
     * Specifies that Permanent Delete is permitted.
     */
    this.permanentDelete = false;
  }
  /**
   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  return _createClass(BlobSASPermissions, [{
    key: "toString",
    value:
    /**
     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
     * order accepted by the service.
     *
     * @returns A string which represents the BlobSASPermissions
     */
    function toString() {
      var permissions = [];
      if (this.read) {
        permissions.push("r");
      }
      if (this.add) {
        permissions.push("a");
      }
      if (this.create) {
        permissions.push("c");
      }
      if (this.write) {
        permissions.push("w");
      }
      if (this.delete) {
        permissions.push("d");
      }
      if (this.deleteVersion) {
        permissions.push("x");
      }
      if (this.tag) {
        permissions.push("t");
      }
      if (this.move) {
        permissions.push("m");
      }
      if (this.execute) {
        permissions.push("e");
      }
      if (this.setImmutabilityPolicy) {
        permissions.push("i");
      }
      if (this.permanentDelete) {
        permissions.push("y");
      }
      return permissions.join("");
    }
  }], [{
    key: "parse",
    value: function parse(permissions) {
      var blobSASPermissions = new BlobSASPermissions();
      var _iterator = _createForOfIteratorHelper(permissions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var char = _step.value;
          switch (char) {
            case "r":
              blobSASPermissions.read = true;
              break;
            case "a":
              blobSASPermissions.add = true;
              break;
            case "c":
              blobSASPermissions.create = true;
              break;
            case "w":
              blobSASPermissions.write = true;
              break;
            case "d":
              blobSASPermissions.delete = true;
              break;
            case "x":
              blobSASPermissions.deleteVersion = true;
              break;
            case "t":
              blobSASPermissions.tag = true;
              break;
            case "m":
              blobSASPermissions.move = true;
              break;
            case "e":
              blobSASPermissions.execute = true;
              break;
            case "i":
              blobSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              blobSASPermissions.permanentDelete = true;
              break;
            default:
              throw new RangeError("Invalid permission: ".concat(char));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return blobSASPermissions;
    }
    /**
     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */
  }, {
    key: "from",
    value: function from(permissionLike) {
      var blobSASPermissions = new BlobSASPermissions();
      if (permissionLike.read) {
        blobSASPermissions.read = true;
      }
      if (permissionLike.add) {
        blobSASPermissions.add = true;
      }
      if (permissionLike.create) {
        blobSASPermissions.create = true;
      }
      if (permissionLike.write) {
        blobSASPermissions.write = true;
      }
      if (permissionLike.delete) {
        blobSASPermissions.delete = true;
      }
      if (permissionLike.deleteVersion) {
        blobSASPermissions.deleteVersion = true;
      }
      if (permissionLike.tag) {
        blobSASPermissions.tag = true;
      }
      if (permissionLike.move) {
        blobSASPermissions.move = true;
      }
      if (permissionLike.execute) {
        blobSASPermissions.execute = true;
      }
      if (permissionLike.setImmutabilityPolicy) {
        blobSASPermissions.setImmutabilityPolicy = true;
      }
      if (permissionLike.permanentDelete) {
        blobSASPermissions.permanentDelete = true;
      }
      return blobSASPermissions;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerSASPermissions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.
 * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.
 * Once all the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var ContainerSASPermissions = exports.ContainerSASPermissions = /*#__PURE__*/function () {
  function ContainerSASPermissions() {
    _classCallCheck(this, ContainerSASPermissions);
    /**
     * Specifies Read access granted.
     */
    this.read = false;
    /**
     * Specifies Add access granted.
     */
    this.add = false;
    /**
     * Specifies Create access granted.
     */
    this.create = false;
    /**
     * Specifies Write access granted.
     */
    this.write = false;
    /**
     * Specifies Delete access granted.
     */
    this.delete = false;
    /**
     * Specifies Delete version access granted.
     */
    this.deleteVersion = false;
    /**
     * Specifies List access granted.
     */
    this.list = false;
    /**
     * Specfies Tag access granted.
     */
    this.tag = false;
    /**
     * Specifies Move access granted.
     */
    this.move = false;
    /**
     * Specifies Execute access granted.
     */
    this.execute = false;
    /**
     * Specifies SetImmutabilityPolicy access granted.
     */
    this.setImmutabilityPolicy = false;
    /**
     * Specifies that Permanent Delete is permitted.
     */
    this.permanentDelete = false;
    /**
     * Specifies that Filter Blobs by Tags is permitted.
     */
    this.filterByTags = false;
  }
  /**
   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  return _createClass(ContainerSASPermissions, [{
    key: "toString",
    value:
    /**
     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
     * order accepted by the service.
     *
     * The order of the characters should be as specified here to ensure correctness.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     */
    function toString() {
      var permissions = [];
      if (this.read) {
        permissions.push("r");
      }
      if (this.add) {
        permissions.push("a");
      }
      if (this.create) {
        permissions.push("c");
      }
      if (this.write) {
        permissions.push("w");
      }
      if (this.delete) {
        permissions.push("d");
      }
      if (this.deleteVersion) {
        permissions.push("x");
      }
      if (this.list) {
        permissions.push("l");
      }
      if (this.tag) {
        permissions.push("t");
      }
      if (this.move) {
        permissions.push("m");
      }
      if (this.execute) {
        permissions.push("e");
      }
      if (this.setImmutabilityPolicy) {
        permissions.push("i");
      }
      if (this.permanentDelete) {
        permissions.push("y");
      }
      if (this.filterByTags) {
        permissions.push("f");
      }
      return permissions.join("");
    }
  }], [{
    key: "parse",
    value: function parse(permissions) {
      var containerSASPermissions = new ContainerSASPermissions();
      var _iterator = _createForOfIteratorHelper(permissions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var char = _step.value;
          switch (char) {
            case "r":
              containerSASPermissions.read = true;
              break;
            case "a":
              containerSASPermissions.add = true;
              break;
            case "c":
              containerSASPermissions.create = true;
              break;
            case "w":
              containerSASPermissions.write = true;
              break;
            case "d":
              containerSASPermissions.delete = true;
              break;
            case "l":
              containerSASPermissions.list = true;
              break;
            case "t":
              containerSASPermissions.tag = true;
              break;
            case "x":
              containerSASPermissions.deleteVersion = true;
              break;
            case "m":
              containerSASPermissions.move = true;
              break;
            case "e":
              containerSASPermissions.execute = true;
              break;
            case "i":
              containerSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              containerSASPermissions.permanentDelete = true;
              break;
            case "f":
              containerSASPermissions.filterByTags = true;
              break;
            default:
              throw new RangeError("Invalid permission ".concat(char));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return containerSASPermissions;
    }
    /**
     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */
  }, {
    key: "from",
    value: function from(permissionLike) {
      var containerSASPermissions = new ContainerSASPermissions();
      if (permissionLike.read) {
        containerSASPermissions.read = true;
      }
      if (permissionLike.add) {
        containerSASPermissions.add = true;
      }
      if (permissionLike.create) {
        containerSASPermissions.create = true;
      }
      if (permissionLike.write) {
        containerSASPermissions.write = true;
      }
      if (permissionLike.delete) {
        containerSASPermissions.delete = true;
      }
      if (permissionLike.list) {
        containerSASPermissions.list = true;
      }
      if (permissionLike.deleteVersion) {
        containerSASPermissions.deleteVersion = true;
      }
      if (permissionLike.tag) {
        containerSASPermissions.tag = true;
      }
      if (permissionLike.move) {
        containerSASPermissions.move = true;
      }
      if (permissionLike.execute) {
        containerSASPermissions.execute = true;
      }
      if (permissionLike.setImmutabilityPolicy) {
        containerSASPermissions.setImmutabilityPolicy = true;
      }
      if (permissionLike.permanentDelete) {
        containerSASPermissions.permanentDelete = true;
      }
      if (permissionLike.filterByTags) {
        containerSASPermissions.filterByTags = true;
      }
      return containerSASPermissions;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserDelegationKeyCredential = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var UserDelegationKeyCredential = exports.UserDelegationKeyCredential = /*#__PURE__*/_createClass(function UserDelegationKeyCredential() {
  _classCallCheck(this, UserDelegationKeyCredential);
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ipRangeToString = ipRangeToString;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Generate SasIPRange format string. For example:
 *
 * "8.8.8.8" or "1.1.1.1-255.255.255.255"
 *
 * @param ipRange -
 */
function ipRangeToString(ipRange) {
  return ipRange.end ? "".concat(ipRange.start, "-").concat(ipRange.end) : ipRange.start;
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SASQueryParameters = exports.SASProtocol = void 0;
var _SasIPRange = require("./SasIPRange");
var _utils = require("../utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Protocols for generated SAS.
 */
var SASProtocol;
(function (SASProtocol) {
  /**
   * Protocol that allows HTTPS only
   */
  SASProtocol["Https"] = "https";
  /**
   * Protocol that allows both HTTPS and HTTP
   */
  SASProtocol["HttpsAndHttp"] = "https,http";
})(SASProtocol || (exports.SASProtocol = SASProtocol = {}));
/**
 * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly
 * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}
 * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should
 * be taken here in case there are existing query parameters, which might affect the appropriate means of appending
 * these query parameters).
 *
 * NOTE: Instances of this class are immutable.
 */
var SASQueryParameters = exports.SASQueryParameters = /*#__PURE__*/function () {
  function SASQueryParameters(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {
    _classCallCheck(this, SASQueryParameters);
    this.version = version;
    this.signature = signature;
    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== "string") {
      // SASQueryParametersOptions
      this.permissions = permissionsOrOptions.permissions;
      this.services = permissionsOrOptions.services;
      this.resourceTypes = permissionsOrOptions.resourceTypes;
      this.protocol = permissionsOrOptions.protocol;
      this.startsOn = permissionsOrOptions.startsOn;
      this.expiresOn = permissionsOrOptions.expiresOn;
      this.ipRangeInner = permissionsOrOptions.ipRange;
      this.identifier = permissionsOrOptions.identifier;
      this.encryptionScope = permissionsOrOptions.encryptionScope;
      this.resource = permissionsOrOptions.resource;
      this.cacheControl = permissionsOrOptions.cacheControl;
      this.contentDisposition = permissionsOrOptions.contentDisposition;
      this.contentEncoding = permissionsOrOptions.contentEncoding;
      this.contentLanguage = permissionsOrOptions.contentLanguage;
      this.contentType = permissionsOrOptions.contentType;
      if (permissionsOrOptions.userDelegationKey) {
        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
        this.signedService = permissionsOrOptions.userDelegationKey.signedService;
        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
        this.correlationId = permissionsOrOptions.correlationId;
      }
    } else {
      this.services = services;
      this.resourceTypes = resourceTypes;
      this.expiresOn = expiresOn;
      this.permissions = permissionsOrOptions;
      this.protocol = protocol;
      this.startsOn = startsOn;
      this.ipRangeInner = ipRange;
      this.encryptionScope = encryptionScope;
      this.identifier = identifier;
      this.resource = resource;
      this.cacheControl = cacheControl;
      this.contentDisposition = contentDisposition;
      this.contentEncoding = contentEncoding;
      this.contentLanguage = contentLanguage;
      this.contentType = contentType;
      if (userDelegationKey) {
        this.signedOid = userDelegationKey.signedObjectId;
        this.signedTenantId = userDelegationKey.signedTenantId;
        this.signedStartsOn = userDelegationKey.signedStartsOn;
        this.signedExpiresOn = userDelegationKey.signedExpiresOn;
        this.signedService = userDelegationKey.signedService;
        this.signedVersion = userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
        this.correlationId = correlationId;
      }
    }
  }
  /**
   * Encodes all SAS query parameters into a string that can be appended to a URL.
   *
   */
  return _createClass(SASQueryParameters, [{
    key: "ipRange",
    get:
    /**
     * Optional. IP range allowed for this SAS.
     *
     * @readonly
     */
    function get() {
      if (this.ipRangeInner) {
        return {
          end: this.ipRangeInner.end,
          start: this.ipRangeInner.start
        };
      }
      return undefined;
    }
  }, {
    key: "toString",
    value: function toString() {
      var params = ["sv", "ss", "srt", "spr", "st", "se", "sip", "si", "ses", "skoid",
      // Signed object ID
      "sktid",
      // Signed tenant ID
      "skt",
      // Signed key start time
      "ske",
      // Signed key expiry time
      "sks",
      // Signed key service
      "skv",
      // Signed key version
      "sr", "sp", "sig", "rscc", "rscd", "rsce", "rscl", "rsct", "saoid", "scid"];
      var queries = [];
      for (var _i = 0, _params = params; _i < _params.length; _i++) {
        var param = _params[_i];
        switch (param) {
          case "sv":
            this.tryAppendQueryParameter(queries, param, this.version);
            break;
          case "ss":
            this.tryAppendQueryParameter(queries, param, this.services);
            break;
          case "srt":
            this.tryAppendQueryParameter(queries, param, this.resourceTypes);
            break;
          case "spr":
            this.tryAppendQueryParameter(queries, param, this.protocol);
            break;
          case "st":
            this.tryAppendQueryParameter(queries, param, this.startsOn ? (0, _utils.truncatedISO8061Date)(this.startsOn, false) : undefined);
            break;
          case "se":
            this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0, _utils.truncatedISO8061Date)(this.expiresOn, false) : undefined);
            break;
          case "sip":
            this.tryAppendQueryParameter(queries, param, this.ipRange ? (0, _SasIPRange.ipRangeToString)(this.ipRange) : undefined);
            break;
          case "si":
            this.tryAppendQueryParameter(queries, param, this.identifier);
            break;
          case "ses":
            this.tryAppendQueryParameter(queries, param, this.encryptionScope);
            break;
          case "skoid":
            // Signed object ID
            this.tryAppendQueryParameter(queries, param, this.signedOid);
            break;
          case "sktid":
            // Signed tenant ID
            this.tryAppendQueryParameter(queries, param, this.signedTenantId);
            break;
          case "skt":
            // Signed key start time
            this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0, _utils.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);
            break;
          case "ske":
            // Signed key expiry time
            this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);
            break;
          case "sks":
            // Signed key service
            this.tryAppendQueryParameter(queries, param, this.signedService);
            break;
          case "skv":
            // Signed key version
            this.tryAppendQueryParameter(queries, param, this.signedVersion);
            break;
          case "sr":
            this.tryAppendQueryParameter(queries, param, this.resource);
            break;
          case "sp":
            this.tryAppendQueryParameter(queries, param, this.permissions);
            break;
          case "sig":
            this.tryAppendQueryParameter(queries, param, this.signature);
            break;
          case "rscc":
            this.tryAppendQueryParameter(queries, param, this.cacheControl);
            break;
          case "rscd":
            this.tryAppendQueryParameter(queries, param, this.contentDisposition);
            break;
          case "rsce":
            this.tryAppendQueryParameter(queries, param, this.contentEncoding);
            break;
          case "rscl":
            this.tryAppendQueryParameter(queries, param, this.contentLanguage);
            break;
          case "rsct":
            this.tryAppendQueryParameter(queries, param, this.contentType);
            break;
          case "saoid":
            this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
            break;
          case "scid":
            this.tryAppendQueryParameter(queries, param, this.correlationId);
            break;
        }
      }
      return queries.join("&");
    }
    /**
     * A private helper method used to filter and append query key/value pairs into an array.
     *
     * @param queries -
     * @param key -
     * @param value -
     */
  }, {
    key: "tryAppendQueryParameter",
    value: function tryAppendQueryParameter(queries, key, value) {
      if (!value) {
        return;
      }
      key = encodeURIComponent(key);
      value = encodeURIComponent(value);
      if (key.length > 0 && value.length > 0) {
        queries.push("".concat(key, "=").concat(value));
      }
    }
  }]);
}();
},{"./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateBlobSASQueryParameters = generateBlobSASQueryParameters;
var _BlobSASPermissions = require("./BlobSASPermissions");
var _ContainerSASPermissions = require("./ContainerSASPermissions");
var _StorageSharedKeyCredential = require("../credentials/StorageSharedKeyCredential");
var _UserDelegationKeyCredential = require("../credentials/UserDelegationKeyCredential");
var _SasIPRange = require("./SasIPRange");
var _SASQueryParameters = require("./SASQueryParameters");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
  var sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : undefined;
  var userDelegationKeyCredential;
  if (sharedKeyCredential === undefined && accountName !== undefined) {
    userDelegationKeyCredential = new _UserDelegationKeyCredential.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
  }
  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {
    throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
  }
  // Version 2020-12-06 adds support for encryptionscope in SAS.
  if (version >= "2020-12-06") {
    if (sharedKeyCredential !== undefined) {
      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
    } else {
      return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
    }
  }
  // Version 2019-12-12 adds support for the blob tags permission.
  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.
  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string
  if (version >= "2018-11-09") {
    if (sharedKeyCredential !== undefined) {
      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
    } else {
      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.
      if (version >= "2020-02-10") {
        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
      } else {
        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
      }
    }
  }
  if (version >= "2015-04-05") {
    if (sharedKeyCredential !== undefined) {
      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
    } else {
      throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
  }
  throw new RangeError("'version' must be >= '2015-04-05'.");
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */
function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  var resource = "c";
  if (blobSASSignatureValues.blobName) {
    resource = "b";
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */
function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */
function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */
function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  // Stored access policies are not supported for a user delegation SAS.
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */
function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  // Stored access policies are not supported for a user delegation SAS.
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined,
  // agentObjectId
  blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */
function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  // Stored access policies are not supported for a user delegation SAS.
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
  var verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  // Signature is generated on the un-url-encoded values.
  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined,
  // agentObjectId
  blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);
}
function getCanonicalName(accountName, containerName, blobName) {
  // Container: "/blob/account/containerName"
  // Blob:      "/blob/account/containerName/blobName"
  var elements = ["/blob/".concat(accountName, "/").concat(containerName)];
  if (blobName) {
    elements.push("/".concat(blobName));
  }
  return elements.join("");
}
function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
  if (blobSASSignatureValues.snapshotTime && version < "2018-11-09") {
    throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {
    throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.versionId && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {
    throw RangeError("Must provide 'blobName' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
  }
  if (version < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
  }
  if (version < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {
    throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
  }
  if (version < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
  }
  if (blobSASSignatureValues.encryptionScope && version < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  blobSASSignatureValues.version = version;
  return blobSASSignatureValues;
}
},{"./BlobSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js","./ContainerSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js","../credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","../credentials/UserDelegationKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js","./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","./SASQueryParameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobLeaseClient = void 0;
var _coreUtil = require("@azure/core-util");
var _constants = require("./utils/constants");
var _tracing = require("./utils/tracing");
var _utils = require("./utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
 */
var BlobLeaseClient = exports.BlobLeaseClient = /*#__PURE__*/function () {
  /**
   * Creates an instance of BlobLeaseClient.
   * @param client - The client to make the lease operation requests.
   * @param leaseId - Initial proposed lease id.
   */
  function BlobLeaseClient(client, leaseId) {
    _classCallCheck(this, BlobLeaseClient);
    var clientContext = client.storageClientContext;
    this._url = client.url;
    if (client.name === undefined) {
      this._isContainer = true;
      this._containerOrBlobOperation = clientContext.container;
    } else {
      this._isContainer = false;
      this._containerOrBlobOperation = clientContext.blob;
    }
    if (!leaseId) {
      leaseId = (0, _coreUtil.randomUUID)();
    }
    this._leaseId = leaseId;
  }
  /**
   * Establishes and manages a lock on a container for delete operations, or on a blob
   * for write and delete operations.
   * The lock duration can be 15 to 60 seconds, or can be infinite.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
   * @param options - option to configure lease management operations.
   * @returns Response data for acquire lease operation.
   */
  return _createClass(BlobLeaseClient, [{
    key: "leaseId",
    get:
    /**
     * Gets the lease Id.
     *
     * @readonly
     */
    function get() {
      return this._leaseId;
    }
    /**
     * Gets the url.
     *
     * @readonly
     */
  }, {
    key: "url",
    get: function get() {
      return this._url;
    }
  }, {
    key: "acquireLease",
    value: (function () {
      var _acquireLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(duration) {
        var _this = this;
        var options,
          _a,
          _b,
          _c,
          _d,
          _e,
          _args2 = arguments;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                _context2.next = 3;
                break;
              }
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            case 3:
              return _context2.abrupt("return", _tracing.tracingClient.withSpan("BlobLeaseClient-acquireLease", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = _utils.assertResponse;
                        _context.next = 3;
                        return _this._containerOrBlobOperation.acquireLease({
                          abortSignal: options.abortSignal,
                          duration: duration,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          proposedLeaseId: _this._leaseId,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", (0, _context.t0)(_context.t1));
                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function (_x2) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function acquireLease(_x) {
        return _acquireLease.apply(this, arguments);
      }
      return acquireLease;
    }()
    /**
     * To change the ID of the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param proposedLeaseId - the proposed new lease Id.
     * @param options - option to configure lease management operations.
     * @returns Response data for change lease operation.
     */
    )
  }, {
    key: "changeLease",
    value: (function () {
      var _changeLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(proposedLeaseId) {
        var _this2 = this;
        var options,
          _a,
          _b,
          _c,
          _d,
          _e,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                _context4.next = 3;
                break;
              }
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            case 3:
              return _context4.abrupt("return", _tracing.tracingClient.withSpan("BlobLeaseClient-changeLease", options, /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(updatedOptions) {
                  var _a, response;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.t0 = _utils.assertResponse;
                        _context3.next = 3;
                        return _this2._containerOrBlobOperation.changeLease(_this2._leaseId, proposedLeaseId, {
                          abortSignal: options.abortSignal,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context3.t1 = _context3.sent;
                        response = (0, _context3.t0)(_context3.t1);
                        _this2._leaseId = proposedLeaseId;
                        return _context3.abrupt("return", response);
                      case 7:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function (_x4) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function changeLease(_x3) {
        return _changeLease.apply(this, arguments);
      }
      return changeLease;
    }()
    /**
     * To free the lease if it is no longer needed so that another client may
     * immediately acquire a lease against the container or the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - option to configure lease management operations.
     * @returns Response data for release lease operation.
     */
    )
  }, {
    key: "releaseLease",
    value: (function () {
      var _releaseLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var _this3 = this;
        var options,
          _a,
          _b,
          _c,
          _d,
          _e,
          _args6 = arguments;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                _context6.next = 3;
                break;
              }
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            case 3:
              return _context6.abrupt("return", _tracing.tracingClient.withSpan("BlobLeaseClient-releaseLease", options, /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.t0 = _utils.assertResponse;
                        _context5.next = 3;
                        return _this3._containerOrBlobOperation.releaseLease(_this3._leaseId, {
                          abortSignal: options.abortSignal,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context5.t1 = _context5.sent;
                        return _context5.abrupt("return", (0, _context5.t0)(_context5.t1));
                      case 5:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5);
                }));
                return function (_x5) {
                  return _ref3.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function releaseLease() {
        return _releaseLease.apply(this, arguments);
      }
      return releaseLease;
    }()
    /**
     * To renew the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - Optional option to configure lease management operations.
     * @returns Response data for renew lease operation.
     */
    )
  }, {
    key: "renewLease",
    value: (function () {
      var _renewLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var _this4 = this;
        var options,
          _a,
          _b,
          _c,
          _d,
          _e,
          _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                _context8.next = 3;
                break;
              }
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            case 3:
              return _context8.abrupt("return", _tracing.tracingClient.withSpan("BlobLeaseClient-renewLease", options, /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                    while (1) switch (_context7.prev = _context7.next) {
                      case 0:
                        return _context7.abrupt("return", _this4._containerOrBlobOperation.renewLease(_this4._leaseId, {
                          abortSignal: options.abortSignal,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 1:
                      case "end":
                        return _context7.stop();
                    }
                  }, _callee7);
                }));
                return function (_x6) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function renewLease() {
        return _renewLease.apply(this, arguments);
      }
      return renewLease;
    }()
    /**
     * To end the lease but ensure that another client cannot acquire a new lease
     * until the current lease period has expired.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param breakPeriod - Break period
     * @param options - Optional options to configure lease management operations.
     * @returns Response data for break lease operation.
     */
    )
  }, {
    key: "breakLease",
    value: (function () {
      var _breakLease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(breakPeriod) {
        var _this5 = this;
        var options,
          _a,
          _b,
          _c,
          _d,
          _e,
          _args10 = arguments;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
              if (!(this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions)))) {
                _context10.next = 3;
                break;
              }
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            case 3:
              return _context10.abrupt("return", _tracing.tracingClient.withSpan("BlobLeaseClient-breakLease", options, /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(updatedOptions) {
                  var _a, operationOptions;
                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                    while (1) switch (_context9.prev = _context9.next) {
                      case 0:
                        operationOptions = {
                          abortSignal: options.abortSignal,
                          breakPeriod: breakPeriod,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        };
                        _context9.t0 = _utils.assertResponse;
                        _context9.next = 4;
                        return _this5._containerOrBlobOperation.breakLease(operationOptions);
                      case 4:
                        _context9.t1 = _context9.sent;
                        return _context9.abrupt("return", (0, _context9.t0)(_context9.t1));
                      case 6:
                      case "end":
                        return _context9.stop();
                    }
                  }, _callee9);
                }));
                return function (_x8) {
                  return _ref5.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function breakLease(_x7) {
        return _breakLease.apply(this, arguments);
      }
      return breakLease;
    }())
  }]);
}();
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobDownloadResponse = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// This file is used as a shim of "BlobDownloadResponse" for some browser bundlers
// when trying to bundle "BlobDownloadResponse"
// "BlobDownloadResponse" class is only available in Node.js runtime
var BlobDownloadResponse = exports.BlobDownloadResponse = 1;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobQueryResponse = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN BROWSER RUNTIME.
 *
 * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will
 * parse avor data returned by blob query.
 */
var BlobQueryResponse = exports.BlobQueryResponse = /*#__PURE__*/function () {
  /**
   * Creates an instance of BlobQueryResponse.
   *
   * @param originalResponse -
   * @param options -
   */
  function BlobQueryResponse(originalResponse) {
    var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, BlobQueryResponse);
    this.originalResponse = originalResponse;
  }
  return _createClass(BlobQueryResponse, [{
    key: "acceptRanges",
    get:
    /**
     * Indicates that the service supports
     * requests for partial file content.
     *
     * @readonly
     */
    function get() {
      return this.originalResponse.acceptRanges;
    }
    /**
     * Returns if it was previously specified
     * for the file.
     *
     * @readonly
     */
  }, {
    key: "cacheControl",
    get: function get() {
      return this.originalResponse.cacheControl;
    }
    /**
     * Returns the value that was specified
     * for the 'x-ms-content-disposition' header and specifies how to process the
     * response.
     *
     * @readonly
     */
  }, {
    key: "contentDisposition",
    get: function get() {
      return this.originalResponse.contentDisposition;
    }
    /**
     * Returns the value that was specified
     * for the Content-Encoding request header.
     *
     * @readonly
     */
  }, {
    key: "contentEncoding",
    get: function get() {
      return this.originalResponse.contentEncoding;
    }
    /**
     * Returns the value that was specified
     * for the Content-Language request header.
     *
     * @readonly
     */
  }, {
    key: "contentLanguage",
    get: function get() {
      return this.originalResponse.contentLanguage;
    }
    /**
     * The current sequence number for a
     * page blob. This header is not returned for block blobs or append blobs.
     *
     * @readonly
     */
  }, {
    key: "blobSequenceNumber",
    get: function get() {
      return this.originalResponse.blobSequenceNumber;
    }
    /**
     * The blob's type. Possible values include:
     * 'BlockBlob', 'PageBlob', 'AppendBlob'.
     *
     * @readonly
     */
  }, {
    key: "blobType",
    get: function get() {
      return this.originalResponse.blobType;
    }
    /**
     * The number of bytes present in the
     * response body.
     *
     * @readonly
     */
  }, {
    key: "contentLength",
    get: function get() {
      return this.originalResponse.contentLength;
    }
    /**
     * If the file has an MD5 hash and the
     * request is to read the full file, this response header is returned so that
     * the client can check for message content integrity. If the request is to
     * read a specified range and the 'x-ms-range-get-content-md5' is set to
     * true, then the request returns an MD5 hash for the range, as long as the
     * range size is less than or equal to 4 MB. If neither of these sets of
     * conditions is true, then no value is returned for the 'Content-MD5'
     * header.
     *
     * @readonly
     */
  }, {
    key: "contentMD5",
    get: function get() {
      return this.originalResponse.contentMD5;
    }
    /**
     * Indicates the range of bytes returned if
     * the client requested a subset of the file by setting the Range request
     * header.
     *
     * @readonly
     */
  }, {
    key: "contentRange",
    get: function get() {
      return this.originalResponse.contentRange;
    }
    /**
     * The content type specified for the file.
     * The default content type is 'application/octet-stream'
     *
     * @readonly
     */
  }, {
    key: "contentType",
    get: function get() {
      return this.originalResponse.contentType;
    }
    /**
     * Conclusion time of the last attempted
     * Copy File operation where this file was the destination file. This value
     * can specify the time of a completed, aborted, or failed copy attempt.
     *
     * @readonly
     */
  }, {
    key: "copyCompletedOn",
    get: function get() {
      return undefined;
    }
    /**
     * String identifier for the last attempted Copy
     * File operation where this file was the destination file.
     *
     * @readonly
     */
  }, {
    key: "copyId",
    get: function get() {
      return this.originalResponse.copyId;
    }
    /**
     * Contains the number of bytes copied and
     * the total bytes in the source in the last attempted Copy File operation
     * where this file was the destination file. Can show between 0 and
     * Content-Length bytes copied.
     *
     * @readonly
     */
  }, {
    key: "copyProgress",
    get: function get() {
      return this.originalResponse.copyProgress;
    }
    /**
     * URL up to 2KB in length that specifies the
     * source file used in the last attempted Copy File operation where this file
     * was the destination file.
     *
     * @readonly
     */
  }, {
    key: "copySource",
    get: function get() {
      return this.originalResponse.copySource;
    }
    /**
     * State of the copy operation
     * identified by 'x-ms-copy-id'. Possible values include: 'pending',
     * 'success', 'aborted', 'failed'
     *
     * @readonly
     */
  }, {
    key: "copyStatus",
    get: function get() {
      return this.originalResponse.copyStatus;
    }
    /**
     * Only appears when
     * x-ms-copy-status is failed or pending. Describes cause of fatal or
     * non-fatal copy operation failure.
     *
     * @readonly
     */
  }, {
    key: "copyStatusDescription",
    get: function get() {
      return this.originalResponse.copyStatusDescription;
    }
    /**
     * When a blob is leased,
     * specifies whether the lease is of infinite or fixed duration. Possible
     * values include: 'infinite', 'fixed'.
     *
     * @readonly
     */
  }, {
    key: "leaseDuration",
    get: function get() {
      return this.originalResponse.leaseDuration;
    }
    /**
     * Lease state of the blob. Possible
     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
     *
     * @readonly
     */
  }, {
    key: "leaseState",
    get: function get() {
      return this.originalResponse.leaseState;
    }
    /**
     * The current lease status of the
     * blob. Possible values include: 'locked', 'unlocked'.
     *
     * @readonly
     */
  }, {
    key: "leaseStatus",
    get: function get() {
      return this.originalResponse.leaseStatus;
    }
    /**
     * A UTC date/time value generated by the service that
     * indicates the time at which the response was initiated.
     *
     * @readonly
     */
  }, {
    key: "date",
    get: function get() {
      return this.originalResponse.date;
    }
    /**
     * The number of committed blocks
     * present in the blob. This header is returned only for append blobs.
     *
     * @readonly
     */
  }, {
    key: "blobCommittedBlockCount",
    get: function get() {
      return this.originalResponse.blobCommittedBlockCount;
    }
    /**
     * The ETag contains a value that you can use to
     * perform operations conditionally, in quotes.
     *
     * @readonly
     */
  }, {
    key: "etag",
    get: function get() {
      return this.originalResponse.etag;
    }
    /**
     * The error code.
     *
     * @readonly
     */
  }, {
    key: "errorCode",
    get: function get() {
      return this.originalResponse.errorCode;
    }
    /**
     * The value of this header is set to
     * true if the file data and application metadata are completely encrypted
     * using the specified algorithm. Otherwise, the value is set to false (when
     * the file is unencrypted, or if only parts of the file/application metadata
     * are encrypted).
     *
     * @readonly
     */
  }, {
    key: "isServerEncrypted",
    get: function get() {
      return this.originalResponse.isServerEncrypted;
    }
    /**
     * If the blob has a MD5 hash, and if
     * request contains range header (Range or x-ms-range), this response header
     * is returned with the value of the whole blob's MD5 value. This value may
     * or may not be equal to the value returned in Content-MD5 header, with the
     * latter calculated from the requested range.
     *
     * @readonly
     */
  }, {
    key: "blobContentMD5",
    get: function get() {
      return this.originalResponse.blobContentMD5;
    }
    /**
     * Returns the date and time the file was last
     * modified. Any operation that modifies the file or its properties updates
     * the last modified time.
     *
     * @readonly
     */
  }, {
    key: "lastModified",
    get: function get() {
      return this.originalResponse.lastModified;
    }
    /**
     * A name-value pair
     * to associate with a file storage object.
     *
     * @readonly
     */
  }, {
    key: "metadata",
    get: function get() {
      return this.originalResponse.metadata;
    }
    /**
     * This header uniquely identifies the request
     * that was made and can be used for troubleshooting the request.
     *
     * @readonly
     */
  }, {
    key: "requestId",
    get: function get() {
      return this.originalResponse.requestId;
    }
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     *
     * @readonly
     */
  }, {
    key: "clientRequestId",
    get: function get() {
      return this.originalResponse.clientRequestId;
    }
    /**
     * Indicates the version of the File service used
     * to execute the request.
     *
     * @readonly
     */
  }, {
    key: "version",
    get: function get() {
      return this.originalResponse.version;
    }
    /**
     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
     * when the blob was encrypted with a customer-provided key.
     *
     * @readonly
     */
  }, {
    key: "encryptionKeySha256",
    get: function get() {
      return this.originalResponse.encryptionKeySha256;
    }
    /**
     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
     * true, then the request returns a crc64 for the range, as long as the range size is less than
     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
     * specified in the same request, it will fail with 400(Bad Request)
     */
  }, {
    key: "contentCrc64",
    get: function get() {
      return this.originalResponse.contentCrc64;
    }
    /**
     * The response body as a browser Blob.
     * Always undefined in node.js.
     *
     * @readonly
     */
  }, {
    key: "blobBody",
    get: function get() {
      throw Error("Quick query in browser is not supported yet.");
    }
    /**
     * The response body as a node.js Readable stream.
     * Always undefined in the browser.
     *
     * @readonly
     */
  }, {
    key: "readableStreamBody",
    get: function get() {
      return undefined;
    }
    /**
     * The HTTP response.
     */
  }, {
    key: "_response",
    get: function get() {
      return this.originalResponse._response;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageBlobAudience = exports.PremiumPageBlobTier = exports.BlockBlobTier = void 0;
exports.ensureCpkIfSpecified = ensureCpkIfSpecified;
exports.getBlobServiceAccountAudience = getBlobServiceAccountAudience;
exports.toAccessTier = toAccessTier;
var _constants = require("./utils/constants");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Represents the access tier on a blob.
 * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}
 */
var BlockBlobTier;
(function (BlockBlobTier) {
  /**
   * Optimized for storing data that is accessed frequently.
   */
  BlockBlobTier["Hot"] = "Hot";
  /**
   * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
   */
  BlockBlobTier["Cool"] = "Cool";
  /**
   * Optimized for storing data that is rarely accessed.
   */
  BlockBlobTier["Cold"] = "Cold";
  /**
   * Optimized for storing data that is rarely accessed and stored for at least 180 days
   * with flexible latency requirements (on the order of hours).
   */
  BlockBlobTier["Archive"] = "Archive";
})(BlockBlobTier || (exports.BlockBlobTier = BlockBlobTier = {}));
/**
 * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.
 * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}
 * for detailed information on the corresponding IOPS and throughput per PageBlobTier.
 */
var PremiumPageBlobTier;
(function (PremiumPageBlobTier) {
  /**
   * P4 Tier.
   */
  PremiumPageBlobTier["P4"] = "P4";
  /**
   * P6 Tier.
   */
  PremiumPageBlobTier["P6"] = "P6";
  /**
   * P10 Tier.
   */
  PremiumPageBlobTier["P10"] = "P10";
  /**
   * P15 Tier.
   */
  PremiumPageBlobTier["P15"] = "P15";
  /**
   * P20 Tier.
   */
  PremiumPageBlobTier["P20"] = "P20";
  /**
   * P30 Tier.
   */
  PremiumPageBlobTier["P30"] = "P30";
  /**
   * P40 Tier.
   */
  PremiumPageBlobTier["P40"] = "P40";
  /**
   * P50 Tier.
   */
  PremiumPageBlobTier["P50"] = "P50";
  /**
   * P60 Tier.
   */
  PremiumPageBlobTier["P60"] = "P60";
  /**
   * P70 Tier.
   */
  PremiumPageBlobTier["P70"] = "P70";
  /**
   * P80 Tier.
   */
  PremiumPageBlobTier["P80"] = "P80";
})(PremiumPageBlobTier || (exports.PremiumPageBlobTier = PremiumPageBlobTier = {}));
function toAccessTier(tier) {
  if (tier === undefined) {
    return undefined;
  }
  return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).
}
function ensureCpkIfSpecified(cpk, isHttps) {
  if (cpk && !isHttps) {
    throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
  }
  if (cpk && !cpk.encryptionAlgorithm) {
    cpk.encryptionAlgorithm = _constants.EncryptionAlgorithmAES25;
  }
}
/**
 * Defines the known cloud audiences for Storage.
 */
var StorageBlobAudience;
(function (StorageBlobAudience) {
  /**
   * The OAuth scope to use to retrieve an AAD token for Azure Storage.
   */
  StorageBlobAudience["StorageOAuthScopes"] = "https://storage.azure.com/.default";
  /**
   * The OAuth scope to use to retrieve an AAD token for Azure Disk.
   */
  StorageBlobAudience["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
})(StorageBlobAudience || (exports.StorageBlobAudience = StorageBlobAudience = {}));
/**
 *
 * To get OAuth audience for a storage account for blob service.
 */
function getBlobServiceAccountAudience(storageAccountName) {
  return "https://".concat(storageAccountName, ".blob.core.windows.net/.default");
}
},{"./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeResponseFromModel = rangeResponseFromModel;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Function that converts PageRange and ClearRange to a common Range object.
 * PageRange and ClearRange have start and end while Range offset and count
 * this function normalizes to Range.
 * @param response - Model PageBlob Range response
 */
function rangeResponseFromModel(response) {
  var pageRange = (response._response.parsedBody.pageRange || []).map(function (x) {
    return {
      offset: x.start,
      count: x.end - x.start
    };
  });
  var clearRange = (response._response.parsedBody.clearRange || []).map(function (x) {
    return {
      offset: x.start,
      count: x.end - x.start
    };
  });
  return Object.assign(Object.assign({}, response), {
    pageRange: pageRange,
    clearRange: clearRange,
    _response: Object.assign(Object.assign({}, response._response), {
      parsedBody: {
        pageRange: pageRange,
        clearRange: clearRange
      }
    })
  });
}
},{}],"node_modules/@azure/core-lro/dist/browser/logger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
var _logger = require("@azure/logger");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The `@azure/logger` configuration for this package.
 * @internal
 */
const logger = exports.logger = (0, _logger.createClientLogger)("core-lro");
},{"@azure/logger":"node_modules/@azure/logger/dist/browser/index.js"}],"node_modules/@azure/core-lro/dist/browser/poller/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.terminalStates = exports.POLL_INTERVAL_IN_MS = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The default time interval to wait before sending the next polling request.
 */
const POLL_INTERVAL_IN_MS = exports.POLL_INTERVAL_IN_MS = 2000;
/**
 * The closed set of terminal states.
 */
const terminalStates = exports.terminalStates = ["succeeded", "canceled", "failed"];
},{}],"node_modules/@azure/core-lro/dist/browser/poller/operation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deserializeState = deserializeState;
exports.initOperation = initOperation;
exports.pollOperation = pollOperation;
var _logger = require("../logger.js");
var _constants = require("./constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Deserializes the state
 */
function deserializeState(serializedState) {
  try {
    return JSON.parse(serializedState).state;
  } catch (e) {
    throw new Error(`Unable to deserialize input state: ${serializedState}`);
  }
}
function setStateError(inputs) {
  const {
    state,
    stateProxy,
    isOperationError
  } = inputs;
  return error => {
    if (isOperationError(error)) {
      stateProxy.setError(state, error);
      stateProxy.setFailed(state);
    }
    throw error;
  };
}
function appendReadableErrorMessage(currentMessage, innerMessage) {
  let message = currentMessage;
  if (message.slice(-1) !== ".") {
    message = message + ".";
  }
  return message + " " + innerMessage;
}
function simplifyError(err) {
  let message = err.message;
  let code = err.code;
  let curErr = err;
  while (curErr.innererror) {
    curErr = curErr.innererror;
    code = curErr.code;
    message = appendReadableErrorMessage(message, curErr.message);
  }
  return {
    code,
    message
  };
}
function processOperationStatus(result) {
  const {
    state,
    stateProxy,
    status,
    isDone,
    processResult,
    getError,
    response,
    setErrorAsResult
  } = result;
  switch (status) {
    case "succeeded":
      {
        stateProxy.setSucceeded(state);
        break;
      }
    case "failed":
      {
        const err = getError === null || getError === void 0 ? void 0 : getError(response);
        let postfix = "";
        if (err) {
          const {
            code,
            message
          } = simplifyError(err);
          postfix = `. ${code}. ${message}`;
        }
        const errStr = `The long-running operation has failed${postfix}`;
        stateProxy.setError(state, new Error(errStr));
        stateProxy.setFailed(state);
        _logger.logger.warning(errStr);
        break;
      }
    case "canceled":
      {
        stateProxy.setCanceled(state);
        break;
      }
  }
  if ((isDone === null || isDone === void 0 ? void 0 : isDone(response, state)) || isDone === undefined && ["succeeded", "canceled"].concat(setErrorAsResult ? [] : ["failed"]).includes(status)) {
    stateProxy.setResult(state, buildResult({
      response,
      state,
      processResult
    }));
  }
}
function buildResult(inputs) {
  const {
    processResult,
    response,
    state
  } = inputs;
  return processResult ? processResult(response, state) : response;
}
/**
 * Initiates the long-running operation.
 */
async function initOperation(inputs) {
  const {
    init,
    stateProxy,
    processResult,
    getOperationStatus,
    withOperationLocation,
    setErrorAsResult
  } = inputs;
  const {
    operationLocation,
    resourceLocation,
    metadata,
    response
  } = await init();
  if (operationLocation) withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);
  const config = {
    metadata,
    operationLocation,
    resourceLocation
  };
  _logger.logger.verbose(`LRO: Operation description:`, config);
  const state = stateProxy.initState(config);
  const status = getOperationStatus({
    response,
    state,
    operationLocation
  });
  processOperationStatus({
    state,
    status,
    stateProxy,
    response,
    setErrorAsResult,
    processResult
  });
  return state;
}
async function pollOperationHelper(inputs) {
  const {
    poll,
    state,
    stateProxy,
    operationLocation,
    getOperationStatus,
    getResourceLocation,
    isOperationError,
    options
  } = inputs;
  const response = await poll(operationLocation, options).catch(setStateError({
    state,
    stateProxy,
    isOperationError
  }));
  const status = getOperationStatus(response, state);
  _logger.logger.verbose(`LRO: Status:\n\tPolling from: ${state.config.operationLocation}\n\tOperation status: ${status}\n\tPolling status: ${_constants.terminalStates.includes(status) ? "Stopped" : "Running"}`);
  if (status === "succeeded") {
    const resourceLocation = getResourceLocation(response, state);
    if (resourceLocation !== undefined) {
      return {
        response: await poll(resourceLocation).catch(setStateError({
          state,
          stateProxy,
          isOperationError
        })),
        status
      };
    }
  }
  return {
    response,
    status
  };
}
/** Polls the long-running operation. */
async function pollOperation(inputs) {
  const {
    poll,
    state,
    stateProxy,
    options,
    getOperationStatus,
    getResourceLocation,
    getOperationLocation,
    isOperationError,
    withOperationLocation,
    getPollingInterval,
    processResult,
    getError,
    updateState,
    setDelay,
    isDone,
    setErrorAsResult
  } = inputs;
  const {
    operationLocation
  } = state.config;
  if (operationLocation !== undefined) {
    const {
      response,
      status
    } = await pollOperationHelper({
      poll,
      getOperationStatus,
      state,
      stateProxy,
      operationLocation,
      getResourceLocation,
      isOperationError,
      options
    });
    processOperationStatus({
      status,
      response,
      state,
      stateProxy,
      isDone,
      processResult,
      getError,
      setErrorAsResult
    });
    if (!_constants.terminalStates.includes(status)) {
      const intervalInMs = getPollingInterval === null || getPollingInterval === void 0 ? void 0 : getPollingInterval(response);
      if (intervalInMs) setDelay(intervalInMs);
      const location = getOperationLocation === null || getOperationLocation === void 0 ? void 0 : getOperationLocation(response, state);
      if (location !== undefined) {
        const isUpdated = operationLocation !== location;
        state.config.operationLocation = location;
        withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(location, isUpdated);
      } else withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);
    }
    updateState === null || updateState === void 0 ? void 0 : updateState(state, response);
  }
}
},{"../logger.js":"node_modules/@azure/core-lro/dist/browser/logger.js","./constants.js":"node_modules/@azure/core-lro/dist/browser/poller/constants.js"}],"node_modules/@azure/core-lro/dist/browser/http/operation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorFromResponse = getErrorFromResponse;
exports.getOperationLocation = getOperationLocation;
exports.getOperationStatus = getOperationStatus;
exports.getResourceLocation = getResourceLocation;
exports.getStatusFromInitialResponse = getStatusFromInitialResponse;
exports.inferLroMode = inferLroMode;
exports.initHttpOperation = initHttpOperation;
exports.isOperationError = isOperationError;
exports.parseRetryAfter = parseRetryAfter;
exports.pollHttpOperation = pollHttpOperation;
var _operation = require("../poller/operation.js");
var _logger = require("../logger.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function getOperationLocationPollingUrl(inputs) {
  const {
    azureAsyncOperation,
    operationLocation
  } = inputs;
  return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;
}
function getLocationHeader(rawResponse) {
  return rawResponse.headers["location"];
}
function getOperationLocationHeader(rawResponse) {
  return rawResponse.headers["operation-location"];
}
function getAzureAsyncOperationHeader(rawResponse) {
  return rawResponse.headers["azure-asyncoperation"];
}
function findResourceLocation(inputs) {
  var _a;
  const {
    location,
    requestMethod,
    requestPath,
    resourceLocationConfig
  } = inputs;
  switch (requestMethod) {
    case "PUT":
      {
        return requestPath;
      }
    case "DELETE":
      {
        return undefined;
      }
    case "PATCH":
      {
        return (_a = getDefault()) !== null && _a !== void 0 ? _a : requestPath;
      }
    default:
      {
        return getDefault();
      }
  }
  function getDefault() {
    switch (resourceLocationConfig) {
      case "azure-async-operation":
        {
          return undefined;
        }
      case "original-uri":
        {
          return requestPath;
        }
      case "location":
      default:
        {
          return location;
        }
    }
  }
}
function inferLroMode(inputs) {
  const {
    rawResponse,
    requestMethod,
    requestPath,
    resourceLocationConfig
  } = inputs;
  const operationLocation = getOperationLocationHeader(rawResponse);
  const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);
  const pollingUrl = getOperationLocationPollingUrl({
    operationLocation,
    azureAsyncOperation
  });
  const location = getLocationHeader(rawResponse);
  const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();
  if (pollingUrl !== undefined) {
    return {
      mode: "OperationLocation",
      operationLocation: pollingUrl,
      resourceLocation: findResourceLocation({
        requestMethod: normalizedRequestMethod,
        location,
        requestPath,
        resourceLocationConfig
      })
    };
  } else if (location !== undefined) {
    return {
      mode: "ResourceLocation",
      operationLocation: location
    };
  } else if (normalizedRequestMethod === "PUT" && requestPath) {
    return {
      mode: "Body",
      operationLocation: requestPath
    };
  } else {
    return undefined;
  }
}
function transformStatus(inputs) {
  const {
    status,
    statusCode
  } = inputs;
  if (typeof status !== "string" && status !== undefined) {
    throw new Error(`Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`);
  }
  switch (status === null || status === void 0 ? void 0 : status.toLocaleLowerCase()) {
    case undefined:
      return toOperationStatus(statusCode);
    case "succeeded":
      return "succeeded";
    case "failed":
      return "failed";
    case "running":
    case "accepted":
    case "started":
    case "canceling":
    case "cancelling":
      return "running";
    case "canceled":
    case "cancelled":
      return "canceled";
    default:
      {
        _logger.logger.verbose(`LRO: unrecognized operation status: ${status}`);
        return status;
      }
  }
}
function getStatus(rawResponse) {
  var _a;
  const {
    status
  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};
  return transformStatus({
    status,
    statusCode: rawResponse.statusCode
  });
}
function getProvisioningState(rawResponse) {
  var _a, _b;
  const {
    properties,
    provisioningState
  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};
  const status = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;
  return transformStatus({
    status,
    statusCode: rawResponse.statusCode
  });
}
function toOperationStatus(statusCode) {
  if (statusCode === 202) {
    return "running";
  } else if (statusCode < 300) {
    return "succeeded";
  } else {
    return "failed";
  }
}
function parseRetryAfter({
  rawResponse
}) {
  const retryAfter = rawResponse.headers["retry-after"];
  if (retryAfter !== undefined) {
    // Retry-After header value is either in HTTP date format, or in seconds
    const retryAfterInSeconds = parseInt(retryAfter);
    return isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter)) : retryAfterInSeconds * 1000;
  }
  return undefined;
}
function getErrorFromResponse(response) {
  const error = accessBodyProperty(response, "error");
  if (!error) {
    _logger.logger.warning(`The long-running operation failed but there is no error property in the response's body`);
    return;
  }
  if (!error.code || !error.message) {
    _logger.logger.warning(`The long-running operation failed but the error property in the response's body doesn't contain code or message`);
    return;
  }
  return error;
}
function calculatePollingIntervalFromDate(retryAfterDate) {
  const timeNow = Math.floor(new Date().getTime());
  const retryAfterTime = retryAfterDate.getTime();
  if (timeNow < retryAfterTime) {
    return retryAfterTime - timeNow;
  }
  return undefined;
}
function getStatusFromInitialResponse(inputs) {
  const {
    response,
    state,
    operationLocation
  } = inputs;
  function helper() {
    var _a;
    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a["mode"];
    switch (mode) {
      case undefined:
        return toOperationStatus(response.rawResponse.statusCode);
      case "Body":
        return getOperationStatus(response, state);
      default:
        return "running";
    }
  }
  const status = helper();
  return status === "running" && operationLocation === undefined ? "succeeded" : status;
}
/**
 * Initiates the long-running operation.
 */
async function initHttpOperation(inputs) {
  const {
    stateProxy,
    resourceLocationConfig,
    processResult,
    lro,
    setErrorAsResult
  } = inputs;
  return (0, _operation.initOperation)({
    init: async () => {
      const response = await lro.sendInitialRequest();
      const config = inferLroMode({
        rawResponse: response.rawResponse,
        requestPath: lro.requestPath,
        requestMethod: lro.requestMethod,
        resourceLocationConfig
      });
      return Object.assign({
        response,
        operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,
        resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation
      }, (config === null || config === void 0 ? void 0 : config.mode) ? {
        metadata: {
          mode: config.mode
        }
      } : {});
    },
    stateProxy,
    processResult: processResult ? ({
      flatResponse
    }, state) => processResult(flatResponse, state) : ({
      flatResponse
    }) => flatResponse,
    getOperationStatus: getStatusFromInitialResponse,
    setErrorAsResult
  });
}
function getOperationLocation({
  rawResponse
}, state) {
  var _a;
  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a["mode"];
  switch (mode) {
    case "OperationLocation":
      {
        return getOperationLocationPollingUrl({
          operationLocation: getOperationLocationHeader(rawResponse),
          azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse)
        });
      }
    case "ResourceLocation":
      {
        return getLocationHeader(rawResponse);
      }
    case "Body":
    default:
      {
        return undefined;
      }
  }
}
function getOperationStatus({
  rawResponse
}, state) {
  var _a;
  const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a["mode"];
  switch (mode) {
    case "OperationLocation":
      {
        return getStatus(rawResponse);
      }
    case "ResourceLocation":
      {
        return toOperationStatus(rawResponse.statusCode);
      }
    case "Body":
      {
        return getProvisioningState(rawResponse);
      }
    default:
      throw new Error(`Internal error: Unexpected operation mode: ${mode}`);
  }
}
function accessBodyProperty({
  flatResponse,
  rawResponse
}, prop) {
  var _a, _b;
  return (_a = flatResponse === null || flatResponse === void 0 ? void 0 : flatResponse[prop]) !== null && _a !== void 0 ? _a : (_b = rawResponse.body) === null || _b === void 0 ? void 0 : _b[prop];
}
function getResourceLocation(res, state) {
  const loc = accessBodyProperty(res, "resourceLocation");
  if (loc && typeof loc === "string") {
    state.config.resourceLocation = loc;
  }
  return state.config.resourceLocation;
}
function isOperationError(e) {
  return e.name === "RestError";
}
/** Polls the long-running operation. */
async function pollHttpOperation(inputs) {
  const {
    lro,
    stateProxy,
    options,
    processResult,
    updateState,
    setDelay,
    state,
    setErrorAsResult
  } = inputs;
  return (0, _operation.pollOperation)({
    state,
    stateProxy,
    setDelay,
    processResult: processResult ? ({
      flatResponse
    }, inputState) => processResult(flatResponse, inputState) : ({
      flatResponse
    }) => flatResponse,
    getError: getErrorFromResponse,
    updateState,
    getPollingInterval: parseRetryAfter,
    getOperationLocation,
    getOperationStatus,
    isOperationError,
    getResourceLocation,
    options,
    /**
     * The expansion here is intentional because `lro` could be an object that
     * references an inner this, so we need to preserve a reference to it.
     */
    poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),
    setErrorAsResult
  });
}
},{"../poller/operation.js":"node_modules/@azure/core-lro/dist/browser/poller/operation.js","../logger.js":"node_modules/@azure/core-lro/dist/browser/logger.js"}],"node_modules/@azure/core-lro/dist/browser/poller/poller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildCreatePoller = buildCreatePoller;
var _operation = require("./operation.js");
var _constants = require("./constants.js");
var _coreUtil = require("@azure/core-util");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const createStateProxy = () => ({
  /**
   * The state at this point is created to be of type OperationState<TResult>.
   * It will be updated later to be of type TState when the
   * customer-provided callback, `updateState`, is called during polling.
   */
  initState: config => ({
    status: "running",
    config
  }),
  setCanceled: state => state.status = "canceled",
  setError: (state, error) => state.error = error,
  setResult: (state, result) => state.result = result,
  setRunning: state => state.status = "running",
  setSucceeded: state => state.status = "succeeded",
  setFailed: state => state.status = "failed",
  getError: state => state.error,
  getResult: state => state.result,
  isCanceled: state => state.status === "canceled",
  isFailed: state => state.status === "failed",
  isRunning: state => state.status === "running",
  isSucceeded: state => state.status === "succeeded"
});
/**
 * Returns a poller factory.
 */
function buildCreatePoller(inputs) {
  const {
    getOperationLocation,
    getStatusFromInitialResponse,
    getStatusFromPollResponse,
    isOperationError,
    getResourceLocation,
    getPollingInterval,
    getError,
    resolveOnUnsuccessful
  } = inputs;
  return async ({
    init,
    poll
  }, options) => {
    const {
      processResult,
      updateState,
      withOperationLocation: withOperationLocationCallback,
      intervalInMs = _constants.POLL_INTERVAL_IN_MS,
      restoreFrom
    } = options || {};
    const stateProxy = createStateProxy();
    const withOperationLocation = withOperationLocationCallback ? (() => {
      let called = false;
      return (operationLocation, isUpdated) => {
        if (isUpdated) withOperationLocationCallback(operationLocation);else if (!called) withOperationLocationCallback(operationLocation);
        called = true;
      };
    })() : undefined;
    const state = restoreFrom ? (0, _operation.deserializeState)(restoreFrom) : await (0, _operation.initOperation)({
      init,
      stateProxy,
      processResult,
      getOperationStatus: getStatusFromInitialResponse,
      withOperationLocation,
      setErrorAsResult: !resolveOnUnsuccessful
    });
    let resultPromise;
    const abortController = new AbortController();
    const handlers = new Map();
    const handleProgressEvents = async () => handlers.forEach(h => h(state));
    const cancelErrMsg = "Operation was canceled";
    let currentPollIntervalInMs = intervalInMs;
    const poller = {
      getOperationState: () => state,
      getResult: () => state.result,
      isDone: () => ["succeeded", "failed", "canceled"].includes(state.status),
      isStopped: () => resultPromise === undefined,
      stopPolling: () => {
        abortController.abort();
      },
      toString: () => JSON.stringify({
        state
      }),
      onProgress: callback => {
        const s = Symbol();
        handlers.set(s, callback);
        return () => handlers.delete(s);
      },
      pollUntilDone: pollOptions => resultPromise !== null && resultPromise !== void 0 ? resultPromise : resultPromise = (async () => {
        const {
          abortSignal: inputAbortSignal
        } = pollOptions || {};
        // In the future we can use AbortSignal.any() instead
        function abortListener() {
          abortController.abort();
        }
        const abortSignal = abortController.signal;
        if (inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.aborted) {
          abortController.abort();
        } else if (!abortSignal.aborted) {
          inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.addEventListener("abort", abortListener, {
            once: true
          });
        }
        try {
          if (!poller.isDone()) {
            await poller.poll({
              abortSignal
            });
            while (!poller.isDone()) {
              await (0, _coreUtil.delay)(currentPollIntervalInMs, {
                abortSignal
              });
              await poller.poll({
                abortSignal
              });
            }
          }
        } finally {
          inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.removeEventListener("abort", abortListener);
        }
        if (resolveOnUnsuccessful) {
          return poller.getResult();
        } else {
          switch (state.status) {
            case "succeeded":
              return poller.getResult();
            case "canceled":
              throw new Error(cancelErrMsg);
            case "failed":
              throw state.error;
            case "notStarted":
            case "running":
              throw new Error(`Polling completed without succeeding or failing`);
          }
        }
      })().finally(() => {
        resultPromise = undefined;
      }),
      async poll(pollOptions) {
        if (resolveOnUnsuccessful) {
          if (poller.isDone()) return;
        } else {
          switch (state.status) {
            case "succeeded":
              return;
            case "canceled":
              throw new Error(cancelErrMsg);
            case "failed":
              throw state.error;
          }
        }
        await (0, _operation.pollOperation)({
          poll,
          state,
          stateProxy,
          getOperationLocation,
          isOperationError,
          withOperationLocation,
          getPollingInterval,
          getOperationStatus: getStatusFromPollResponse,
          getResourceLocation,
          processResult,
          getError,
          updateState,
          options: pollOptions,
          setDelay: pollIntervalInMs => {
            currentPollIntervalInMs = pollIntervalInMs;
          },
          setErrorAsResult: !resolveOnUnsuccessful
        });
        await handleProgressEvents();
        if (!resolveOnUnsuccessful) {
          switch (state.status) {
            case "canceled":
              throw new Error(cancelErrMsg);
            case "failed":
              throw state.error;
          }
        }
      }
    };
    return poller;
  };
}
},{"./operation.js":"node_modules/@azure/core-lro/dist/browser/poller/operation.js","./constants.js":"node_modules/@azure/core-lro/dist/browser/poller/constants.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js"}],"node_modules/@azure/core-lro/dist/browser/http/poller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpPoller = createHttpPoller;
var _operation = require("./operation.js");
var _poller = require("../poller/poller.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a poller that can be used to poll a long-running operation.
 * @param lro - Description of the long-running operation
 * @param options - options to configure the poller
 * @returns an initialized poller
 */
async function createHttpPoller(lro, options) {
  const {
    resourceLocationConfig,
    intervalInMs,
    processResult,
    restoreFrom,
    updateState,
    withOperationLocation,
    resolveOnUnsuccessful = false
  } = options || {};
  return (0, _poller.buildCreatePoller)({
    getStatusFromInitialResponse: _operation.getStatusFromInitialResponse,
    getStatusFromPollResponse: _operation.getOperationStatus,
    isOperationError: _operation.isOperationError,
    getOperationLocation: _operation.getOperationLocation,
    getResourceLocation: _operation.getResourceLocation,
    getPollingInterval: _operation.parseRetryAfter,
    getError: _operation.getErrorFromResponse,
    resolveOnUnsuccessful
  })({
    init: async () => {
      const response = await lro.sendInitialRequest();
      const config = (0, _operation.inferLroMode)({
        rawResponse: response.rawResponse,
        requestPath: lro.requestPath,
        requestMethod: lro.requestMethod,
        resourceLocationConfig
      });
      return Object.assign({
        response,
        operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,
        resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation
      }, (config === null || config === void 0 ? void 0 : config.mode) ? {
        metadata: {
          mode: config.mode
        }
      } : {});
    },
    poll: lro.sendPollRequest
  }, {
    intervalInMs,
    withOperationLocation,
    restoreFrom,
    updateState,
    processResult: processResult ? ({
      flatResponse
    }, state) => processResult(flatResponse, state) : ({
      flatResponse
    }) => flatResponse
  });
}
},{"./operation.js":"node_modules/@azure/core-lro/dist/browser/http/operation.js","../poller/poller.js":"node_modules/@azure/core-lro/dist/browser/poller/poller.js"}],"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/operation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericPollOperation = void 0;
var _operation = require("../../http/operation.js");
var _logger = require("../../logger.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

const createStateProxy = () => ({
  initState: config => ({
    config,
    isStarted: true
  }),
  setCanceled: state => state.isCancelled = true,
  setError: (state, error) => state.error = error,
  setResult: (state, result) => state.result = result,
  setRunning: state => state.isStarted = true,
  setSucceeded: state => state.isCompleted = true,
  setFailed: () => {
    /** empty body */
  },
  getError: state => state.error,
  getResult: state => state.result,
  isCanceled: state => !!state.isCancelled,
  isFailed: state => !!state.error,
  isRunning: state => !!state.isStarted,
  isSucceeded: state => Boolean(state.isCompleted && !state.isCancelled && !state.error)
});
class GenericPollOperation {
  constructor(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {
    this.state = state;
    this.lro = lro;
    this.setErrorAsResult = setErrorAsResult;
    this.lroResourceLocationConfig = lroResourceLocationConfig;
    this.processResult = processResult;
    this.updateState = updateState;
    this.isDone = isDone;
  }
  setPollerConfig(pollerConfig) {
    this.pollerConfig = pollerConfig;
  }
  async update(options) {
    var _a;
    const stateProxy = createStateProxy();
    if (!this.state.isStarted) {
      this.state = Object.assign(Object.assign({}, this.state), await (0, _operation.initHttpOperation)({
        lro: this.lro,
        stateProxy,
        resourceLocationConfig: this.lroResourceLocationConfig,
        processResult: this.processResult,
        setErrorAsResult: this.setErrorAsResult
      }));
    }
    const updateState = this.updateState;
    const isDone = this.isDone;
    if (!this.state.isCompleted && this.state.error === undefined) {
      await (0, _operation.pollHttpOperation)({
        lro: this.lro,
        state: this.state,
        stateProxy,
        processResult: this.processResult,
        updateState: updateState ? (state, {
          rawResponse
        }) => updateState(state, rawResponse) : undefined,
        isDone: isDone ? ({
          flatResponse
        }, state) => isDone(flatResponse, state) : undefined,
        options,
        setDelay: intervalInMs => {
          this.pollerConfig.intervalInMs = intervalInMs;
        },
        setErrorAsResult: this.setErrorAsResult
      });
    }
    (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);
    return this;
  }
  async cancel() {
    _logger.logger.error("`cancelOperation` is deprecated because it wasn't implemented");
    return this;
  }
  /**
   * Serializes the Poller operation.
   */
  toString() {
    return JSON.stringify({
      state: this.state
    });
  }
}
exports.GenericPollOperation = GenericPollOperation;
},{"../../http/operation.js":"node_modules/@azure/core-lro/dist/browser/http/operation.js","../../logger.js":"node_modules/@azure/core-lro/dist/browser/logger.js"}],"node_modules/@azure/core-lro/dist/browser/legacy/poller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PollerStoppedError = exports.PollerCancelledError = exports.Poller = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * When a poller is manually stopped through the `stopPolling` method,
 * the poller will be rejected with an instance of the PollerStoppedError.
 */
class PollerStoppedError extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerStoppedError";
    Object.setPrototypeOf(this, PollerStoppedError.prototype);
  }
}
/**
 * When the operation is cancelled, the poller will be rejected with an instance
 * of the PollerCancelledError.
 */
exports.PollerStoppedError = PollerStoppedError;
class PollerCancelledError extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerCancelledError";
    Object.setPrototypeOf(this, PollerCancelledError.prototype);
  }
}
/**
 * A class that represents the definition of a program that polls through consecutive requests
 * until it reaches a state of completion.
 *
 * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
 * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
 * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
 *
 * ```ts
 * const poller = new MyPoller();
 *
 * // Polling just once:
 * await poller.poll();
 *
 * // We can try to cancel the request here, by calling:
 * //
 * //     await poller.cancelOperation();
 * //
 *
 * // Getting the final result:
 * const result = await poller.pollUntilDone();
 * ```
 *
 * The Poller is defined by two types, a type representing the state of the poller, which
 * must include a basic set of properties from `PollOperationState<TResult>`,
 * and a return type defined by `TResult`, which can be anything.
 *
 * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
 * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
 *
 * ```ts
 * class Client {
 *   public async makePoller: PollerLike<MyOperationState, MyResult> {
 *     const poller = new MyPoller({});
 *     // It might be preferred to return the poller after the first request is made,
 *     // so that some information can be obtained right away.
 *     await poller.poll();
 *     return poller;
 *   }
 * }
 *
 * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
 * ```
 *
 * A poller can be created through its constructor, then it can be polled until it's completed.
 * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
 * At any point in time, the intermediate forms of the result type can be requested without delay.
 * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
 *
 * ```ts
 * const poller = myClient.makePoller();
 * const state: MyOperationState = poller.getOperationState();
 *
 * // The intermediate result can be obtained at any time.
 * const result: MyResult | undefined = poller.getResult();
 *
 * // The final result can only be obtained after the poller finishes.
 * const result: MyResult = await poller.pollUntilDone();
 * ```
 *
 */
// eslint-disable-next-line no-use-before-define
exports.PollerCancelledError = PollerCancelledError;
class Poller {
  /**
   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
   *
   * When writing an implementation of a Poller, this implementation needs to deal with the initialization
   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
   * operation has already been defined, at least its basic properties. The code below shows how to approach
   * the definition of the constructor of a new custom poller.
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor({
   *     // Anything you might need outside of the basics
   *   }) {
   *     let state: MyOperationState = {
   *       privateProperty: private,
   *       publicProperty: public,
   *     };
   *
   *     const operation = {
   *       state,
   *       update,
   *       cancel,
   *       toString
   *     }
   *
   *     // Sending the operation to the parent's constructor.
   *     super(operation);
   *
   *     // You can assign more local properties here.
   *   }
   * }
   * ```
   *
   * Inside of this constructor, a new promise is created. This will be used to
   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
   * resolve and reject methods are also used internally to control when to resolve
   * or reject anyone waiting for the poller to finish.
   *
   * The constructor of a custom implementation of a poller is where any serialized version of
   * a previous poller's operation should be deserialized into the operation sent to the
   * base constructor. For example:
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor(
   *     baseOperation: string | undefined
   *   ) {
   *     let state: MyOperationState = {};
   *     if (baseOperation) {
   *       state = {
   *         ...JSON.parse(baseOperation).state,
   *         ...state
   *       };
   *     }
   *     const operation = {
   *       state,
   *       // ...
   *     }
   *     super(operation);
   *   }
   * }
   * ```
   *
   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
   */
  constructor(operation) {
    /** controls whether to throw an error if the operation failed or was canceled. */
    this.resolveOnUnsuccessful = false;
    this.stopped = true;
    this.pollProgressCallbacks = [];
    this.operation = operation;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
    // The above warning would get thrown if `poller.poll` is called, it returns an error,
    // and pullUntilDone did not have a .catch or await try/catch on it's return value.
    this.promise.catch(() => {
      /* intentionally blank */
    });
  }
  /**
   * Starts a loop that will break only if the poller is done
   * or if the poller is stopped.
   */
  async startPolling(pollOptions = {}) {
    if (this.stopped) {
      this.stopped = false;
    }
    while (!this.isStopped() && !this.isDone()) {
      await this.poll(pollOptions);
      await this.delay();
    }
  }
  /**
   * pollOnce does one polling, by calling to the update method of the underlying
   * poll operation to make any relevant change effective.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  async pollOnce(options = {}) {
    if (!this.isDone()) {
      this.operation = await this.operation.update({
        abortSignal: options.abortSignal,
        fireProgress: this.fireProgress.bind(this)
      });
    }
    this.processUpdatedState();
  }
  /**
   * fireProgress calls the functions passed in via onProgress the method of the poller.
   *
   * It loops over all of the callbacks received from onProgress, and executes them, sending them
   * the current operation state.
   *
   * @param state - The current operation state.
   */
  fireProgress(state) {
    for (const callback of this.pollProgressCallbacks) {
      callback(state);
    }
  }
  /**
   * Invokes the underlying operation's cancel method.
   */
  async cancelOnce(options = {}) {
    this.operation = await this.operation.cancel(options);
  }
  /**
   * Returns a promise that will resolve once a single polling request finishes.
   * It does this by calling the update method of the Poller's operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  poll(options = {}) {
    if (!this.pollOncePromise) {
      this.pollOncePromise = this.pollOnce(options);
      const clearPollOncePromise = () => {
        this.pollOncePromise = undefined;
      };
      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
    }
    return this.pollOncePromise;
  }
  processUpdatedState() {
    if (this.operation.state.error) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        this.reject(this.operation.state.error);
        throw this.operation.state.error;
      }
    }
    if (this.operation.state.isCancelled) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        const error = new PollerCancelledError("Operation was canceled");
        this.reject(error);
        throw error;
      }
    }
    if (this.isDone() && this.resolve) {
      // If the poller has finished polling, this means we now have a result.
      // However, it can be the case that TResult is instantiated to void, so
      // we are not expecting a result anyway. To assert that we might not
      // have a result eventually after finishing polling, we cast the result
      // to TResult.
      this.resolve(this.getResult());
    }
  }
  /**
   * Returns a promise that will resolve once the underlying operation is completed.
   */
  async pollUntilDone(pollOptions = {}) {
    if (this.stopped) {
      this.startPolling(pollOptions).catch(this.reject);
    }
    // This is needed because the state could have been updated by
    // `cancelOperation`, e.g. the operation is canceled or an error occurred.
    this.processUpdatedState();
    return this.promise;
  }
  /**
   * Invokes the provided callback after each polling is completed,
   * sending the current state of the poller's operation.
   *
   * It returns a method that can be used to stop receiving updates on the given callback function.
   */
  onProgress(callback) {
    this.pollProgressCallbacks.push(callback);
    return () => {
      this.pollProgressCallbacks = this.pollProgressCallbacks.filter(c => c !== callback);
    };
  }
  /**
   * Returns true if the poller has finished polling.
   */
  isDone() {
    const state = this.operation.state;
    return Boolean(state.isCompleted || state.isCancelled || state.error);
  }
  /**
   * Stops the poller from continuing to poll.
   */
  stopPolling() {
    if (!this.stopped) {
      this.stopped = true;
      if (this.reject) {
        this.reject(new PollerStoppedError("This poller is already stopped"));
      }
    }
  }
  /**
   * Returns true if the poller is stopped.
   */
  isStopped() {
    return this.stopped;
  }
  /**
   * Attempts to cancel the underlying operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * If it's called again before it finishes, it will throw an error.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  cancelOperation(options = {}) {
    if (!this.cancelPromise) {
      this.cancelPromise = this.cancelOnce(options);
    } else if (options.abortSignal) {
      throw new Error("A cancel request is currently pending");
    }
    return this.cancelPromise;
  }
  /**
   * Returns the state of the operation.
   *
   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
   * implementations of the pollers can customize what's shared with the public by writing their own
   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
   * and a public type representing a safe to share subset of the properties of the internal state.
   * Their definition of getOperationState can then return their public type.
   *
   * Example:
   *
   * ```ts
   * // Let's say we have our poller's operation state defined as:
   * interface MyOperationState extends PollOperationState<ResultType> {
   *   privateProperty?: string;
   *   publicProperty?: string;
   * }
   *
   * // To allow us to have a true separation of public and private state, we have to define another interface:
   * interface PublicState extends PollOperationState<ResultType> {
   *   publicProperty?: string;
   * }
   *
   * // Then, we define our Poller as follows:
   * export class MyPoller extends Poller<MyOperationState, ResultType> {
   *   // ... More content is needed here ...
   *
   *   public getOperationState(): PublicState {
   *     const state: PublicState = this.operation.state;
   *     return {
   *       // Properties from PollOperationState<TResult>
   *       isStarted: state.isStarted,
   *       isCompleted: state.isCompleted,
   *       isCancelled: state.isCancelled,
   *       error: state.error,
   *       result: state.result,
   *
   *       // The only other property needed by PublicState.
   *       publicProperty: state.publicProperty
   *     }
   *   }
   * }
   * ```
   *
   * You can see this in the tests of this repository, go to the file:
   * `../test/utils/testPoller.ts`
   * and look for the getOperationState implementation.
   */
  getOperationState() {
    return this.operation.state;
  }
  /**
   * Returns the result value of the operation,
   * regardless of the state of the poller.
   * It can return undefined or an incomplete form of the final TResult value
   * depending on the implementation.
   */
  getResult() {
    const state = this.operation.state;
    return state.result;
  }
  /**
   * Returns a serialized version of the poller's operation
   * by invoking the operation's toString method.
   */
  toString() {
    return this.operation.toString();
  }
}
exports.Poller = Poller;
},{}],"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/lroEngine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LroEngine = void 0;
var _operation = require("./operation.js");
var _constants = require("../../poller/constants.js");
var _poller = require("../poller.js");
var _operation2 = require("../../poller/operation.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The LRO Engine, a class that performs polling.
 */
class LroEngine extends _poller.Poller {
  constructor(lro, options) {
    const {
      intervalInMs = _constants.POLL_INTERVAL_IN_MS,
      resumeFrom,
      resolveOnUnsuccessful = false,
      isDone,
      lroResourceLocationConfig,
      processResult,
      updateState
    } = options || {};
    const state = resumeFrom ? (0, _operation2.deserializeState)(resumeFrom) : {};
    const operation = new _operation.GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);
    super(operation);
    this.resolveOnUnsuccessful = resolveOnUnsuccessful;
    this.config = {
      intervalInMs: intervalInMs
    };
    operation.setPollerConfig(this.config);
  }
  /**
   * The method used by the poller to wait before attempting to update its operation.
   */
  delay() {
    return new Promise(resolve => setTimeout(() => resolve(), this.config.intervalInMs));
  }
}
exports.LroEngine = LroEngine;
},{"./operation.js":"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/operation.js","../../poller/constants.js":"node_modules/@azure/core-lro/dist/browser/poller/constants.js","../poller.js":"node_modules/@azure/core-lro/dist/browser/legacy/poller.js","../../poller/operation.js":"node_modules/@azure/core-lro/dist/browser/poller/operation.js"}],"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LroEngine", {
  enumerable: true,
  get: function () {
    return _lroEngine.LroEngine;
  }
});
var _lroEngine = require("./lroEngine.js");
},{"./lroEngine.js":"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/lroEngine.js"}],"node_modules/@azure/core-lro/dist/browser/legacy/pollOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-lro/dist/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createHttpPoller: true
};
Object.defineProperty(exports, "createHttpPoller", {
  enumerable: true,
  get: function () {
    return _poller.createHttpPoller;
  }
});
var _poller = require("./http/poller.js");
var _index = require("./legacy/lroEngine/index.js");
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});
var _poller2 = require("./legacy/poller.js");
Object.keys(_poller2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _poller2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _poller2[key];
    }
  });
});
var _pollOperation = require("./legacy/pollOperation.js");
Object.keys(_pollOperation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _pollOperation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pollOperation[key];
    }
  });
});
},{"./http/poller.js":"node_modules/@azure/core-lro/dist/browser/http/poller.js","./legacy/lroEngine/index.js":"node_modules/@azure/core-lro/dist/browser/legacy/lroEngine/index.js","./legacy/poller.js":"node_modules/@azure/core-lro/dist/browser/legacy/poller.js","./legacy/pollOperation.js":"node_modules/@azure/core-lro/dist/browser/legacy/pollOperation.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBeginCopyFromUrlPoller = void 0;
var _coreUtil = require("@azure/core-util");
var _coreLro = require("@azure/core-lro");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This is the poller returned by {@link BlobClient.beginCopyFromURL}.
 * This can not be instantiated directly outside of this package.
 *
 * @hidden
 */
var BlobBeginCopyFromUrlPoller = exports.BlobBeginCopyFromUrlPoller = /*#__PURE__*/function (_Poller) {
  function BlobBeginCopyFromUrlPoller(options) {
    var _this;
    _classCallCheck(this, BlobBeginCopyFromUrlPoller);
    var blobClient = options.blobClient,
      copySource = options.copySource,
      _options$intervalInMs = options.intervalInMs,
      intervalInMs = _options$intervalInMs === void 0 ? 15000 : _options$intervalInMs,
      onProgress = options.onProgress,
      resumeFrom = options.resumeFrom,
      startCopyFromURLOptions = options.startCopyFromURLOptions;
    var state;
    if (resumeFrom) {
      state = JSON.parse(resumeFrom).state;
    }
    var operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {
      blobClient: blobClient,
      copySource: copySource,
      startCopyFromURLOptions: startCopyFromURLOptions
    }));
    _this = _callSuper(this, BlobBeginCopyFromUrlPoller, [operation]);
    if (typeof onProgress === "function") {
      _this.onProgress(onProgress);
    }
    _this.intervalInMs = intervalInMs;
    return _this;
  }
  _inherits(BlobBeginCopyFromUrlPoller, _Poller);
  return _createClass(BlobBeginCopyFromUrlPoller, [{
    key: "delay",
    value: function delay() {
      return (0, _coreUtil.delay)(this.intervalInMs);
    }
  }]);
}(_coreLro.Poller);
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */
var cancel = /*#__PURE__*/function () {
  var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var options,
      state,
      copyId,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          state = this.state;
          copyId = state.copyId;
          if (!state.isCompleted) {
            _context.next = 5;
            break;
          }
          return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));
        case 5:
          if (copyId) {
            _context.next = 8;
            break;
          }
          state.isCancelled = true;
          return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));
        case 8:
          _context.next = 10;
          return state.blobClient.abortCopyFromURL(copyId, {
            abortSignal: options.abortSignal
          });
        case 10:
          state.isCancelled = true;
          return _context.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));
        case 12:
        case "end":
          return _context.stop();
      }
    }, _callee, this);
  }));
  function cancel() {
    return _cancel.apply(this, arguments);
  }
  return cancel;
}();
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */
var update = /*#__PURE__*/function () {
  var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var options,
      state,
      blobClient,
      copySource,
      startCopyFromURLOptions,
      result,
      _result,
      copyStatus,
      copyProgress,
      prevCopyProgress,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          state = this.state;
          blobClient = state.blobClient, copySource = state.copySource, startCopyFromURLOptions = state.startCopyFromURLOptions;
          if (state.isStarted) {
            _context2.next = 12;
            break;
          }
          state.isStarted = true;
          _context2.next = 7;
          return blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);
        case 7:
          result = _context2.sent;
          // copyId is needed to abort
          state.copyId = result.copyId;
          if (result.copyStatus === "success") {
            state.result = result;
            state.isCompleted = true;
          }
          _context2.next = 27;
          break;
        case 12:
          if (state.isCompleted) {
            _context2.next = 27;
            break;
          }
          _context2.prev = 13;
          _context2.next = 16;
          return state.blobClient.getProperties({
            abortSignal: options.abortSignal
          });
        case 16:
          _result = _context2.sent;
          copyStatus = _result.copyStatus, copyProgress = _result.copyProgress;
          prevCopyProgress = state.copyProgress;
          if (copyProgress) {
            state.copyProgress = copyProgress;
          }
          if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
            // trigger in setTimeout, or swallow error?
            options.fireProgress(state);
          } else if (copyStatus === "success") {
            state.result = _result;
            state.isCompleted = true;
          } else if (copyStatus === "failed") {
            state.error = new Error("Blob copy failed with reason: \"".concat(_result.copyStatusDescription || "unknown", "\""));
            state.isCompleted = true;
          }
          _context2.next = 27;
          break;
        case 23:
          _context2.prev = 23;
          _context2.t0 = _context2["catch"](13);
          state.error = _context2.t0;
          state.isCompleted = true;
        case 27:
          return _context2.abrupt("return", makeBlobBeginCopyFromURLPollOperation(state));
        case 28:
        case "end":
          return _context2.stop();
      }
    }, _callee2, this, [[13, 23]]);
  }));
  function update() {
    return _update.apply(this, arguments);
  }
  return update;
}();
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */
var toString = function toString() {
  return JSON.stringify({
    state: this.state
  }, function (key, value) {
    // remove blobClient from serialized state since a client can't be hydrated from this info.
    if (key === "blobClient") {
      return undefined;
    }
    return value;
  });
};
/**
 * Creates a poll operation given the provided state.
 * @hidden
 */
function makeBlobBeginCopyFromURLPollOperation(state) {
  return {
    state: Object.assign({}, state),
    cancel: cancel,
    toString: toString,
    update: update
  };
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","@azure/core-lro":"node_modules/@azure/core-lro/dist/browser/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeToString = rangeToString;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Generate a range string. For example:
 *
 * "bytes=255-" or "bytes=0-511"
 *
 * @param iRange -
 */
function rangeToString(iRange) {
  if (iRange.offset < 0) {
    throw new RangeError("Range.offset cannot be smaller than 0.");
  }
  if (iRange.count && iRange.count <= 0) {
    throw new RangeError("Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.");
  }
  return iRange.count ? "bytes=".concat(iRange.offset, "-").concat(iRange.offset + iRange.count - 1) : "bytes=".concat(iRange.offset, "-");
}
},{}],"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Batch = void 0;
var _events = require("events");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// In browser, during webpack or browserify bundling, this module will be replaced by 'events'
// https://github.com/Gozala/events
/**
 * States for Batch.
 */
var BatchStates;
(function (BatchStates) {
  BatchStates[BatchStates["Good"] = 0] = "Good";
  BatchStates[BatchStates["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {}));
/**
 * Batch provides basic parallel execution with concurrency limits.
 * Will stop execute left operations when one of the executed operation throws an error.
 * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.
 */
var Batch = exports.Batch = /*#__PURE__*/function () {
  /**
   * Creates an instance of Batch.
   * @param concurrency -
   */
  function Batch() {
    var concurrency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
    _classCallCheck(this, Batch);
    /**
     * Number of active operations under execution.
     */
    this.actives = 0;
    /**
     * Number of completed operations under execution.
     */
    this.completed = 0;
    /**
     * Offset of next operation to be executed.
     */
    this.offset = 0;
    /**
     * Operation array to be executed.
     */
    this.operations = [];
    /**
     * States of Batch. When an error happens, state will turn into error.
     * Batch will stop execute left operations.
     */
    this.state = BatchStates.Good;
    if (concurrency < 1) {
      throw new RangeError("concurrency must be larger than 0");
    }
    this.concurrency = concurrency;
    this.emitter = new _events.EventEmitter();
  }
  /**
   * Add a operation into queue.
   *
   * @param operation -
   */
  return _createClass(Batch, [{
    key: "addOperation",
    value: function addOperation(operation) {
      var _this = this;
      this.operations.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _this.actives++;
              _context.next = 4;
              return operation();
            case 4:
              _this.actives--;
              _this.completed++;
              _this.parallelExecute();
              _context.next = 12;
              break;
            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              _this.emitter.emit("error", _context.t0);
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 9]]);
      })));
    }
    /**
     * Start execute operations in the queue.
     *
     */
  }, {
    key: "do",
    value: (function () {
      var _do2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this2 = this;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.operations.length === 0)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", Promise.resolve());
            case 2:
              this.parallelExecute();
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                _this2.emitter.on("finish", resolve);
                _this2.emitter.on("error", function (error) {
                  _this2.state = BatchStates.Error;
                  reject(error);
                });
              }));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _do() {
        return _do2.apply(this, arguments);
      }
      return _do;
    }()
    /**
     * Get next operation to be executed. Return null when reaching ends.
     *
     */
    )
  }, {
    key: "nextOperation",
    value: function nextOperation() {
      if (this.offset < this.operations.length) {
        return this.operations[this.offset++];
      }
      return null;
    }
    /**
     * Start execute operations. One one the most important difference between
     * this method with do() is that do() wraps as an sync method.
     *
     */
  }, {
    key: "parallelExecute",
    value: function parallelExecute() {
      if (this.state === BatchStates.Error) {
        return;
      }
      if (this.completed >= this.operations.length) {
        this.emitter.emit("finish");
        return;
      }
      while (this.actives < this.concurrency) {
        var operation = this.nextOperation();
        if (operation) {
          operation();
        } else {
          return;
        }
      }
    }
  }]);
}();
},{"events":"node_modules/events/events.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BufferScheduler = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// This file is used as a shim of "BufferScheduler" for some browser bundlers
// when trying to bundle "BufferScheduler"
// "BufferScheduler" class is only available in Node.js runtime
var BufferScheduler = exports.BufferScheduler = /*#__PURE__*/_createClass(function BufferScheduler() {
  _classCallCheck(this, BufferScheduler);
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _BufferScheduler = require("./BufferScheduler.browser");
Object.keys(_BufferScheduler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BufferScheduler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BufferScheduler[key];
    }
  });
});
},{"./BufferScheduler.browser":"node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blobToArrayBuffer = blobToArrayBuffer;
exports.blobToString = blobToString;
exports.fsStat = exports.fsCreateReadStream = void 0;
exports.readStreamToLocalFile = readStreamToLocalFile;
exports.streamToBuffer = streamToBuffer;
exports.streamToBuffer2 = streamToBuffer2;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Convert a Browser Blob object into ArrayBuffer.
 *
 * @param blob -
 */
function blobToArrayBuffer(_x) {
  return _blobToArrayBuffer.apply(this, arguments);
}
/**
 * Convert a Browser Blob object into string.
 *
 * @param blob -
 */
function _blobToArrayBuffer() {
  _blobToArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob) {
    var fileReader;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          fileReader = new FileReader();
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            fileReader.onloadend = function (ev) {
              resolve(ev.target.result);
            };
            fileReader.onerror = reject;
            fileReader.readAsArrayBuffer(blob);
          }));
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _blobToArrayBuffer.apply(this, arguments);
}
function blobToString(_x2) {
  return _blobToString.apply(this, arguments);
}
function _blobToString() {
  _blobToString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(blob) {
    var fileReader;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          fileReader = new FileReader();
          return _context2.abrupt("return", new Promise(function (resolve, reject) {
            fileReader.onloadend = function (ev) {
              resolve(ev.target.result);
            };
            fileReader.onerror = reject;
            fileReader.readAsText(blob);
          }));
        case 2:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _blobToString.apply(this, arguments);
}
function streamToBuffer() {
  /* empty */
}
function streamToBuffer2() {
  /* empty */
}
function readStreamToLocalFile() {
  /* empty */
}
var fsStat = exports.fsStat = function stat() {
  /* empty */
};
var fsCreateReadStream = exports.fsCreateReadStream = function createReadStream() {
  /* empty */
};
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageBlobClient = exports.BlockBlobClient = exports.BlobClient = exports.AppendBlobClient = void 0;
var _tslib = require("tslib");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreAuth = require("@azure/core-auth");
var _coreUtil = require("@azure/core-util");
var _BlobDownloadResponse = require("./BlobDownloadResponse");
var _BlobQueryResponse = require("./BlobQueryResponse");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _models = require("./models");
var _PageBlobRangeResponse = require("./PageBlobRangeResponse");
var _Pipeline = require("./Pipeline");
var _BlobStartCopyFromUrlPoller = require("./pollers/BlobStartCopyFromUrlPoller");
var _Range = require("./Range");
var _StorageClient2 = require("./StorageClient");
var _Batch = require("./utils/Batch");
var _src = require("../../storage-common/src");
var _constants = require("./utils/constants");
var _tracing = require("./utils/tracing");
var _utils = require("./utils/utils.common");
var _utils2 = require("./utils/utils.node");
var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");
var _BlobLeaseClient = require("./BlobLeaseClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
 * append blob, or page blob.
 */
var BlobClient = exports.BlobClient = /*#__PURE__*/function (_StorageClient) {
  function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this;
    _classCallCheck(this, BlobClient);
    options = options || {};
    var pipeline;
    var url;
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreUtil.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    _this = _callSuper(this, BlobClient, [url, pipeline]);
    var _this$getBlobAndConta = _this.getBlobAndContainerNamesFromUrl();
    _this._name = _this$getBlobAndConta.blobName;
    _this._containerName = _this$getBlobAndConta.containerName;
    _this.blobContext = _this.storageClientContext.blob;
    _this._snapshot = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.SNAPSHOT);
    _this._versionId = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.VERSIONID);
    return _this;
  }
  /**
   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
   */
  _inherits(BlobClient, _StorageClient);
  return _createClass(BlobClient, [{
    key: "name",
    get:
    /**
     * The name of the blob.
     */
    function get() {
      return this._name;
    }
    /**
     * The name of the storage container the blob is associated with.
     */
  }, {
    key: "containerName",
    get: function get() {
      return this._containerName;
    }
  }, {
    key: "withSnapshot",
    value: function withSnapshot(snapshot) {
      return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a new BlobClient object pointing to a version of this blob.
     * Provide "" will remove the versionId and return a Client to the base blob.
     *
     * @param versionId - The versionId.
     * @returns A new BlobClient object pointing to the version of this blob.
     */
  }, {
    key: "withVersion",
    value: function withVersion(versionId) {
      return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);
    }
    /**
     * Creates a AppendBlobClient object.
     *
     */
  }, {
    key: "getAppendBlobClient",
    value: function getAppendBlobClient() {
      return new AppendBlobClient(this.url, this.pipeline);
    }
    /**
     * Creates a BlockBlobClient object.
     *
     */
  }, {
    key: "getBlockBlobClient",
    value: function getBlockBlobClient() {
      return new BlockBlobClient(this.url, this.pipeline);
    }
    /**
     * Creates a PageBlobClient object.
     *
     */
  }, {
    key: "getPageBlobClient",
    value: function getPageBlobClient() {
      return new PageBlobClient(this.url, this.pipeline);
    }
    /**
     * Reads or downloads a blob from the system, including its metadata and properties.
     * You can also call Get Blob to read a snapshot.
     *
     * * In Node.js, data returns in a Readable stream readableStreamBody
     * * In browsers, data returns in a promise blobBody
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
     *
     * @param offset - From which position of the blob to download, greater than or equal to 0
     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
     * @param options - Optional options to Blob Download operation.
     *
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
     * console.log("Downloaded blob content:", downloaded.toString());
     *
     * async function streamToBuffer(readableStream) {
     * return new Promise((resolve, reject) => {
     * const chunks = [];
     * readableStream.on("data", (data) => {
     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
     * });
     * readableStream.on("end", () => {
     * resolve(Buffer.concat(chunks));
     * });
     * readableStream.on("error", reject);
     * });
     * }
     * ```
     *
     * Example usage (browser):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
     * console.log(
     *   "Downloaded blob content",
     *   downloaded
     * );
     *
     * async function blobToString(blob: Blob): Promise<string> {
     *   const fileReader = new FileReader();
     *   return new Promise<string>((resolve, reject) => {
     *     fileReader.onloadend = (ev: any) => {
     *       resolve(ev.target!.result);
     *     };
     *     fileReader.onerror = reject;
     *     fileReader.readAsText(blob);
     *   });
     * }
     * ```
     */
  }, {
    key: "download",
    value: (function () {
      var _download = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _this2 = this;
        var offset,
          count,
          options,
          _args3 = arguments;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              offset = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 0;
              count = _args3.length > 1 ? _args3[1] : undefined;
              options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
              options.conditions = options.conditions || {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context3.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-download", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(updatedOptions) {
                  var _a, res, wrappedRes;
                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.t0 = _utils.assertResponse;
                        _context2.next = 3;
                        return _this2.blobContext.download({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          requestOptions: {
                            onDownloadProgress: _coreUtil.isNode ? undefined : options.onProgress // for Node.js, progress is reported by RetriableReadableStream
                          },
                          range: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          rangeGetContentMD5: options.rangeGetContentMD5,
                          rangeGetContentCRC64: options.rangeGetContentCrc64,
                          snapshot: options.snapshot,
                          cpkInfo: options.customerProvidedKey,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context2.t1 = _context2.sent;
                        res = (0, _context2.t0)(_context2.t1);
                        wrappedRes = Object.assign(Object.assign({}, res), {
                          _response: res._response,
                          objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                          objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res.objectReplicationRules)
                        }); // Return browser response immediately
                        if (_coreUtil.isNode) {
                          _context2.next = 8;
                          break;
                        }
                        return _context2.abrupt("return", wrappedRes);
                      case 8:
                        // We support retrying when download stream unexpected ends in Node.js runtime
                        // Following code shouldn't be bundled into browser build, however some
                        // bundlers may try to bundle following code and "FileReadResponse.ts".
                        // In this case, "FileDownloadResponse.browser.ts" will be used as a shim of "FileDownloadResponse.ts"
                        // The config is in package.json "browser" field
                        if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {
                          // TODO: Default value or make it a required parameter?
                          options.maxRetryRequests = _constants.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
                        }
                        if (!(res.contentLength === undefined)) {
                          _context2.next = 11;
                          break;
                        }
                        throw new RangeError("File download response doesn't contain valid content length header");
                      case 11:
                        if (res.etag) {
                          _context2.next = 13;
                          break;
                        }
                        throw new RangeError("File download response doesn't contain valid etag header");
                      case 13:
                        return _context2.abrupt("return", new _BlobDownloadResponse.BlobDownloadResponse(wrappedRes, /*#__PURE__*/function () {
                          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(start) {
                            var _a, updatedDownloadOptions;
                            return _regeneratorRuntime().wrap(function _callee$(_context) {
                              while (1) switch (_context.prev = _context.next) {
                                case 0:
                                  updatedDownloadOptions = {
                                    leaseAccessConditions: options.conditions,
                                    modifiedAccessConditions: {
                                      ifMatch: options.conditions.ifMatch || res.etag,
                                      ifModifiedSince: options.conditions.ifModifiedSince,
                                      ifNoneMatch: options.conditions.ifNoneMatch,
                                      ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
                                      ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                                    },
                                    range: (0, _Range.rangeToString)({
                                      count: offset + res.contentLength - start,
                                      offset: start
                                    }),
                                    rangeGetContentMD5: options.rangeGetContentMD5,
                                    rangeGetContentCRC64: options.rangeGetContentCrc64,
                                    snapshot: options.snapshot,
                                    cpkInfo: options.customerProvidedKey
                                  }; // Debug purpose only
                                  // console.log(
                                  //   `Read from internal stream, range: ${
                                  //     updatedOptions.range
                                  //   }, options: ${JSON.stringify(updatedOptions)}`
                                  // );
                                  _context.next = 3;
                                  return _this2.blobContext.download(Object.assign({
                                    abortSignal: options.abortSignal
                                  }, updatedDownloadOptions));
                                case 3:
                                  return _context.abrupt("return", _context.sent.readableStreamBody);
                                case 4:
                                case "end":
                                  return _context.stop();
                              }
                            }, _callee);
                          }));
                          return function (_x2) {
                            return _ref2.apply(this, arguments);
                          };
                        }(), offset, res.contentLength, {
                          maxRetryRequests: options.maxRetryRequests,
                          onProgress: options.onProgress
                        }));
                      case 14:
                      case "end":
                        return _context2.stop();
                    }
                  }, _callee2);
                }));
                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function download() {
        return _download.apply(this, arguments);
      }
      return download;
    }()
    /**
     * Returns true if the Azure blob resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing blob might be deleted by other clients or
     * applications. Vice versa new blobs might be added by other clients or applications after this
     * function completes.
     *
     * @param options - options to Exists operation.
     */
    )
  }, {
    key: "exists",
    value: (function () {
      var _exists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var _this3 = this;
        var options,
          _args5 = arguments;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
              return _context5.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-exists", options, /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                    while (1) switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.prev = 0;
                        (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, _this3.isHttps);
                        _context4.next = 4;
                        return _this3.getProperties({
                          abortSignal: options.abortSignal,
                          customerProvidedKey: options.customerProvidedKey,
                          conditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 4:
                        return _context4.abrupt("return", true);
                      case 7:
                        _context4.prev = 7;
                        _context4.t0 = _context4["catch"](0);
                        if (!(_context4.t0.statusCode === 404)) {
                          _context4.next = 13;
                          break;
                        }
                        return _context4.abrupt("return", false);
                      case 13:
                        if (!(_context4.t0.statusCode === 409 && (_context4.t0.details.errorCode === _constants.BlobUsesCustomerSpecifiedEncryptionMsg || _context4.t0.details.errorCode === _constants.BlobDoesNotUseCustomerSpecifiedEncryption))) {
                          _context4.next = 15;
                          break;
                        }
                        return _context4.abrupt("return", true);
                      case 15:
                        throw _context4.t0;
                      case 16:
                      case "end":
                        return _context4.stop();
                    }
                  }, _callee4, null, [[0, 7]]);
                }));
                return function (_x3) {
                  return _ref3.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function exists() {
        return _exists.apply(this, arguments);
      }
      return exists;
    }()
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param options - Optional options to Get Properties operation.
     */
    )
  }, {
    key: "getProperties",
    value: (function () {
      var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var _this4 = this;
        var options,
          _args7 = arguments;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context7.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-getProperties", options, /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(updatedOptions) {
                  var _a, res;
                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                    while (1) switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.t0 = _utils.assertResponse;
                        _context6.next = 3;
                        return _this4.blobContext.getProperties({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context6.t1 = _context6.sent;
                        res = (0, _context6.t0)(_context6.t1);
                        return _context6.abrupt("return", Object.assign(Object.assign({}, res), {
                          _response: res._response,
                          objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                          objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res.objectReplicationRules)
                        }));
                      case 6:
                      case "end":
                        return _context6.stop();
                    }
                  }, _callee6);
                }));
                return function (_x4) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function getProperties() {
        return _getProperties.apply(this, arguments);
      }
      return getProperties;
    }()
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param options - Optional options to Blob Delete operation.
     */
    )
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var _this5 = this;
        var options,
          _args9 = arguments;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
              options.conditions = options.conditions || {};
              return _context9.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-delete", options, /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                    while (1) switch (_context8.prev = _context8.next) {
                      case 0:
                        _context8.t0 = _utils.assertResponse;
                        _context8.next = 3;
                        return _this5.blobContext.delete({
                          abortSignal: options.abortSignal,
                          deleteSnapshots: options.deleteSnapshots,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context8.t1 = _context8.sent;
                        return _context8.abrupt("return", (0, _context8.t0)(_context8.t1));
                      case 5:
                      case "end":
                        return _context8.stop();
                    }
                  }, _callee8);
                }));
                return function (_x5) {
                  return _ref5.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
    /**
     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param options - Optional options to Blob Delete operation.
     */
    )
  }, {
    key: "deleteIfExists",
    value: (function () {
      var _deleteIfExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var _this6 = this;
        var options,
          _args11 = arguments;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
              return _context11.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-deleteIfExists", options, /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(updatedOptions) {
                  var _a, _b, res;
                  return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                    while (1) switch (_context10.prev = _context10.next) {
                      case 0:
                        _context10.prev = 0;
                        _context10.t0 = _utils.assertResponse;
                        _context10.next = 4;
                        return _this6.delete(updatedOptions);
                      case 4:
                        _context10.t1 = _context10.sent;
                        res = (0, _context10.t0)(_context10.t1);
                        return _context10.abrupt("return", Object.assign(Object.assign({
                          succeeded: true
                        }, res), {
                          _response: res._response
                        }));
                      case 9:
                        _context10.prev = 9;
                        _context10.t2 = _context10["catch"](0);
                        if (!(((_a = _context10.t2.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobNotFound")) {
                          _context10.next = 13;
                          break;
                        }
                        return _context10.abrupt("return", Object.assign(Object.assign({
                          succeeded: false
                        }, (_b = _context10.t2.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                          _response: _context10.t2.response
                        }));
                      case 13:
                        throw _context10.t2;
                      case 14:
                      case "end":
                        return _context10.stop();
                    }
                  }, _callee10, null, [[0, 9]]);
                }));
                return function (_x6) {
                  return _ref6.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
      function deleteIfExists() {
        return _deleteIfExists.apply(this, arguments);
      }
      return deleteIfExists;
    }()
    /**
     * Restores the contents and metadata of soft deleted blob and any associated
     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
     * or later.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
     *
     * @param options - Optional options to Blob Undelete operation.
     */
    )
  }, {
    key: "undelete",
    value: (function () {
      var _undelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        var _this7 = this;
        var options,
          _args13 = arguments;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
              return _context13.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-undelete", options, /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                    while (1) switch (_context12.prev = _context12.next) {
                      case 0:
                        _context12.t0 = _utils.assertResponse;
                        _context12.next = 3;
                        return _this7.blobContext.undelete({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context12.t1 = _context12.sent;
                        return _context12.abrupt("return", (0, _context12.t0)(_context12.t1));
                      case 5:
                      case "end":
                        return _context12.stop();
                    }
                  }, _callee12);
                }));
                return function (_x7) {
                  return _ref7.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context13.stop();
          }
        }, _callee13);
      }));
      function undelete() {
        return _undelete.apply(this, arguments);
      }
      return undelete;
    }()
    /**
     * Sets system properties on the blob.
     *
     * If no value provided, or no value provided for the specified blob HTTP headers,
     * these blob HTTP headers without a value will be cleared.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param blobHTTPHeaders - If no value provided, or no value provided for
     *                                                   the specified blob HTTP headers, these blob HTTP
     *                                                   headers without a value will be cleared.
     *                                                   A common header to set is `blobContentType`
     *                                                   enabling the browser to provide functionality
     *                                                   based on file type.
     * @param options - Optional options to Blob Set HTTP Headers operation.
     */
    )
  }, {
    key: "setHTTPHeaders",
    value: (function () {
      var _setHTTPHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(blobHTTPHeaders) {
        var _this8 = this;
        var options,
          _args15 = arguments;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context15.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setHTTPHeaders", options, /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                    while (1) switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.t0 = _utils.assertResponse;
                        _context14.next = 3;
                        return _this8.blobContext.setHttpHeaders({
                          abortSignal: options.abortSignal,
                          blobHttpHeaders: blobHTTPHeaders,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context14.t1 = _context14.sent;
                        return _context14.abrupt("return", (0, _context14.t0)(_context14.t1));
                      case 5:
                      case "end":
                        return _context14.stop();
                    }
                  }, _callee14);
                }));
                return function (_x9) {
                  return _ref8.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function setHTTPHeaders(_x8) {
        return _setHTTPHeaders.apply(this, arguments);
      }
      return setHTTPHeaders;
    }()
    /**
     * Sets user-defined metadata for the specified blob as one or more name-value pairs.
     *
     * If no option provided, or no metadata defined in the parameter, the blob
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
     *
     * @param metadata - Replace existing metadata with this value.
     *                               If no value provided the existing metadata will be removed.
     * @param options - Optional options to Set Metadata operation.
     */
    )
  }, {
    key: "setMetadata",
    value: (function () {
      var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(metadata) {
        var _this9 = this;
        var options,
          _args17 = arguments;
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context17.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setMetadata", options, /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                    while (1) switch (_context16.prev = _context16.next) {
                      case 0:
                        _context16.t0 = _utils.assertResponse;
                        _context16.next = 3;
                        return _this9.blobContext.setMetadata({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          metadata: metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context16.t1 = _context16.sent;
                        return _context16.abrupt("return", (0, _context16.t0)(_context16.t1));
                      case 5:
                      case "end":
                        return _context16.stop();
                    }
                  }, _callee16);
                }));
                return function (_x11) {
                  return _ref9.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function setMetadata(_x10) {
        return _setMetadata.apply(this, arguments);
      }
      return setMetadata;
    }()
    /**
     * Sets tags on the underlying blob.
     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
     * Valid tag key and value characters include lower and upper case letters, digits (0-9),
     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
     *
     * @param tags -
     * @param options -
     */
    )
  }, {
    key: "setTags",
    value: (function () {
      var _setTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(tags) {
        var _this10 = this;
        var options,
          _args19 = arguments;
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
              return _context19.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setTags", options, /*#__PURE__*/function () {
                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                    while (1) switch (_context18.prev = _context18.next) {
                      case 0:
                        _context18.t0 = _utils.assertResponse;
                        _context18.next = 3;
                        return _this10.blobContext.setTags({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions,
                          tags: (0, _utils.toBlobTags)(tags)
                        });
                      case 3:
                        _context18.t1 = _context18.sent;
                        return _context18.abrupt("return", (0, _context18.t0)(_context18.t1));
                      case 5:
                      case "end":
                        return _context18.stop();
                    }
                  }, _callee18);
                }));
                return function (_x13) {
                  return _ref10.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context19.stop();
          }
        }, _callee19);
      }));
      function setTags(_x12) {
        return _setTags.apply(this, arguments);
      }
      return setTags;
    }()
    /**
     * Gets the tags associated with the underlying blob.
     *
     * @param options -
     */
    )
  }, {
    key: "getTags",
    value: (function () {
      var _getTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
        var _this11 = this;
        var options,
          _args21 = arguments;
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              options = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};
              return _context21.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-getTags", options, /*#__PURE__*/function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(updatedOptions) {
                  var _a, response, wrappedResponse;
                  return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                    while (1) switch (_context20.prev = _context20.next) {
                      case 0:
                        _context20.t0 = _utils.assertResponse;
                        _context20.next = 3;
                        return _this11.blobContext.getTags({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context20.t1 = _context20.sent;
                        response = (0, _context20.t0)(_context20.t1);
                        wrappedResponse = Object.assign(Object.assign({}, response), {
                          _response: response._response,
                          tags: (0, _utils.toTags)({
                            blobTagSet: response.blobTagSet
                          }) || {}
                        });
                        return _context20.abrupt("return", wrappedResponse);
                      case 7:
                      case "end":
                        return _context20.stop();
                    }
                  }, _callee20);
                }));
                return function (_x14) {
                  return _ref11.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context21.stop();
          }
        }, _callee21);
      }));
      function getTags() {
        return _getTags.apply(this, arguments);
      }
      return getTags;
    }()
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the blob.
     *
     * @param proposeLeaseId - Initial proposed lease Id.
     * @returns A new BlobLeaseClient object for managing leases on the blob.
     */
    )
  }, {
    key: "getBlobLeaseClient",
    value: function getBlobLeaseClient(proposeLeaseId) {
      return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
    }
    /**
     * Creates a read-only snapshot of a blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
     *
     * @param options - Optional options to the Blob Create Snapshot operation.
     */
  }, {
    key: "createSnapshot",
    value: (function () {
      var _createSnapshot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var _this12 = this;
        var options,
          _args23 = arguments;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              options = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context23.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-createSnapshot", options, /*#__PURE__*/function () {
                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee22$(_context22) {
                    while (1) switch (_context22.prev = _context22.next) {
                      case 0:
                        _context22.t0 = _utils.assertResponse;
                        _context22.next = 3;
                        return _this12.blobContext.createSnapshot({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context22.t1 = _context22.sent;
                        return _context22.abrupt("return", (0, _context22.t0)(_context22.t1));
                      case 5:
                      case "end":
                        return _context22.stop();
                    }
                  }, _callee22);
                }));
                return function (_x15) {
                  return _ref12.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this);
      }));
      function createSnapshot() {
        return _createSnapshot.apply(this, arguments);
      }
      return createSnapshot;
    }()
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the copy is completed.
     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * Example using automatic polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using manual polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * while (!poller.isDone()) {
     *    await poller.poll();
     * }
     * const result = copyPoller.getResult();
     * ```
     *
     * Example using progress updates:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   onProgress(state) {
     *     console.log(`Progress: ${state.copyProgress}`);
     *   }
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using a changing polling interval (default 15 seconds):
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   intervalInMs: 1000 // poll blob every 1 second for copy progress
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using copy cancellation:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * // cancel operation after starting it.
     * try {
     *   await copyPoller.cancelOperation();
     *   // calls to get the result now throw PollerCancelledError
     *   await copyPoller.getResult();
     * } catch (err) {
     *   if (err.name === 'PollerCancelledError') {
     *     console.log('The copy was cancelled.');
     *   }
     * }
     * ```
     *
     * @param copySource - url to the source Azure Blob/File.
     * @param options - Optional options to the Blob Start Copy From URL operation.
     */
    )
  }, {
    key: "beginCopyFromURL",
    value: (function () {
      var _beginCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(copySource) {
        var _this13 = this;
        var options,
          client,
          poller,
          _args24 = arguments;
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              options = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};
              client = {
                abortCopyFromURL: function abortCopyFromURL() {
                  return _this13.abortCopyFromURL.apply(_this13, arguments);
                },
                getProperties: function getProperties() {
                  return _this13.getProperties.apply(_this13, arguments);
                },
                startCopyFromURL: function startCopyFromURL() {
                  return _this13.startCopyFromURL.apply(_this13, arguments);
                }
              };
              poller = new _BlobStartCopyFromUrlPoller.BlobBeginCopyFromUrlPoller({
                blobClient: client,
                copySource: copySource,
                intervalInMs: options.intervalInMs,
                onProgress: options.onProgress,
                resumeFrom: options.resumeFrom,
                startCopyFromURLOptions: options
              }); // Trigger the startCopyFromURL call by calling poll.
              // Any errors from this method should be surfaced to the user.
              _context24.next = 5;
              return poller.poll();
            case 5:
              return _context24.abrupt("return", poller);
            case 6:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function beginCopyFromURL(_x16) {
        return _beginCopyFromURL.apply(this, arguments);
      }
      return beginCopyFromURL;
    }()
    /**
     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
     * length and full metadata. Version 2012-02-12 and newer.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
     *
     * @param copyId - Id of the Copy From URL operation.
     * @param options - Optional options to the Blob Abort Copy From URL operation.
     */
    )
  }, {
    key: "abortCopyFromURL",
    value: (function () {
      var _abortCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(copyId) {
        var _this14 = this;
        var options,
          _args26 = arguments;
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              options = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};
              return _context26.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-abortCopyFromURL", options, /*#__PURE__*/function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                    while (1) switch (_context25.prev = _context25.next) {
                      case 0:
                        _context25.t0 = _utils.assertResponse;
                        _context25.next = 3;
                        return _this14.blobContext.abortCopyFromURL(copyId, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context25.t1 = _context25.sent;
                        return _context25.abrupt("return", (0, _context25.t0)(_context25.t1));
                      case 5:
                      case "end":
                        return _context25.stop();
                    }
                  }, _callee25);
                }));
                return function (_x18) {
                  return _ref13.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function abortCopyFromURL(_x17) {
        return _abortCopyFromURL.apply(this, arguments);
      }
      return abortCopyFromURL;
    }()
    /**
     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
     * return a response until the copy is complete.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
     *
     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
     * @param options -
     */
    )
  }, {
    key: "syncCopyFromURL",
    value: (function () {
      var _syncCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(copySource) {
        var _this15 = this;
        var options,
          _args28 = arguments;
        return _regeneratorRuntime().wrap(function _callee28$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              options = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};
              options.conditions = options.conditions || {};
              options.sourceConditions = options.sourceConditions || {};
              return _context28.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-syncCopyFromURL", options, /*#__PURE__*/function () {
                var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(updatedOptions) {
                  var _a, _b, _c, _d, _e, _f, _g;
                  return _regeneratorRuntime().wrap(function _callee27$(_context27) {
                    while (1) switch (_context27.prev = _context27.next) {
                      case 0:
                        _context27.t0 = _utils.assertResponse;
                        _context27.next = 3;
                        return _this15.blobContext.copyFromURL(copySource, {
                          abortSignal: options.abortSignal,
                          metadata: options.metadata,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          sourceModifiedAccessConditions: {
                            sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,
                            sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,
                            sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,
                            sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
                          },
                          sourceContentMD5: options.sourceContentMD5,
                          copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,
                          immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,
                          legalHold: options.legalHold,
                          encryptionScope: options.encryptionScope,
                          copySourceTags: options.copySourceTags,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context27.t1 = _context27.sent;
                        return _context27.abrupt("return", (0, _context27.t0)(_context27.t1));
                      case 5:
                      case "end":
                        return _context27.stop();
                    }
                  }, _callee27);
                }));
                return function (_x20) {
                  return _ref14.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context28.stop();
          }
        }, _callee28);
      }));
      function syncCopyFromURL(_x19) {
        return _syncCopyFromURL.apply(this, arguments);
      }
      return syncCopyFromURL;
    }()
    /**
     * Sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant
     * storage only). A premium page blob's tier determines the allowed size, IOPS,
     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
     * storage type. This operation does not update the blob's ETag.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
     *
     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
     * @param options - Optional options to the Blob Set Tier operation.
     */
    )
  }, {
    key: "setAccessTier",
    value: (function () {
      var _setAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(tier) {
        var _this16 = this;
        var options,
          _args30 = arguments;
        return _regeneratorRuntime().wrap(function _callee30$(_context30) {
          while (1) switch (_context30.prev = _context30.next) {
            case 0:
              options = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : {};
              return _context30.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setAccessTier", options, /*#__PURE__*/function () {
                var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee29$(_context29) {
                    while (1) switch (_context29.prev = _context29.next) {
                      case 0:
                        _context29.t0 = _utils.assertResponse;
                        _context29.next = 3;
                        return _this16.blobContext.setTier((0, _models.toAccessTier)(tier), {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          rehydratePriority: options.rehydratePriority,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context29.t1 = _context29.sent;
                        return _context29.abrupt("return", (0, _context29.t0)(_context29.t1));
                      case 5:
                      case "end":
                        return _context29.stop();
                    }
                  }, _callee29);
                }));
                return function (_x22) {
                  return _ref15.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context30.stop();
          }
        }, _callee30);
      }));
      function setAccessTier(_x21) {
        return _setAccessTier.apply(this, arguments);
      }
      return setAccessTier;
    }())
  }, {
    key: "downloadToBuffer",
    value: function () {
      var _downloadToBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(param1, param2, param3) {
        var _this17 = this;
        var param4,
          _a,
          buffer,
          offset,
          count,
          options,
          blockSize,
          _args34 = arguments;
        return _regeneratorRuntime().wrap(function _callee33$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              param4 = _args34.length > 3 && _args34[3] !== undefined ? _args34[3] : {};
              offset = 0;
              count = 0;
              options = param4;
              if (param1 instanceof Buffer) {
                buffer = param1;
                offset = param2 || 0;
                count = typeof param3 === "number" ? param3 : 0;
              } else {
                offset = typeof param1 === "number" ? param1 : 0;
                count = typeof param2 === "number" ? param2 : 0;
                options = param3 || {};
              }
              blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;
              if (!(blockSize < 0)) {
                _context34.next = 8;
                break;
              }
              throw new RangeError("blockSize option must be >= 0");
            case 8:
              if (blockSize === 0) {
                blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
              }
              if (!(offset < 0)) {
                _context34.next = 11;
                break;
              }
              throw new RangeError("offset option must be >= 0");
            case 11:
              if (!(count && count <= 0)) {
                _context34.next = 13;
                break;
              }
              throw new RangeError("count option must be greater than 0");
            case 13:
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context34.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-downloadToBuffer", options, /*#__PURE__*/function () {
                var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(updatedOptions) {
                  var response, transferProgress, batch, _loop, off;
                  return _regeneratorRuntime().wrap(function _callee32$(_context33) {
                    while (1) switch (_context33.prev = _context33.next) {
                      case 0:
                        if (count) {
                          _context33.next = 7;
                          break;
                        }
                        _context33.next = 3;
                        return _this17.getProperties(Object.assign(Object.assign({}, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        response = _context33.sent;
                        count = response.contentLength - offset;
                        if (!(count < 0)) {
                          _context33.next = 7;
                          break;
                        }
                        throw new RangeError("offset ".concat(offset, " shouldn't be larger than blob size ").concat(response.contentLength));
                      case 7:
                        if (buffer) {
                          _context33.next = 15;
                          break;
                        }
                        _context33.prev = 8;
                        buffer = Buffer.alloc(count);
                        _context33.next = 15;
                        break;
                      case 12:
                        _context33.prev = 12;
                        _context33.t0 = _context33["catch"](8);
                        throw new Error("Unable to allocate the buffer of size: ".concat(count, "(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\t ").concat(_context33.t0.message));
                      case 15:
                        if (!(buffer.length < count)) {
                          _context33.next = 17;
                          break;
                        }
                        throw new RangeError("The buffer's size should be equal to or larger than the request count of bytes: ".concat(count));
                      case 17:
                        transferProgress = 0;
                        batch = new _Batch.Batch(options.concurrency);
                        _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(off) {
                          return _regeneratorRuntime().wrap(function _loop$(_context32) {
                            while (1) switch (_context32.prev = _context32.next) {
                              case 0:
                                batch.addOperation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
                                  var chunkEnd, response, stream;
                                  return _regeneratorRuntime().wrap(function _callee31$(_context31) {
                                    while (1) switch (_context31.prev = _context31.next) {
                                      case 0:
                                        // Exclusive chunk end position
                                        chunkEnd = offset + count;
                                        if (off + blockSize < chunkEnd) {
                                          chunkEnd = off + blockSize;
                                        }
                                        _context31.next = 4;
                                        return _this17.download(off, chunkEnd - off, {
                                          abortSignal: options.abortSignal,
                                          conditions: options.conditions,
                                          maxRetryRequests: options.maxRetryRequestsPerBlock,
                                          customerProvidedKey: options.customerProvidedKey,
                                          tracingOptions: updatedOptions.tracingOptions
                                        });
                                      case 4:
                                        response = _context31.sent;
                                        stream = response.readableStreamBody;
                                        _context31.next = 8;
                                        return (0, _utils2.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset);
                                      case 8:
                                        // Update progress after block is downloaded, in case of block trying
                                        // Could provide finer grained progress updating inside HTTP requests,
                                        // only if convenience layer download try is enabled
                                        transferProgress += chunkEnd - off;
                                        if (options.onProgress) {
                                          options.onProgress({
                                            loadedBytes: transferProgress
                                          });
                                        }
                                      case 10:
                                      case "end":
                                        return _context31.stop();
                                    }
                                  }, _callee31);
                                })));
                              case 1:
                              case "end":
                                return _context32.stop();
                            }
                          }, _loop);
                        });
                        off = offset;
                      case 21:
                        if (!(off < offset + count)) {
                          _context33.next = 26;
                          break;
                        }
                        return _context33.delegateYield(_loop(off), "t1", 23);
                      case 23:
                        off = off + blockSize;
                        _context33.next = 21;
                        break;
                      case 26:
                        _context33.next = 28;
                        return batch.do();
                      case 28:
                        return _context33.abrupt("return", buffer);
                      case 29:
                      case "end":
                        return _context33.stop();
                    }
                  }, _callee32, null, [[8, 12]]);
                }));
                return function (_x26) {
                  return _ref16.apply(this, arguments);
                };
              }()));
            case 15:
            case "end":
              return _context34.stop();
          }
        }, _callee33);
      }));
      function downloadToBuffer(_x23, _x24, _x25) {
        return _downloadToBuffer.apply(this, arguments);
      }
      return downloadToBuffer;
    }()
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob to a local file.
     * Fails if the the given file path already exits.
     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
     *
     * @param filePath -
     * @param offset - From which position of the block blob to download.
     * @param count - How much data to be downloaded. Will download to the end when passing undefined.
     * @param options - Options to Blob download options.
     * @returns The response data for blob download operation,
     *                                                 but with readableStreamBody set to undefined since its
     *                                                 content is already read and written into a local file
     *                                                 at the specified path.
     */
  }, {
    key: "downloadToFile",
    value: (function () {
      var _downloadToFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(filePath) {
        var _this18 = this;
        var offset,
          count,
          options,
          _args36 = arguments;
        return _regeneratorRuntime().wrap(function _callee35$(_context36) {
          while (1) switch (_context36.prev = _context36.next) {
            case 0:
              offset = _args36.length > 1 && _args36[1] !== undefined ? _args36[1] : 0;
              count = _args36.length > 2 ? _args36[2] : undefined;
              options = _args36.length > 3 && _args36[3] !== undefined ? _args36[3] : {};
              return _context36.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-downloadToFile", options, /*#__PURE__*/function () {
                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(updatedOptions) {
                  var response;
                  return _regeneratorRuntime().wrap(function _callee34$(_context35) {
                    while (1) switch (_context35.prev = _context35.next) {
                      case 0:
                        _context35.next = 2;
                        return _this18.download(offset, count, Object.assign(Object.assign({}, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 2:
                        response = _context35.sent;
                        if (!response.readableStreamBody) {
                          _context35.next = 6;
                          break;
                        }
                        _context35.next = 6;
                        return (0, _utils2.readStreamToLocalFile)(response.readableStreamBody, filePath);
                      case 6:
                        // The stream is no longer accessible so setting it to undefined.
                        response.blobDownloadStream = undefined;
                        return _context35.abrupt("return", response);
                      case 8:
                      case "end":
                        return _context35.stop();
                    }
                  }, _callee34);
                }));
                return function (_x28) {
                  return _ref18.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context36.stop();
          }
        }, _callee35);
      }));
      function downloadToFile(_x27) {
        return _downloadToFile.apply(this, arguments);
      }
      return downloadToFile;
    }())
  }, {
    key: "getBlobAndContainerNamesFromUrl",
    value: function getBlobAndContainerNamesFromUrl() {
      var containerName;
      var blobName;
      try {
        //  URL may look like the following
        // "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString";
        // "https://myaccount.blob.core.windows.net/mycontainer/blob";
        // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString";
        // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt";
        // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`
        // http://localhost:10001/devstoreaccount1/containername/blob
        var parsedUrl = new URL(this.url);
        if (parsedUrl.host.split(".")[1] === "blob") {
          // "https://myaccount.blob.core.windows.net/containername/blob".
          // .getPath() -> /containername/blob
          var pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
          containerName = pathComponents[1];
          blobName = pathComponents[3];
        } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
          // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob
          // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob
          // .getPath() -> /devstoreaccount1/containername/blob
          var _pathComponents = parsedUrl.pathname.match("/([^/]*)/([^/]*)(/(.*))?");
          containerName = _pathComponents[2];
          blobName = _pathComponents[4];
        } else {
          // "https://customdomain.com/containername/blob".
          // .getPath() -> /containername/blob
          var _pathComponents2 = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
          containerName = _pathComponents2[1];
          blobName = _pathComponents2[3];
        }
        // decode the encoded blobName, containerName - to get all the special characters that might be present in them
        containerName = decodeURIComponent(containerName);
        blobName = decodeURIComponent(blobName);
        // Azure Storage Server will replace "\" with "/" in the blob names
        //   doing the same in the SDK side so that the user doesn't have to replace "\" instances in the blobName
        blobName = blobName.replace(/\\/g, "/");
        if (!containerName) {
          throw new Error("Provided containerName is invalid.");
        }
        return {
          blobName: blobName,
          containerName: containerName
        };
      } catch (error) {
        throw new Error("Unable to extract blobName and containerName with provided information.");
      }
    }
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * @param copySource - url to the source Azure Blob/File.
     * @param options - Optional options to the Blob Start Copy From URL operation.
     */
  }, {
    key: "startCopyFromURL",
    value: (function () {
      var _startCopyFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(copySource) {
        var _this19 = this;
        var options,
          _args38 = arguments;
        return _regeneratorRuntime().wrap(function _callee37$(_context38) {
          while (1) switch (_context38.prev = _context38.next) {
            case 0:
              options = _args38.length > 1 && _args38[1] !== undefined ? _args38[1] : {};
              return _context38.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-startCopyFromURL", options, /*#__PURE__*/function () {
                var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(updatedOptions) {
                  var _a, _b, _c;
                  return _regeneratorRuntime().wrap(function _callee36$(_context37) {
                    while (1) switch (_context37.prev = _context37.next) {
                      case 0:
                        options.conditions = options.conditions || {};
                        options.sourceConditions = options.sourceConditions || {};
                        _context37.t0 = _utils.assertResponse;
                        _context37.next = 5;
                        return _this19.blobContext.startCopyFromURL(copySource, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          sourceModifiedAccessConditions: {
                            sourceIfMatch: options.sourceConditions.ifMatch,
                            sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                            sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                            sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
                            sourceIfTags: options.sourceConditions.tagConditions
                          },
                          immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                          immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                          legalHold: options.legalHold,
                          rehydratePriority: options.rehydratePriority,
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          sealBlob: options.sealBlob,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 5:
                        _context37.t1 = _context37.sent;
                        return _context37.abrupt("return", (0, _context37.t0)(_context37.t1));
                      case 7:
                      case "end":
                        return _context37.stop();
                    }
                  }, _callee36);
                }));
                return function (_x30) {
                  return _ref19.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context38.stop();
          }
        }, _callee37);
      }));
      function startCopyFromURL(_x29) {
        return _startCopyFromURL.apply(this, arguments);
      }
      return startCopyFromURL;
    }()
    /**
     * Only available for BlobClient constructed with a shared key credential.
     *
     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     * @param options - Optional parameters.
     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */
    )
  }, {
    key: "generateSasUrl",
    value: function generateSasUrl(options) {
      var _this20 = this;
      return new Promise(function (resolve) {
        if (!(_this20.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
          throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
        }
        var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)(Object.assign({
          containerName: _this20._containerName,
          blobName: _this20._name,
          snapshotTime: _this20._snapshot,
          versionId: _this20._versionId
        }, options), _this20.credential).toString();
        resolve((0, _utils.appendToURLQuery)(_this20.url, sas));
      });
    }
    /**
     * Delete the immutablility policy on the blob.
     *
     * @param options - Optional options to delete immutability policy on the blob.
     */
  }, {
    key: "deleteImmutabilityPolicy",
    value: (function () {
      var _deleteImmutabilityPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
        var _this21 = this;
        var options,
          _args40 = arguments;
        return _regeneratorRuntime().wrap(function _callee39$(_context40) {
          while (1) switch (_context40.prev = _context40.next) {
            case 0:
              options = _args40.length > 0 && _args40[0] !== undefined ? _args40[0] : {};
              return _context40.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-deleteImmutabilityPolicy", options, /*#__PURE__*/function () {
                var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee38$(_context39) {
                    while (1) switch (_context39.prev = _context39.next) {
                      case 0:
                        _context39.t0 = _utils.assertResponse;
                        _context39.next = 3;
                        return _this21.blobContext.deleteImmutabilityPolicy({
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context39.t1 = _context39.sent;
                        return _context39.abrupt("return", (0, _context39.t0)(_context39.t1));
                      case 5:
                      case "end":
                        return _context39.stop();
                    }
                  }, _callee38);
                }));
                return function (_x31) {
                  return _ref20.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context40.stop();
          }
        }, _callee39);
      }));
      function deleteImmutabilityPolicy() {
        return _deleteImmutabilityPolicy.apply(this, arguments);
      }
      return deleteImmutabilityPolicy;
    }()
    /**
     * Set immutability policy on the blob.
     *
     * @param options - Optional options to set immutability policy on the blob.
     */
    )
  }, {
    key: "setImmutabilityPolicy",
    value: (function () {
      var _setImmutabilityPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(immutabilityPolicy) {
        var _this22 = this;
        var options,
          _args42 = arguments;
        return _regeneratorRuntime().wrap(function _callee41$(_context42) {
          while (1) switch (_context42.prev = _context42.next) {
            case 0:
              options = _args42.length > 1 && _args42[1] !== undefined ? _args42[1] : {};
              return _context42.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setImmutabilityPolicy", options, /*#__PURE__*/function () {
                var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee40$(_context41) {
                    while (1) switch (_context41.prev = _context41.next) {
                      case 0:
                        _context41.t0 = _utils.assertResponse;
                        _context41.next = 3;
                        return _this22.blobContext.setImmutabilityPolicy({
                          immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
                          immutabilityPolicyMode: immutabilityPolicy.policyMode,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context41.t1 = _context41.sent;
                        return _context41.abrupt("return", (0, _context41.t0)(_context41.t1));
                      case 5:
                      case "end":
                        return _context41.stop();
                    }
                  }, _callee40);
                }));
                return function (_x33) {
                  return _ref21.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context42.stop();
          }
        }, _callee41);
      }));
      function setImmutabilityPolicy(_x32) {
        return _setImmutabilityPolicy.apply(this, arguments);
      }
      return setImmutabilityPolicy;
    }()
    /**
     * Set legal hold on the blob.
     *
     * @param options - Optional options to set legal hold on the blob.
     */
    )
  }, {
    key: "setLegalHold",
    value: (function () {
      var _setLegalHold = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(legalHoldEnabled) {
        var _this23 = this;
        var options,
          _args44 = arguments;
        return _regeneratorRuntime().wrap(function _callee43$(_context44) {
          while (1) switch (_context44.prev = _context44.next) {
            case 0:
              options = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : {};
              return _context44.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-setLegalHold", options, /*#__PURE__*/function () {
                var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee42$(_context43) {
                    while (1) switch (_context43.prev = _context43.next) {
                      case 0:
                        _context43.t0 = _utils.assertResponse;
                        _context43.next = 3;
                        return _this23.blobContext.setLegalHold(legalHoldEnabled, {
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context43.t1 = _context43.sent;
                        return _context43.abrupt("return", (0, _context43.t0)(_context43.t1));
                      case 5:
                      case "end":
                        return _context43.stop();
                    }
                  }, _callee42);
                }));
                return function (_x35) {
                  return _ref22.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context44.stop();
          }
        }, _callee43);
      }));
      function setLegalHold(_x34) {
        return _setLegalHold.apply(this, arguments);
      }
      return setLegalHold;
    }()
    /**
     * The Get Account Information operation returns the sku name and account kind
     * for the specified account.
     * The Get Account Information operation is available on service versions beginning
     * with version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
     *
     * @param options - Options to the Service Get Account Info operation.
     * @returns Response data for the Service Get Account Info operation.
     */
    )
  }, {
    key: "getAccountInfo",
    value: (function () {
      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
        var _this24 = this;
        var options,
          _args46 = arguments;
        return _regeneratorRuntime().wrap(function _callee45$(_context46) {
          while (1) switch (_context46.prev = _context46.next) {
            case 0:
              options = _args46.length > 0 && _args46[0] !== undefined ? _args46[0] : {};
              return _context46.abrupt("return", _tracing.tracingClient.withSpan("BlobClient-getAccountInfo", options, /*#__PURE__*/function () {
                var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee44$(_context45) {
                    while (1) switch (_context45.prev = _context45.next) {
                      case 0:
                        _context45.t0 = _utils.assertResponse;
                        _context45.next = 3;
                        return _this24.blobContext.getAccountInfo({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context45.t1 = _context45.sent;
                        return _context45.abrupt("return", (0, _context45.t0)(_context45.t1));
                      case 5:
                      case "end":
                        return _context45.stop();
                    }
                  }, _callee44);
                }));
                return function (_x36) {
                  return _ref23.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context46.stop();
          }
        }, _callee45);
      }));
      function getAccountInfo() {
        return _getAccountInfo.apply(this, arguments);
      }
      return getAccountInfo;
    }())
  }]);
}(_StorageClient2.StorageClient);
/**
 * AppendBlobClient defines a set of operations applicable to append blobs.
 */
var AppendBlobClient = exports.AppendBlobClient = /*#__PURE__*/function (_BlobClient) {
  function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this25;
    _classCallCheck(this, AppendBlobClient);
    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
    var pipeline;
    var url;
    options = options || {};
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreUtil.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      // The second parameter is undefined. Use anonymous credential.
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    _this25 = _callSuper(this, AppendBlobClient, [url, pipeline]);
    _this25.appendBlobContext = _this25.storageClientContext.appendBlob;
    return _this25;
  }
  /**
   * Creates a new AppendBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  _inherits(AppendBlobClient, _BlobClient);
  return _createClass(AppendBlobClient, [{
    key: "withSnapshot",
    value: function withSnapshot(snapshot) {
      return new AppendBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param options - Options to the Append Block Create operation.
     *
     *
     * Example usage:
     *
     * ```js
     * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await appendBlobClient.create();
     * ```
     */
  }, {
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
        var _this26 = this;
        var options,
          _args48 = arguments;
        return _regeneratorRuntime().wrap(function _callee47$(_context48) {
          while (1) switch (_context48.prev = _context48.next) {
            case 0:
              options = _args48.length > 0 && _args48[0] !== undefined ? _args48[0] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context48.abrupt("return", _tracing.tracingClient.withSpan("AppendBlobClient-create", options, /*#__PURE__*/function () {
                var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(updatedOptions) {
                  var _a, _b, _c;
                  return _regeneratorRuntime().wrap(function _callee46$(_context47) {
                    while (1) switch (_context47.prev = _context47.next) {
                      case 0:
                        _context47.t0 = _utils.assertResponse;
                        _context47.next = 3;
                        return _this26.appendBlobContext.create(0, {
                          abortSignal: options.abortSignal,
                          blobHttpHeaders: options.blobHTTPHeaders,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                          immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                          legalHold: options.legalHold,
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context47.t1 = _context47.sent;
                        return _context47.abrupt("return", (0, _context47.t0)(_context47.t1));
                      case 5:
                      case "end":
                        return _context47.stop();
                    }
                  }, _callee46);
                }));
                return function (_x37) {
                  return _ref24.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context48.stop();
          }
        }, _callee47, this);
      }));
      function create() {
        return _create.apply(this, arguments);
      }
      return create;
    }()
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param options -
     */
    )
  }, {
    key: "createIfNotExists",
    value: (function () {
      var _createIfNotExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
        var _this27 = this;
        var options,
          conditions,
          _args50 = arguments;
        return _regeneratorRuntime().wrap(function _callee49$(_context50) {
          while (1) switch (_context50.prev = _context50.next) {
            case 0:
              options = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : {};
              conditions = {
                ifNoneMatch: _constants.ETagAny
              };
              return _context50.abrupt("return", _tracing.tracingClient.withSpan("AppendBlobClient-createIfNotExists", options, /*#__PURE__*/function () {
                var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(updatedOptions) {
                  var _a, _b, res;
                  return _regeneratorRuntime().wrap(function _callee48$(_context49) {
                    while (1) switch (_context49.prev = _context49.next) {
                      case 0:
                        _context49.prev = 0;
                        _context49.t0 = _utils.assertResponse;
                        _context49.next = 4;
                        return _this27.create(Object.assign(Object.assign({}, updatedOptions), {
                          conditions: conditions
                        }));
                      case 4:
                        _context49.t1 = _context49.sent;
                        res = (0, _context49.t0)(_context49.t1);
                        return _context49.abrupt("return", Object.assign(Object.assign({
                          succeeded: true
                        }, res), {
                          _response: res._response
                        }));
                      case 9:
                        _context49.prev = 9;
                        _context49.t2 = _context49["catch"](0);
                        if (!(((_a = _context49.t2.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists")) {
                          _context49.next = 13;
                          break;
                        }
                        return _context49.abrupt("return", Object.assign(Object.assign({
                          succeeded: false
                        }, (_b = _context49.t2.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                          _response: _context49.t2.response
                        }));
                      case 13:
                        throw _context49.t2;
                      case 14:
                      case "end":
                        return _context49.stop();
                    }
                  }, _callee48, null, [[0, 9]]);
                }));
                return function (_x38) {
                  return _ref25.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context50.stop();
          }
        }, _callee49);
      }));
      function createIfNotExists() {
        return _createIfNotExists.apply(this, arguments);
      }
      return createIfNotExists;
    }()
    /**
     * Seals the append blob, making it read only.
     *
     * @param options -
     */
    )
  }, {
    key: "seal",
    value: (function () {
      var _seal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
        var _this28 = this;
        var options,
          _args52 = arguments;
        return _regeneratorRuntime().wrap(function _callee51$(_context52) {
          while (1) switch (_context52.prev = _context52.next) {
            case 0:
              options = _args52.length > 0 && _args52[0] !== undefined ? _args52[0] : {};
              options.conditions = options.conditions || {};
              return _context52.abrupt("return", _tracing.tracingClient.withSpan("AppendBlobClient-seal", options, /*#__PURE__*/function () {
                var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee50$(_context51) {
                    while (1) switch (_context51.prev = _context51.next) {
                      case 0:
                        _context51.t0 = _utils.assertResponse;
                        _context51.next = 3;
                        return _this28.appendBlobContext.seal({
                          abortSignal: options.abortSignal,
                          appendPositionAccessConditions: options.conditions,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context51.t1 = _context51.sent;
                        return _context51.abrupt("return", (0, _context51.t0)(_context51.t1));
                      case 5:
                      case "end":
                        return _context51.stop();
                    }
                  }, _callee50);
                }));
                return function (_x39) {
                  return _ref26.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context52.stop();
          }
        }, _callee51);
      }));
      function seal() {
        return _seal.apply(this, arguments);
      }
      return seal;
    }()
    /**
     * Commits a new block of data to the end of the existing append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/append-block
     *
     * @param body - Data to be appended.
     * @param contentLength - Length of the body in bytes.
     * @param options - Options to the Append Block operation.
     *
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello World!";
     *
     * // Create a new append blob and append data to the blob.
     * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await newAppendBlobClient.create();
     * await newAppendBlobClient.appendBlock(content, content.length);
     *
     * // Append data to an existing append blob.
     * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await existingAppendBlobClient.appendBlock(content, content.length);
     * ```
     */
    )
  }, {
    key: "appendBlock",
    value: (function () {
      var _appendBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(body, contentLength) {
        var _this29 = this;
        var options,
          _args54 = arguments;
        return _regeneratorRuntime().wrap(function _callee53$(_context54) {
          while (1) switch (_context54.prev = _context54.next) {
            case 0:
              options = _args54.length > 2 && _args54[2] !== undefined ? _args54[2] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context54.abrupt("return", _tracing.tracingClient.withSpan("AppendBlobClient-appendBlock", options, /*#__PURE__*/function () {
                var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee52$(_context53) {
                    while (1) switch (_context53.prev = _context53.next) {
                      case 0:
                        _context53.t0 = _utils.assertResponse;
                        _context53.next = 3;
                        return _this29.appendBlobContext.appendBlock(contentLength, body, {
                          abortSignal: options.abortSignal,
                          appendPositionAccessConditions: options.conditions,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          requestOptions: {
                            onUploadProgress: options.onProgress
                          },
                          transactionalContentMD5: options.transactionalContentMD5,
                          transactionalContentCrc64: options.transactionalContentCrc64,
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context53.t1 = _context53.sent;
                        return _context53.abrupt("return", (0, _context53.t0)(_context53.t1));
                      case 5:
                      case "end":
                        return _context53.stop();
                    }
                  }, _callee52);
                }));
                return function (_x42) {
                  return _ref27.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context54.stop();
          }
        }, _callee53, this);
      }));
      function appendBlock(_x40, _x41) {
        return _appendBlock.apply(this, arguments);
      }
      return appendBlock;
    }()
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob
     * where the contents are read from a source url.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
     *
     * @param sourceURL -
     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
     *                 must either be public or must be authenticated via a shared access signature. If the source blob is
     *                 public, no authentication is required to perform the operation.
     * @param sourceOffset - Offset in source to be appended
     * @param count - Number of bytes to be appended as a block
     * @param options -
     */
    )
  }, {
    key: "appendBlockFromURL",
    value: (function () {
      var _appendBlockFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(sourceURL, sourceOffset, count) {
        var _this30 = this;
        var options,
          _args56 = arguments;
        return _regeneratorRuntime().wrap(function _callee55$(_context56) {
          while (1) switch (_context56.prev = _context56.next) {
            case 0:
              options = _args56.length > 3 && _args56[3] !== undefined ? _args56[3] : {};
              options.conditions = options.conditions || {};
              options.sourceConditions = options.sourceConditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context56.abrupt("return", _tracing.tracingClient.withSpan("AppendBlobClient-appendBlockFromURL", options, /*#__PURE__*/function () {
                var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(updatedOptions) {
                  var _a, _b, _c, _d, _e;
                  return _regeneratorRuntime().wrap(function _callee54$(_context55) {
                    while (1) switch (_context55.prev = _context55.next) {
                      case 0:
                        _context55.t0 = _utils.assertResponse;
                        _context55.next = 3;
                        return _this30.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {
                          abortSignal: options.abortSignal,
                          sourceRange: (0, _Range.rangeToString)({
                            offset: sourceOffset,
                            count: count
                          }),
                          sourceContentMD5: options.sourceContentMD5,
                          sourceContentCrc64: options.sourceContentCrc64,
                          leaseAccessConditions: options.conditions,
                          appendPositionAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          sourceModifiedAccessConditions: {
                            sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,
                            sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,
                            sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,
                            sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
                          },
                          copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context55.t1 = _context55.sent;
                        return _context55.abrupt("return", (0, _context55.t0)(_context55.t1));
                      case 5:
                      case "end":
                        return _context55.stop();
                    }
                  }, _callee54);
                }));
                return function (_x46) {
                  return _ref28.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context56.stop();
          }
        }, _callee55, this);
      }));
      function appendBlockFromURL(_x43, _x44, _x45) {
        return _appendBlockFromURL.apply(this, arguments);
      }
      return appendBlockFromURL;
    }())
  }]);
}(BlobClient);
/**
 * BlockBlobClient defines a set of operations applicable to block blobs.
 */
var BlockBlobClient = exports.BlockBlobClient = /*#__PURE__*/function (_BlobClient2) {
  function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this31;
    _classCallCheck(this, BlockBlobClient);
    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
    var pipeline;
    var url;
    options = options || {};
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreUtil.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    _this31 = _callSuper(this, BlockBlobClient, [url, pipeline]);
    _this31.blockBlobContext = _this31.storageClientContext.blockBlob;
    _this31._blobContext = _this31.storageClientContext.blob;
    return _this31;
  }
  /**
   * Creates a new BlockBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a URL to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  _inherits(BlockBlobClient, _BlobClient2);
  return _createClass(BlockBlobClient, [{
    key: "withSnapshot",
    value: function withSnapshot(snapshot) {
      return new BlockBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Quick query for a JSON or CSV formatted blob.
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Query and convert a blob to a string
     * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
     * console.log("Query blob content:", downloaded);
     *
     * async function streamToBuffer(readableStream) {
     *   return new Promise((resolve, reject) => {
     *     const chunks = [];
     *     readableStream.on("data", (data) => {
     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
     *     });
     *     readableStream.on("end", () => {
     *       resolve(Buffer.concat(chunks));
     *     });
     *     readableStream.on("error", reject);
     *   });
     * }
     * ```
     *
     * @param query -
     * @param options -
     */
  }, {
    key: "query",
    value: (function () {
      var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(_query) {
        var _this32 = this;
        var options,
          _args58 = arguments;
        return _regeneratorRuntime().wrap(function _callee57$(_context58) {
          while (1) switch (_context58.prev = _context58.next) {
            case 0:
              options = _args58.length > 1 && _args58[1] !== undefined ? _args58[1] : {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              if (_coreUtil.isNode) {
                _context58.next = 4;
                break;
              }
              throw new Error("This operation currently is only supported in Node.js.");
            case 4:
              return _context58.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-query", options, /*#__PURE__*/function () {
                var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(updatedOptions) {
                  var _a, response;
                  return _regeneratorRuntime().wrap(function _callee56$(_context57) {
                    while (1) switch (_context57.prev = _context57.next) {
                      case 0:
                        _context57.t0 = _utils.assertResponse;
                        _context57.next = 3;
                        return _this32._blobContext.query({
                          abortSignal: options.abortSignal,
                          queryRequest: {
                            queryType: "SQL",
                            expression: _query,
                            inputSerialization: (0, _utils.toQuerySerialization)(options.inputTextConfiguration),
                            outputSerialization: (0, _utils.toQuerySerialization)(options.outputTextConfiguration)
                          },
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context57.t1 = _context57.sent;
                        response = (0, _context57.t0)(_context57.t1);
                        return _context57.abrupt("return", new _BlobQueryResponse.BlobQueryResponse(response, {
                          abortSignal: options.abortSignal,
                          onProgress: options.onProgress,
                          onError: options.onError
                        }));
                      case 6:
                      case "end":
                        return _context57.stop();
                    }
                  }, _callee56);
                }));
                return function (_x48) {
                  return _ref29.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context58.stop();
          }
        }, _callee57, this);
      }));
      function query(_x47) {
        return _query2.apply(this, arguments);
      }
      return query;
    }()
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link stageBlock} and {@link commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link uploadFile},
     * {@link uploadStream} or {@link uploadBrowserData} for better performance
     * with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param options - Options to the Block Blob Upload operation.
     * @returns Response data for the Block Blob Upload operation.
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */
    )
  }, {
    key: "upload",
    value: (function () {
      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(body, contentLength) {
        var _this33 = this;
        var options,
          _args60 = arguments;
        return _regeneratorRuntime().wrap(function _callee59$(_context60) {
          while (1) switch (_context60.prev = _context60.next) {
            case 0:
              options = _args60.length > 2 && _args60[2] !== undefined ? _args60[2] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context60.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-upload", options, /*#__PURE__*/function () {
                var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(updatedOptions) {
                  var _a, _b, _c;
                  return _regeneratorRuntime().wrap(function _callee58$(_context59) {
                    while (1) switch (_context59.prev = _context59.next) {
                      case 0:
                        _context59.t0 = _utils.assertResponse;
                        _context59.next = 3;
                        return _this33.blockBlobContext.upload(contentLength, body, {
                          abortSignal: options.abortSignal,
                          blobHttpHeaders: options.blobHTTPHeaders,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          requestOptions: {
                            onUploadProgress: options.onProgress
                          },
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                          immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                          legalHold: options.legalHold,
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context59.t1 = _context59.sent;
                        return _context59.abrupt("return", (0, _context59.t0)(_context59.t1));
                      case 5:
                      case "end":
                        return _context59.stop();
                    }
                  }, _callee58);
                }));
                return function (_x51) {
                  return _ref30.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context60.stop();
          }
        }, _callee59, this);
      }));
      function upload(_x49, _x50) {
        return _upload.apply(this, arguments);
      }
      return upload;
    }()
    /**
     * Creates a new Block Blob where the contents of the blob are read from a given URL.
     * This API is supported beginning with the 2020-04-08 version. Partial updates
     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
     * the content of the new blob.  To perform partial updates to a block blob’s contents using a
     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
     *
     * @param sourceURL - Specifies the URL of the blob. The value
     *                           may be a URL of up to 2 KB in length that specifies a blob.
     *                           The value should be URL-encoded as it would appear
     *                           in a request URI. The source blob must either be public
     *                           or must be authenticated via a shared access signature.
     *                           If the source blob is public, no authentication is required
     *                           to perform the operation. Here are some examples of source object URLs:
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param options - Optional parameters.
     */
    )
  }, {
    key: "syncUploadFromURL",
    value: (function () {
      var _syncUploadFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(sourceURL) {
        var _this34 = this;
        var options,
          _args62 = arguments;
        return _regeneratorRuntime().wrap(function _callee61$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              options = _args62.length > 1 && _args62[1] !== undefined ? _args62[1] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context62.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-syncUploadFromURL", options, /*#__PURE__*/function () {
                var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(updatedOptions) {
                  var _a, _b, _c, _d, _e, _f;
                  return _regeneratorRuntime().wrap(function _callee60$(_context61) {
                    while (1) switch (_context61.prev = _context61.next) {
                      case 0:
                        _context61.t0 = _utils.assertResponse;
                        _context61.next = 3;
                        return _this34.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), {
                          blobHttpHeaders: options.blobHTTPHeaders,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          sourceModifiedAccessConditions: {
                            sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,
                            sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,
                            sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,
                            sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,
                            sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                          },
                          cpkInfo: options.customerProvidedKey,
                          copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          copySourceTags: options.copySourceTags,
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        _context61.t1 = _context61.sent;
                        return _context61.abrupt("return", (0, _context61.t0)(_context61.t1));
                      case 5:
                      case "end":
                        return _context61.stop();
                    }
                  }, _callee60);
                }));
                return function (_x53) {
                  return _ref31.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context62.stop();
          }
        }, _callee61, this);
      }));
      function syncUploadFromURL(_x52) {
        return _syncUploadFromURL.apply(this, arguments);
      }
      return syncUploadFromURL;
    }()
    /**
     * Uploads the specified block to the block blob's "staging area" to be later
     * committed by a call to commitBlockList.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block
     *
     * @param blockId - A 64-byte value that is base64-encoded
     * @param body - Data to upload to the staging area.
     * @param contentLength - Number of bytes to upload.
     * @param options - Options to the Block Blob Stage Block operation.
     * @returns Response data for the Block Blob Stage Block operation.
     */
    )
  }, {
    key: "stageBlock",
    value: (function () {
      var _stageBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(blockId, body, contentLength) {
        var _this35 = this;
        var options,
          _args64 = arguments;
        return _regeneratorRuntime().wrap(function _callee63$(_context64) {
          while (1) switch (_context64.prev = _context64.next) {
            case 0:
              options = _args64.length > 3 && _args64[3] !== undefined ? _args64[3] : {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context64.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-stageBlock", options, /*#__PURE__*/function () {
                var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee62$(_context63) {
                    while (1) switch (_context63.prev = _context63.next) {
                      case 0:
                        _context63.t0 = _utils.assertResponse;
                        _context63.next = 3;
                        return _this35.blockBlobContext.stageBlock(blockId, contentLength, body, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          requestOptions: {
                            onUploadProgress: options.onProgress
                          },
                          transactionalContentMD5: options.transactionalContentMD5,
                          transactionalContentCrc64: options.transactionalContentCrc64,
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context63.t1 = _context63.sent;
                        return _context63.abrupt("return", (0, _context63.t0)(_context63.t1));
                      case 5:
                      case "end":
                        return _context63.stop();
                    }
                  }, _callee62);
                }));
                return function (_x57) {
                  return _ref32.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context64.stop();
          }
        }, _callee63, this);
      }));
      function stageBlock(_x54, _x55, _x56) {
        return _stageBlock.apply(this, arguments);
      }
      return stageBlock;
    }()
    /**
     * The Stage Block From URL operation creates a new block to be committed as part
     * of a blob where the contents are read from a URL.
     * This API is available starting in version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
     *
     * @param blockId - A 64-byte value that is base64-encoded
     * @param sourceURL - Specifies the URL of the blob. The value
     *                           may be a URL of up to 2 KB in length that specifies a blob.
     *                           The value should be URL-encoded as it would appear
     *                           in a request URI. The source blob must either be public
     *                           or must be authenticated via a shared access signature.
     *                           If the source blob is public, no authentication is required
     *                           to perform the operation. Here are some examples of source object URLs:
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param offset - From which position of the blob to download, greater than or equal to 0
     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
     * @param options - Options to the Block Blob Stage Block From URL operation.
     * @returns Response data for the Block Blob Stage Block From URL operation.
     */
    )
  }, {
    key: "stageBlockFromURL",
    value: (function () {
      var _stageBlockFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(blockId, sourceURL) {
        var _this36 = this;
        var offset,
          count,
          options,
          _args66 = arguments;
        return _regeneratorRuntime().wrap(function _callee65$(_context66) {
          while (1) switch (_context66.prev = _context66.next) {
            case 0:
              offset = _args66.length > 2 && _args66[2] !== undefined ? _args66[2] : 0;
              count = _args66.length > 3 ? _args66[3] : undefined;
              options = _args66.length > 4 && _args66[4] !== undefined ? _args66[4] : {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context66.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-stageBlockFromURL", options, /*#__PURE__*/function () {
                var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee64$(_context65) {
                    while (1) switch (_context65.prev = _context65.next) {
                      case 0:
                        _context65.t0 = _utils.assertResponse;
                        _context65.next = 3;
                        return _this36.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          sourceContentMD5: options.sourceContentMD5,
                          sourceContentCrc64: options.sourceContentCrc64,
                          sourceRange: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context65.t1 = _context65.sent;
                        return _context65.abrupt("return", (0, _context65.t0)(_context65.t1));
                      case 5:
                      case "end":
                        return _context65.stop();
                    }
                  }, _callee64);
                }));
                return function (_x60) {
                  return _ref33.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context66.stop();
          }
        }, _callee65, this);
      }));
      function stageBlockFromURL(_x58, _x59) {
        return _stageBlockFromURL.apply(this, arguments);
      }
      return stageBlockFromURL;
    }()
    /**
     * Writes a blob by specifying the list of block IDs that make up the blob.
     * In order to be written as part of a blob, a block must have been successfully written
     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
     * update a blob by uploading only those blocks that have changed, then committing the new and existing
     * blocks together. Any blocks not specified in the block list and permanently deleted.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
     *
     * @param blocks -  Array of 64-byte value that is base64-encoded
     * @param options - Options to the Block Blob Commit Block List operation.
     * @returns Response data for the Block Blob Commit Block List operation.
     */
    )
  }, {
    key: "commitBlockList",
    value: (function () {
      var _commitBlockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(blocks) {
        var _this37 = this;
        var options,
          _args68 = arguments;
        return _regeneratorRuntime().wrap(function _callee67$(_context68) {
          while (1) switch (_context68.prev = _context68.next) {
            case 0:
              options = _args68.length > 1 && _args68[1] !== undefined ? _args68[1] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context68.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-commitBlockList", options, /*#__PURE__*/function () {
                var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66(updatedOptions) {
                  var _a, _b, _c;
                  return _regeneratorRuntime().wrap(function _callee66$(_context67) {
                    while (1) switch (_context67.prev = _context67.next) {
                      case 0:
                        _context67.t0 = _utils.assertResponse;
                        _context67.next = 3;
                        return _this37.blockBlobContext.commitBlockList({
                          latest: blocks
                        }, {
                          abortSignal: options.abortSignal,
                          blobHttpHeaders: options.blobHTTPHeaders,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                          immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                          legalHold: options.legalHold,
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context67.t1 = _context67.sent;
                        return _context67.abrupt("return", (0, _context67.t0)(_context67.t1));
                      case 5:
                      case "end":
                        return _context67.stop();
                    }
                  }, _callee66);
                }));
                return function (_x62) {
                  return _ref34.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context68.stop();
          }
        }, _callee67, this);
      }));
      function commitBlockList(_x61) {
        return _commitBlockList.apply(this, arguments);
      }
      return commitBlockList;
    }()
    /**
     * Returns the list of blocks that have been uploaded as part of a block blob
     * using the specified block list filter.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
     *
     * @param listType - Specifies whether to return the list of committed blocks,
     *                                        the list of uncommitted blocks, or both lists together.
     * @param options - Options to the Block Blob Get Block List operation.
     * @returns Response data for the Block Blob Get Block List operation.
     */
    )
  }, {
    key: "getBlockList",
    value: (function () {
      var _getBlockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(listType) {
        var _this38 = this;
        var options,
          _args70 = arguments;
        return _regeneratorRuntime().wrap(function _callee69$(_context70) {
          while (1) switch (_context70.prev = _context70.next) {
            case 0:
              options = _args70.length > 1 && _args70[1] !== undefined ? _args70[1] : {};
              return _context70.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-getBlockList", options, /*#__PURE__*/function () {
                var _ref35 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(updatedOptions) {
                  var _a, res;
                  return _regeneratorRuntime().wrap(function _callee68$(_context69) {
                    while (1) switch (_context69.prev = _context69.next) {
                      case 0:
                        _context69.t0 = _utils.assertResponse;
                        _context69.next = 3;
                        return _this38.blockBlobContext.getBlockList(listType, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context69.t1 = _context69.sent;
                        res = (0, _context69.t0)(_context69.t1);
                        if (!res.committedBlocks) {
                          res.committedBlocks = [];
                        }
                        if (!res.uncommittedBlocks) {
                          res.uncommittedBlocks = [];
                        }
                        return _context69.abrupt("return", res);
                      case 8:
                      case "end":
                        return _context69.stop();
                    }
                  }, _callee68);
                }));
                return function (_x64) {
                  return _ref35.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context70.stop();
          }
        }, _callee69);
      }));
      function getBlockList(_x63) {
        return _getBlockList.apply(this, arguments);
      }
      return getBlockList;
    }() // High level functions
    /**
     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
     *
     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
     * to commit the block list.
     *
     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
     * `blobContentType`, enabling the browser to provide
     * functionality based on file type.
     *
     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
     * @param options -
     */
    )
  }, {
    key: "uploadData",
    value: function () {
      var _uploadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(data) {
        var _this39 = this;
        var options,
          _args72 = arguments;
        return _regeneratorRuntime().wrap(function _callee71$(_context72) {
          while (1) switch (_context72.prev = _context72.next) {
            case 0:
              options = _args72.length > 1 && _args72[1] !== undefined ? _args72[1] : {};
              return _context72.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-uploadData", options, /*#__PURE__*/function () {
                var _ref36 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(updatedOptions) {
                  var buffer, browserBlob;
                  return _regeneratorRuntime().wrap(function _callee70$(_context71) {
                    while (1) switch (_context71.prev = _context71.next) {
                      case 0:
                        if (!_coreUtil.isNode) {
                          _context71.next = 5;
                          break;
                        }
                        if (data instanceof Buffer) {
                          buffer = data;
                        } else if (data instanceof ArrayBuffer) {
                          buffer = Buffer.from(data);
                        } else {
                          data = data;
                          buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
                        }
                        return _context71.abrupt("return", _this39.uploadSeekableInternal(function (offset, size) {
                          return buffer.slice(offset, offset + size);
                        }, buffer.byteLength, updatedOptions));
                      case 5:
                        browserBlob = new Blob([data]);
                        return _context71.abrupt("return", _this39.uploadSeekableInternal(function (offset, size) {
                          return browserBlob.slice(offset, offset + size);
                        }, browserBlob.size, updatedOptions));
                      case 7:
                      case "end":
                        return _context71.stop();
                    }
                  }, _callee70);
                }));
                return function (_x66) {
                  return _ref36.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context72.stop();
          }
        }, _callee71);
      }));
      function uploadData(_x65) {
        return _uploadData.apply(this, arguments);
      }
      return uploadData;
    }()
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
     *
     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
     * {@link commitBlockList} to commit the block list.
     *
     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
     * `blobContentType`, enabling the browser to provide
     * functionality based on file type.
     *
     * @deprecated Use {@link uploadData} instead.
     *
     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
     * @param options - Options to upload browser data.
     * @returns Response data for the Blob Upload operation.
     */
  }, {
    key: "uploadBrowserData",
    value: (function () {
      var _uploadBrowserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(browserData) {
        var _this40 = this;
        var options,
          _args74 = arguments;
        return _regeneratorRuntime().wrap(function _callee73$(_context74) {
          while (1) switch (_context74.prev = _context74.next) {
            case 0:
              options = _args74.length > 1 && _args74[1] !== undefined ? _args74[1] : {};
              return _context74.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-uploadBrowserData", options, /*#__PURE__*/function () {
                var _ref37 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(updatedOptions) {
                  var browserBlob;
                  return _regeneratorRuntime().wrap(function _callee72$(_context73) {
                    while (1) switch (_context73.prev = _context73.next) {
                      case 0:
                        browserBlob = new Blob([browserData]);
                        return _context73.abrupt("return", _this40.uploadSeekableInternal(function (offset, size) {
                          return browserBlob.slice(offset, offset + size);
                        }, browserBlob.size, updatedOptions));
                      case 2:
                      case "end":
                        return _context73.stop();
                    }
                  }, _callee72);
                }));
                return function (_x68) {
                  return _ref37.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context74.stop();
          }
        }, _callee73);
      }));
      function uploadBrowserData(_x67) {
        return _uploadBrowserData.apply(this, arguments);
      }
      return uploadBrowserData;
    }()
    /**
     *
     * Uploads data to block blob. Requires a bodyFactory as the data source,
     * which need to return a {@link HttpRequestBody} object with the offset and size provided.
     *
     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
     * to commit the block list.
     *
     * @param bodyFactory -
     * @param size - size of the data to upload.
     * @param options - Options to Upload to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */
    )
  }, {
    key: "uploadSeekableInternal",
    value: (function () {
      var _uploadSeekableInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76(bodyFactory, size) {
        var _this41 = this;
        var options,
          _a,
          _b,
          blockSize,
          maxSingleShotSize,
          _args78 = arguments;
        return _regeneratorRuntime().wrap(function _callee76$(_context78) {
          while (1) switch (_context78.prev = _context78.next) {
            case 0:
              options = _args78.length > 2 && _args78[2] !== undefined ? _args78[2] : {};
              blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;
              if (!(blockSize < 0 || blockSize > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES)) {
                _context78.next = 4;
                break;
              }
              throw new RangeError("blockSize option must be >= 0 and <= ".concat(_constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES));
            case 4:
              maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
              if (!(maxSingleShotSize < 0 || maxSingleShotSize > _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES)) {
                _context78.next = 7;
                break;
              }
              throw new RangeError("maxSingleShotSize option must be >= 0 and <= ".concat(_constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES));
            case 7:
              if (!(blockSize === 0)) {
                _context78.next = 11;
                break;
              }
              if (!(size > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _constants.BLOCK_BLOB_MAX_BLOCKS)) {
                _context78.next = 10;
                break;
              }
              throw new RangeError("".concat(size, " is too larger to upload to a block blob."));
            case 10:
              if (size > maxSingleShotSize) {
                blockSize = Math.ceil(size / _constants.BLOCK_BLOB_MAX_BLOCKS);
                if (blockSize < _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
                  blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
                }
              }
            case 11:
              if (!options.blobHTTPHeaders) {
                options.blobHTTPHeaders = {};
              }
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context78.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-uploadSeekableInternal", options, /*#__PURE__*/function () {
                var _ref38 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(updatedOptions) {
                  var numBlocks, blockList, blockIDPrefix, transferProgress, batch, _loop2, i;
                  return _regeneratorRuntime().wrap(function _callee75$(_context77) {
                    while (1) switch (_context77.prev = _context77.next) {
                      case 0:
                        if (!(size <= maxSingleShotSize)) {
                          _context77.next = 6;
                          break;
                        }
                        _context77.t0 = _utils.assertResponse;
                        _context77.next = 4;
                        return _this41.upload(bodyFactory(0, size), size, updatedOptions);
                      case 4:
                        _context77.t1 = _context77.sent;
                        return _context77.abrupt("return", (0, _context77.t0)(_context77.t1));
                      case 6:
                        numBlocks = Math.floor((size - 1) / blockSize) + 1;
                        if (!(numBlocks > _constants.BLOCK_BLOB_MAX_BLOCKS)) {
                          _context77.next = 9;
                          break;
                        }
                        throw new RangeError("The buffer's size is too big or the BlockSize is too small;" + "the number of blocks must be <= ".concat(_constants.BLOCK_BLOB_MAX_BLOCKS));
                      case 9:
                        blockList = [];
                        blockIDPrefix = (0, _coreUtil.randomUUID)();
                        transferProgress = 0;
                        batch = new _Batch.Batch(options.concurrency);
                        _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2(i) {
                          return _regeneratorRuntime().wrap(function _loop2$(_context76) {
                            while (1) switch (_context76.prev = _context76.next) {
                              case 0:
                                batch.addOperation( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
                                  var blockID, start, end, contentLength;
                                  return _regeneratorRuntime().wrap(function _callee74$(_context75) {
                                    while (1) switch (_context75.prev = _context75.next) {
                                      case 0:
                                        blockID = (0, _utils.generateBlockID)(blockIDPrefix, i);
                                        start = blockSize * i;
                                        end = i === numBlocks - 1 ? size : start + blockSize;
                                        contentLength = end - start;
                                        blockList.push(blockID);
                                        _context75.next = 7;
                                        return _this41.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {
                                          abortSignal: options.abortSignal,
                                          conditions: options.conditions,
                                          encryptionScope: options.encryptionScope,
                                          tracingOptions: updatedOptions.tracingOptions
                                        });
                                      case 7:
                                        // Update progress after block is successfully uploaded to server, in case of block trying
                                        // TODO: Hook with convenience layer progress event in finer level
                                        transferProgress += contentLength;
                                        if (options.onProgress) {
                                          options.onProgress({
                                            loadedBytes: transferProgress
                                          });
                                        }
                                      case 9:
                                      case "end":
                                        return _context75.stop();
                                    }
                                  }, _callee74);
                                })));
                              case 1:
                              case "end":
                                return _context76.stop();
                            }
                          }, _loop2);
                        });
                        i = 0;
                      case 15:
                        if (!(i < numBlocks)) {
                          _context77.next = 20;
                          break;
                        }
                        return _context77.delegateYield(_loop2(i), "t2", 17);
                      case 17:
                        i++;
                        _context77.next = 15;
                        break;
                      case 20:
                        _context77.next = 22;
                        return batch.do();
                      case 22:
                        return _context77.abrupt("return", _this41.commitBlockList(blockList, updatedOptions));
                      case 23:
                      case "end":
                        return _context77.stop();
                    }
                  }, _callee75);
                }));
                return function (_x71) {
                  return _ref38.apply(this, arguments);
                };
              }()));
            case 14:
            case "end":
              return _context78.stop();
          }
        }, _callee76);
      }));
      function uploadSeekableInternal(_x69, _x70) {
        return _uploadSeekableInternal.apply(this, arguments);
      }
      return uploadSeekableInternal;
    }()
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a local file in blocks to a block blob.
     *
     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
     * to commit the block list.
     *
     * @param filePath - Full path of local file
     * @param options - Options to Upload to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */
    )
  }, {
    key: "uploadFile",
    value: (function () {
      var _uploadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(filePath) {
        var _this42 = this;
        var options,
          _args80 = arguments;
        return _regeneratorRuntime().wrap(function _callee78$(_context80) {
          while (1) switch (_context80.prev = _context80.next) {
            case 0:
              options = _args80.length > 1 && _args80[1] !== undefined ? _args80[1] : {};
              return _context80.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-uploadFile", options, /*#__PURE__*/function () {
                var _ref40 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(updatedOptions) {
                  var size;
                  return _regeneratorRuntime().wrap(function _callee77$(_context79) {
                    while (1) switch (_context79.prev = _context79.next) {
                      case 0:
                        _context79.next = 2;
                        return (0, _utils2.fsStat)(filePath);
                      case 2:
                        size = _context79.sent.size;
                        return _context79.abrupt("return", _this42.uploadSeekableInternal(function (offset, count) {
                          return function () {
                            return (0, _utils2.fsCreateReadStream)(filePath, {
                              autoClose: true,
                              end: count ? offset + count - 1 : Infinity,
                              start: offset
                            });
                          };
                        }, size, Object.assign(Object.assign({}, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        })));
                      case 4:
                      case "end":
                        return _context79.stop();
                    }
                  }, _callee77);
                }));
                return function (_x73) {
                  return _ref40.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context80.stop();
          }
        }, _callee78);
      }));
      function uploadFile(_x72) {
        return _uploadFile.apply(this, arguments);
      }
      return uploadFile;
    }()
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a Node.js Readable stream into block blob.
     *
     * PERFORMANCE IMPROVEMENT TIPS:
     * * Input stream highWaterMark is better to set a same value with bufferSize
     *    parameter, which will avoid Buffer.concat() operations.
     *
     * @param stream - Node.js Readable stream
     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
     *                                 positive correlation with max uploading concurrency. Default value is 5
     * @param options - Options to Upload Stream to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */
    )
  }, {
    key: "uploadStream",
    value: (function () {
      var _uploadStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81(stream) {
        var _this43 = this;
        var bufferSize,
          maxConcurrency,
          options,
          _args83 = arguments;
        return _regeneratorRuntime().wrap(function _callee81$(_context83) {
          while (1) switch (_context83.prev = _context83.next) {
            case 0:
              bufferSize = _args83.length > 1 && _args83[1] !== undefined ? _args83[1] : _constants.DEFAULT_BLOCK_BUFFER_SIZE_BYTES;
              maxConcurrency = _args83.length > 2 && _args83[2] !== undefined ? _args83[2] : 5;
              options = _args83.length > 3 && _args83[3] !== undefined ? _args83[3] : {};
              if (!options.blobHTTPHeaders) {
                options.blobHTTPHeaders = {};
              }
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context83.abrupt("return", _tracing.tracingClient.withSpan("BlockBlobClient-uploadStream", options, /*#__PURE__*/function () {
                var _ref41 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(updatedOptions) {
                  var blockNum, blockIDPrefix, transferProgress, blockList, scheduler;
                  return _regeneratorRuntime().wrap(function _callee80$(_context82) {
                    while (1) switch (_context82.prev = _context82.next) {
                      case 0:
                        blockNum = 0;
                        blockIDPrefix = (0, _coreUtil.randomUUID)();
                        transferProgress = 0;
                        blockList = [];
                        scheduler = new _src.BufferScheduler(stream, bufferSize, maxConcurrency, /*#__PURE__*/function () {
                          var _ref42 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(body, length) {
                            var blockID;
                            return _regeneratorRuntime().wrap(function _callee79$(_context81) {
                              while (1) switch (_context81.prev = _context81.next) {
                                case 0:
                                  blockID = (0, _utils.generateBlockID)(blockIDPrefix, blockNum);
                                  blockList.push(blockID);
                                  blockNum++;
                                  _context81.next = 5;
                                  return _this43.stageBlock(blockID, body, length, {
                                    conditions: options.conditions,
                                    encryptionScope: options.encryptionScope,
                                    tracingOptions: updatedOptions.tracingOptions
                                  });
                                case 5:
                                  // Update progress after block is successfully uploaded to server, in case of block trying
                                  transferProgress += length;
                                  if (options.onProgress) {
                                    options.onProgress({
                                      loadedBytes: transferProgress
                                    });
                                  }
                                case 7:
                                case "end":
                                  return _context81.stop();
                              }
                            }, _callee79);
                          }));
                          return function (_x76, _x77) {
                            return _ref42.apply(this, arguments);
                          };
                        }(),
                        // concurrency should set a smaller value than maxConcurrency, which is helpful to
                        // reduce the possibility when a outgoing handler waits for stream data, in
                        // this situation, outgoing handlers are blocked.
                        // Outgoing queue shouldn't be empty.
                        Math.ceil(maxConcurrency / 4 * 3));
                        _context82.next = 7;
                        return scheduler.do();
                      case 7:
                        _context82.t0 = _utils.assertResponse;
                        _context82.next = 10;
                        return _this43.commitBlockList(blockList, Object.assign(Object.assign({}, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 10:
                        _context82.t1 = _context82.sent;
                        return _context82.abrupt("return", (0, _context82.t0)(_context82.t1));
                      case 12:
                      case "end":
                        return _context82.stop();
                    }
                  }, _callee80);
                }));
                return function (_x75) {
                  return _ref41.apply(this, arguments);
                };
              }()));
            case 6:
            case "end":
              return _context83.stop();
          }
        }, _callee81);
      }));
      function uploadStream(_x74) {
        return _uploadStream.apply(this, arguments);
      }
      return uploadStream;
    }())
  }]);
}(BlobClient);
/**
 * PageBlobClient defines a set of operations applicable to page blobs.
 */
var PageBlobClient = exports.PageBlobClient = /*#__PURE__*/function (_BlobClient3) {
  function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this44;
    _classCallCheck(this, PageBlobClient);
    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
    var pipeline;
    var url;
    options = options || {};
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreUtil.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    _this44 = _callSuper(this, PageBlobClient, [url, pipeline]);
    _this44.pageBlobContext = _this44.storageClientContext.pageBlob;
    return _this44;
  }
  /**
   * Creates a new PageBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  _inherits(PageBlobClient, _BlobClient3);
  return _createClass(PageBlobClient, [{
    key: "withSnapshot",
    value: function withSnapshot(snapshot) {
      return new PageBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param size - size of the page blob.
     * @param options - Options to the Page Blob Create operation.
     * @returns Response data for the Page Blob Create operation.
     */
  }, {
    key: "create",
    value: (function () {
      var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(size) {
        var _this45 = this;
        var options,
          _args85 = arguments;
        return _regeneratorRuntime().wrap(function _callee83$(_context85) {
          while (1) switch (_context85.prev = _context85.next) {
            case 0:
              options = _args85.length > 1 && _args85[1] !== undefined ? _args85[1] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context85.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-create", options, /*#__PURE__*/function () {
                var _ref43 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82(updatedOptions) {
                  var _a, _b, _c;
                  return _regeneratorRuntime().wrap(function _callee82$(_context84) {
                    while (1) switch (_context84.prev = _context84.next) {
                      case 0:
                        _context84.t0 = _utils.assertResponse;
                        _context84.next = 3;
                        return _this45.pageBlobContext.create(0, size, {
                          abortSignal: options.abortSignal,
                          blobHttpHeaders: options.blobHTTPHeaders,
                          blobSequenceNumber: options.blobSequenceNumber,
                          leaseAccessConditions: options.conditions,
                          metadata: options.metadata,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                          immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                          legalHold: options.legalHold,
                          tier: (0, _models.toAccessTier)(options.tier),
                          blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context84.t1 = _context84.sent;
                        return _context84.abrupt("return", (0, _context84.t0)(_context84.t1));
                      case 5:
                      case "end":
                        return _context84.stop();
                    }
                  }, _callee82);
                }));
                return function (_x79) {
                  return _ref43.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context85.stop();
          }
        }, _callee83, this);
      }));
      function create(_x78) {
        return _create2.apply(this, arguments);
      }
      return create;
    }()
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob. If the blob with the same name already exists, the content
     * of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param size - size of the page blob.
     * @param options -
     */
    )
  }, {
    key: "createIfNotExists",
    value: (function () {
      var _createIfNotExists2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85(size) {
        var _this46 = this;
        var options,
          _args87 = arguments;
        return _regeneratorRuntime().wrap(function _callee85$(_context87) {
          while (1) switch (_context87.prev = _context87.next) {
            case 0:
              options = _args87.length > 1 && _args87[1] !== undefined ? _args87[1] : {};
              return _context87.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-createIfNotExists", options, /*#__PURE__*/function () {
                var _ref44 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84(updatedOptions) {
                  var _a, _b, conditions, res;
                  return _regeneratorRuntime().wrap(function _callee84$(_context86) {
                    while (1) switch (_context86.prev = _context86.next) {
                      case 0:
                        _context86.prev = 0;
                        conditions = {
                          ifNoneMatch: _constants.ETagAny
                        };
                        _context86.t0 = _utils.assertResponse;
                        _context86.next = 5;
                        return _this46.create(size, Object.assign(Object.assign({}, options), {
                          conditions: conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 5:
                        _context86.t1 = _context86.sent;
                        res = (0, _context86.t0)(_context86.t1);
                        return _context86.abrupt("return", Object.assign(Object.assign({
                          succeeded: true
                        }, res), {
                          _response: res._response
                        }));
                      case 10:
                        _context86.prev = 10;
                        _context86.t2 = _context86["catch"](0);
                        if (!(((_a = _context86.t2.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists")) {
                          _context86.next = 14;
                          break;
                        }
                        return _context86.abrupt("return", Object.assign(Object.assign({
                          succeeded: false
                        }, (_b = _context86.t2.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                          _response: _context86.t2.response
                        }));
                      case 14:
                        throw _context86.t2;
                      case 15:
                      case "end":
                        return _context86.stop();
                    }
                  }, _callee84, null, [[0, 10]]);
                }));
                return function (_x81) {
                  return _ref44.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context87.stop();
          }
        }, _callee85);
      }));
      function createIfNotExists(_x80) {
        return _createIfNotExists2.apply(this, arguments);
      }
      return createIfNotExists;
    }()
    /**
     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param body - Data to upload
     * @param offset - Offset of destination page blob
     * @param count - Content length of the body, also number of bytes to be uploaded
     * @param options - Options to the Page Blob Upload Pages operation.
     * @returns Response data for the Page Blob Upload Pages operation.
     */
    )
  }, {
    key: "uploadPages",
    value: (function () {
      var _uploadPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(body, offset, count) {
        var _this47 = this;
        var options,
          _args89 = arguments;
        return _regeneratorRuntime().wrap(function _callee87$(_context89) {
          while (1) switch (_context89.prev = _context89.next) {
            case 0:
              options = _args89.length > 3 && _args89[3] !== undefined ? _args89[3] : {};
              options.conditions = options.conditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context89.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-uploadPages", options, /*#__PURE__*/function () {
                var _ref45 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee86$(_context88) {
                    while (1) switch (_context88.prev = _context88.next) {
                      case 0:
                        _context88.t0 = _utils.assertResponse;
                        _context88.next = 3;
                        return _this47.pageBlobContext.uploadPages(count, body, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          requestOptions: {
                            onUploadProgress: options.onProgress
                          },
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          sequenceNumberAccessConditions: options.conditions,
                          transactionalContentMD5: options.transactionalContentMD5,
                          transactionalContentCrc64: options.transactionalContentCrc64,
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context88.t1 = _context88.sent;
                        return _context88.abrupt("return", (0, _context88.t0)(_context88.t1));
                      case 5:
                      case "end":
                        return _context88.stop();
                    }
                  }, _callee86);
                }));
                return function (_x85) {
                  return _ref45.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context89.stop();
          }
        }, _callee87, this);
      }));
      function uploadPages(_x82, _x83, _x84) {
        return _uploadPages.apply(this, arguments);
      }
      return uploadPages;
    }()
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the
     * contents are read from a URL.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
     *
     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
     * @param destOffset - Offset of destination page blob
     * @param count - Number of bytes to be uploaded from source page blob
     * @param options -
     */
    )
  }, {
    key: "uploadPagesFromURL",
    value: (function () {
      var _uploadPagesFromURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89(sourceURL, sourceOffset, destOffset, count) {
        var _this48 = this;
        var options,
          _args91 = arguments;
        return _regeneratorRuntime().wrap(function _callee89$(_context91) {
          while (1) switch (_context91.prev = _context91.next) {
            case 0:
              options = _args91.length > 4 && _args91[4] !== undefined ? _args91[4] : {};
              options.conditions = options.conditions || {};
              options.sourceConditions = options.sourceConditions || {};
              (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
              return _context91.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-uploadPagesFromURL", options, /*#__PURE__*/function () {
                var _ref46 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(updatedOptions) {
                  var _a, _b, _c, _d, _e;
                  return _regeneratorRuntime().wrap(function _callee88$(_context90) {
                    while (1) switch (_context90.prev = _context90.next) {
                      case 0:
                        _context90.t0 = _utils.assertResponse;
                        _context90.next = 3;
                        return _this48.pageBlobContext.uploadPagesFromURL(sourceURL, (0, _Range.rangeToString)({
                          offset: sourceOffset,
                          count: count
                        }), 0, (0, _Range.rangeToString)({
                          offset: destOffset,
                          count: count
                        }), {
                          abortSignal: options.abortSignal,
                          sourceContentMD5: options.sourceContentMD5,
                          sourceContentCrc64: options.sourceContentCrc64,
                          leaseAccessConditions: options.conditions,
                          sequenceNumberAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          sourceModifiedAccessConditions: {
                            sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,
                            sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,
                            sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,
                            sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
                          },
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          copySourceAuthorization: (0, _utils.httpAuthorizationToString)(options.sourceAuthorization),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context90.t1 = _context90.sent;
                        return _context90.abrupt("return", (0, _context90.t0)(_context90.t1));
                      case 5:
                      case "end":
                        return _context90.stop();
                    }
                  }, _callee88);
                }));
                return function (_x90) {
                  return _ref46.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context91.stop();
          }
        }, _callee89, this);
      }));
      function uploadPagesFromURL(_x86, _x87, _x88, _x89) {
        return _uploadPagesFromURL.apply(this, arguments);
      }
      return uploadPagesFromURL;
    }()
    /**
     * Frees the specified pages from the page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param offset - Starting byte position of the pages to clear.
     * @param count - Number of bytes to clear.
     * @param options - Options to the Page Blob Clear Pages operation.
     * @returns Response data for the Page Blob Clear Pages operation.
     */
    )
  }, {
    key: "clearPages",
    value: (function () {
      var _clearPages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
        var _this49 = this;
        var offset,
          count,
          options,
          _args93 = arguments;
        return _regeneratorRuntime().wrap(function _callee91$(_context93) {
          while (1) switch (_context93.prev = _context93.next) {
            case 0:
              offset = _args93.length > 0 && _args93[0] !== undefined ? _args93[0] : 0;
              count = _args93.length > 1 ? _args93[1] : undefined;
              options = _args93.length > 2 && _args93[2] !== undefined ? _args93[2] : {};
              options.conditions = options.conditions || {};
              return _context93.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-clearPages", options, /*#__PURE__*/function () {
                var _ref47 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee90$(_context92) {
                    while (1) switch (_context92.prev = _context92.next) {
                      case 0:
                        _context92.t0 = _utils.assertResponse;
                        _context92.next = 3;
                        return _this49.pageBlobContext.clearPages(0, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          sequenceNumberAccessConditions: options.conditions,
                          cpkInfo: options.customerProvidedKey,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context92.t1 = _context92.sent;
                        return _context92.abrupt("return", (0, _context92.t0)(_context92.t1));
                      case 5:
                      case "end":
                        return _context92.stop();
                    }
                  }, _callee90);
                }));
                return function (_x91) {
                  return _ref47.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context93.stop();
          }
        }, _callee91);
      }));
      function clearPages() {
        return _clearPages.apply(this, arguments);
      }
      return clearPages;
    }()
    /**
     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param options - Options to the Page Blob Get Ranges operation.
     * @returns Response data for the Page Blob Get Ranges operation.
     */
    )
  }, {
    key: "getPageRanges",
    value: (function () {
      var _getPageRanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
        var _this50 = this;
        var offset,
          count,
          options,
          _args95 = arguments;
        return _regeneratorRuntime().wrap(function _callee93$(_context95) {
          while (1) switch (_context95.prev = _context95.next) {
            case 0:
              offset = _args95.length > 0 && _args95[0] !== undefined ? _args95[0] : 0;
              count = _args95.length > 1 ? _args95[1] : undefined;
              options = _args95.length > 2 && _args95[2] !== undefined ? _args95[2] : {};
              options.conditions = options.conditions || {};
              return _context95.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-getPageRanges", options, /*#__PURE__*/function () {
                var _ref48 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92(updatedOptions) {
                  var _a, response;
                  return _regeneratorRuntime().wrap(function _callee92$(_context94) {
                    while (1) switch (_context94.prev = _context94.next) {
                      case 0:
                        _context94.t0 = _utils.assertResponse;
                        _context94.next = 3;
                        return _this50.pageBlobContext.getPageRanges({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context94.t1 = _context94.sent;
                        response = (0, _context94.t0)(_context94.t1);
                        return _context94.abrupt("return", (0, _PageBlobRangeResponse.rangeResponseFromModel)(response));
                      case 6:
                      case "end":
                        return _context94.stop();
                    }
                  }, _callee92);
                }));
                return function (_x92) {
                  return _ref48.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context95.stop();
          }
        }, _callee93);
      }));
      function getPageRanges() {
        return _getPageRanges.apply(this, arguments);
      }
      return getPageRanges;
    }()
    /**
     * getPageRangesSegment returns a single segment of page ranges starting from the
     * specified Marker. Use an empty Marker to start enumeration from the beginning.
     * After getting a segment, process it, and then call getPageRangesSegment again
     * (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
     * @param options - Options to PageBlob Get Page Ranges Segment operation.
     */
    )
  }, {
    key: "listPageRangesSegment",
    value: (function () {
      var _listPageRangesSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
        var _this51 = this;
        var offset,
          count,
          marker,
          options,
          _args97 = arguments;
        return _regeneratorRuntime().wrap(function _callee95$(_context97) {
          while (1) switch (_context97.prev = _context97.next) {
            case 0:
              offset = _args97.length > 0 && _args97[0] !== undefined ? _args97[0] : 0;
              count = _args97.length > 1 ? _args97[1] : undefined;
              marker = _args97.length > 2 ? _args97[2] : undefined;
              options = _args97.length > 3 && _args97[3] !== undefined ? _args97[3] : {};
              return _context97.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-getPageRangesSegment", options, /*#__PURE__*/function () {
                var _ref49 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee94$(_context96) {
                    while (1) switch (_context96.prev = _context96.next) {
                      case 0:
                        _context96.t0 = _utils.assertResponse;
                        _context96.next = 3;
                        return _this51.pageBlobContext.getPageRanges({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          marker: marker,
                          maxPageSize: options.maxPageSize,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context96.t1 = _context96.sent;
                        return _context96.abrupt("return", (0, _context96.t0)(_context96.t1));
                      case 5:
                      case "end":
                        return _context96.stop();
                    }
                  }, _callee94);
                }));
                return function (_x93) {
                  return _ref49.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context97.stop();
          }
        }, _callee95);
      }));
      function listPageRangesSegment() {
        return _listPageRangesSegment.apply(this, arguments);
      }
      return listPageRangesSegment;
    }()
    /**
     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param marker - A string value that identifies the portion of
     *                          the get of page ranges to be returned with the next getting operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          getting operation did not return all page ranges remaining within the current page.
     *                          The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of get
     *                          items. The marker value is opaque to the client.
     * @param options - Options to List Page Ranges operation.
     */
    )
  }, {
    key: "listPageRangeItemSegments",
    value: function listPageRangeItemSegments() {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listPageRangeItemSegments_1() {
        var _this52 = this;
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;
        var marker = arguments.length > 2 ? arguments[2] : undefined;
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
          var getPageRangeItemSegmentsResponse;
          return _regeneratorRuntime().wrap(function _callee96$(_context98) {
            while (1) switch (_context98.prev = _context98.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context98.next = 14;
                  break;
                }
              case 1:
                _context98.next = 3;
                return (0, _tslib.__await)(_this52.listPageRangesSegment(offset, count, marker, options));
              case 3:
                getPageRangeItemSegmentsResponse = _context98.sent;
                marker = getPageRangeItemSegmentsResponse.continuationToken;
                _context98.t0 = _tslib.__await;
                _context98.next = 8;
                return (0, _tslib.__await)(getPageRangeItemSegmentsResponse);
              case 8:
                _context98.t1 = _context98.sent;
                _context98.next = 11;
                return (0, _context98.t0)(_context98.t1);
              case 11:
                _context98.next = 13;
                return _context98.sent;
              case 13:
                if (marker) {
                  _context98.next = 1;
                  break;
                }
              case 14:
              case "end":
                return _context98.stop();
            }
          }, _callee96);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param options - Options to List Page Ranges operation.
     */
  }, {
    key: "listPageRangeItems",
    value: function listPageRangeItems() {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listPageRangeItems_1() {
        var _this53 = this;
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
          var _a, e_1, _b, _c, marker, _d, _e, _f, getPageRangesSegment;
          return _regeneratorRuntime().wrap(function _callee97$(_context99) {
            while (1) switch (_context99.prev = _context99.next) {
              case 0:
                _context99.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this53.listPageRangeItemSegments(offset, count, marker, options));
              case 2:
                _context99.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context99.sent;
                _a = _f.done;
                if (_a) {
                  _context99.next = 18;
                  break;
                }
                _c = _f.value;
                _d = false;
                getPageRangesSegment = _c;
                _context99.t0 = _tslib.__await;
                return _context99.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)((0, _utils.ExtractPageRangeInfoItems)(getPageRangesSegment))), "t1", 12);
              case 12:
                _context99.t2 = _context99.t1;
                _context99.next = 15;
                return (0, _context99.t0)(_context99.t2);
              case 15:
                _d = true;
                _context99.next = 2;
                break;
              case 18:
                _context99.next = 23;
                break;
              case 20:
                _context99.prev = 20;
                _context99.t3 = _context99["catch"](0);
                e_1 = {
                  error: _context99.t3
                };
              case 23:
                _context99.prev = 23;
                _context99.prev = 24;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context99.next = 28;
                  break;
                }
                _context99.next = 28;
                return (0, _tslib.__await)(_b.call(_e));
              case 28:
                _context99.prev = 28;
                if (!e_1) {
                  _context99.next = 31;
                  break;
                }
                throw e_1.error;
              case 31:
                return _context99.finish(28);
              case 32:
                return _context99.finish(23);
              case 33:
              case "end":
                return _context99.stop();
            }
          }, _callee97, null, [[0, 20, 23, 33], [24,, 28, 32]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to list of page ranges for a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * // Get the pageBlobClient before you run these snippets,
     * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
     * let i = 1;
     * for await (const pageRange of pageBlobClient.listPageRanges()) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = pageBlobClient.listPageRanges();
     * let pageRangeItem = await iter.next();
     * while (!pageRangeItem.done) {
     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
     *   pageRangeItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {
     *   for (const pageRange of response) {
     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 page ranges
     * for (const pageRange of response) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     *
     * // Passing next marker as continuationToken
     *
     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 page ranges
     * for (const blob of response) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     * ```
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param options - Options to the Page Blob Get Ranges operation.
     * @returns An asyncIterableIterator that supports paging.
     */
  }, {
    key: "listPageRanges",
    value: function listPageRanges() {
      var _this54 = this;
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = arguments.length > 1 ? arguments[1] : undefined;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      options.conditions = options.conditions || {};
      // AsyncIterableIterator to iterate over blobs
      var iter = this.listPageRangeItems(offset, count, options);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this54.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, options));
      });
    }
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page blob
     * @param count - Number of bytes to get ranges diff.
     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     * @returns Response data for the Page Blob Get Page Range Diff operation.
     */
  }, {
    key: "getPageRangesDiff",
    value: (function () {
      var _getPageRangesDiff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee99(offset, count, prevSnapshot) {
        var _this55 = this;
        var options,
          _args101 = arguments;
        return _regeneratorRuntime().wrap(function _callee99$(_context101) {
          while (1) switch (_context101.prev = _context101.next) {
            case 0:
              options = _args101.length > 3 && _args101[3] !== undefined ? _args101[3] : {};
              options.conditions = options.conditions || {};
              return _context101.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-getPageRangesDiff", options, /*#__PURE__*/function () {
                var _ref51 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee98(updatedOptions) {
                  var _a, result;
                  return _regeneratorRuntime().wrap(function _callee98$(_context100) {
                    while (1) switch (_context100.prev = _context100.next) {
                      case 0:
                        _context100.t0 = _utils.assertResponse;
                        _context100.next = 3;
                        return _this55.pageBlobContext.getPageRangesDiff({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          prevsnapshot: prevSnapshot,
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context100.t1 = _context100.sent;
                        result = (0, _context100.t0)(_context100.t1);
                        return _context100.abrupt("return", (0, _PageBlobRangeResponse.rangeResponseFromModel)(result));
                      case 6:
                      case "end":
                        return _context100.stop();
                    }
                  }, _callee98);
                }));
                return function (_x97) {
                  return _ref51.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context101.stop();
          }
        }, _callee99);
      }));
      function getPageRangesDiff(_x94, _x95, _x96) {
        return _getPageRangesDiff.apply(this, arguments);
      }
      return getPageRangesDiff;
    }()
    /**
     * getPageRangesDiffSegment returns a single segment of page ranges starting from the
     * specified Marker for difference between previous snapshot and the target page blob.
     * Use an empty Marker to start enumeration from the beginning.
     * After getting a segment, process it, and then call getPageRangesDiffSegment again
     * (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     */
    )
  }, {
    key: "listPageRangesDiffSegment",
    value: (function () {
      var _listPageRangesDiffSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee101(offset, count, prevSnapshotOrUrl, marker) {
        var _this56 = this;
        var options,
          _args103 = arguments;
        return _regeneratorRuntime().wrap(function _callee101$(_context103) {
          while (1) switch (_context103.prev = _context103.next) {
            case 0:
              options = _args103.length > 4 && _args103[4] !== undefined ? _args103[4] : {};
              return _context103.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-getPageRangesDiffSegment", options, /*#__PURE__*/function () {
                var _ref52 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee100(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee100$(_context102) {
                    while (1) switch (_context102.prev = _context102.next) {
                      case 0:
                        _context102.t0 = _utils.assertResponse;
                        _context102.next = 3;
                        return _this56.pageBlobContext.getPageRangesDiff({
                          abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
                          leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), {
                            ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          prevsnapshot: prevSnapshotOrUrl,
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          marker: marker,
                          maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context102.t1 = _context102.sent;
                        return _context102.abrupt("return", (0, _context102.t0)(_context102.t1));
                      case 5:
                      case "end":
                        return _context102.stop();
                    }
                  }, _callee100);
                }));
                return function (_x102) {
                  return _ref52.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context103.stop();
          }
        }, _callee101);
      }));
      function listPageRangesDiffSegment(_x98, _x99, _x100, _x101) {
        return _listPageRangesDiffSegment.apply(this, arguments);
      }
      return listPageRangesDiffSegment;
    }()
    /**
     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}
     *
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
     * @param marker - A string value that identifies the portion of
     *                          the get of page ranges to be returned with the next getting operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          getting operation did not return all page ranges remaining within the current page.
     *                          The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of get
     *                          items. The marker value is opaque to the client.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     */
    )
  }, {
    key: "listPageRangeDiffItemSegments",
    value: function listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {
      return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeDiffItemSegments_1() {
        var getPageRangeItemSegmentsResponse;
        return _regeneratorRuntime().wrap(function listPageRangeDiffItemSegments_1$(_context104) {
          while (1) switch (_context104.prev = _context104.next) {
            case 0:
              if (!(!!marker || marker === undefined)) {
                _context104.next = 14;
                break;
              }
            case 1:
              _context104.next = 3;
              return (0, _tslib.__await)(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));
            case 3:
              getPageRangeItemSegmentsResponse = _context104.sent;
              marker = getPageRangeItemSegmentsResponse.continuationToken;
              _context104.t0 = _tslib.__await;
              _context104.next = 8;
              return (0, _tslib.__await)(getPageRangeItemSegmentsResponse);
            case 8:
              _context104.t1 = _context104.sent;
              _context104.next = 11;
              return (0, _context104.t0)(_context104.t1);
            case 11:
              _context104.next = 13;
              return _context104.sent;
            case 13:
              if (marker) {
                _context104.next = 1;
                break;
              }
            case 14:
            case "end":
              return _context104.stop();
          }
        }, listPageRangeDiffItemSegments_1, this);
      }));
    }
    /**
     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     */
  }, {
    key: "listPageRangeDiffItems",
    value: function listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
      return (0, _tslib.__asyncGenerator)(this, arguments, /*#__PURE__*/_regeneratorRuntime().mark(function listPageRangeDiffItems_1() {
        var _a, e_2, _b, _c, marker, _d, _e, _f, getPageRangesSegment;
        return _regeneratorRuntime().wrap(function listPageRangeDiffItems_1$(_context105) {
          while (1) switch (_context105.prev = _context105.next) {
            case 0:
              _context105.prev = 0;
              _d = true, _e = (0, _tslib.__asyncValues)(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options));
            case 2:
              _context105.next = 4;
              return (0, _tslib.__await)(_e.next());
            case 4:
              _f = _context105.sent;
              _a = _f.done;
              if (_a) {
                _context105.next = 18;
                break;
              }
              _c = _f.value;
              _d = false;
              getPageRangesSegment = _c;
              _context105.t0 = _tslib.__await;
              return _context105.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)((0, _utils.ExtractPageRangeInfoItems)(getPageRangesSegment))), "t1", 12);
            case 12:
              _context105.t2 = _context105.t1;
              _context105.next = 15;
              return (0, _context105.t0)(_context105.t2);
            case 15:
              _d = true;
              _context105.next = 2;
              break;
            case 18:
              _context105.next = 23;
              break;
            case 20:
              _context105.prev = 20;
              _context105.t3 = _context105["catch"](0);
              e_2 = {
                error: _context105.t3
              };
            case 23:
              _context105.prev = 23;
              _context105.prev = 24;
              if (!(!_d && !_a && (_b = _e.return))) {
                _context105.next = 28;
                break;
              }
              _context105.next = 28;
              return (0, _tslib.__await)(_b.call(_e));
            case 28:
              _context105.prev = 28;
              if (!e_2) {
                _context105.next = 31;
                break;
              }
              throw e_2.error;
            case 31:
              return _context105.finish(28);
            case 32:
              return _context105.finish(23);
            case 33:
            case "end":
              return _context105.stop();
          }
        }, listPageRangeDiffItems_1, this, [[0, 20, 23, 33], [24,, 28, 32]]);
      }));
    }
    /**
     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * // Get the pageBlobClient before you run these snippets,
     * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
     * let i = 1;
     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = pageBlobClient.listPageRangesDiff();
     * let pageRangeItem = await iter.next();
     * while (!pageRangeItem.done) {
     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
     *   pageRangeItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {
     *   for (const pageRange of response) {
     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 page ranges
     * for (const pageRange of response) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     *
     * // Passing next marker as continuationToken
     *
     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 page ranges
     * for (const blob of response) {
     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
     * }
     * ```
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Ranges operation.
     * @returns An asyncIterableIterator that supports paging.
     */
  }, {
    key: "listPageRangesDiff",
    value: function listPageRangesDiff(offset, count, prevSnapshot) {
      var _this57 = this;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      options.conditions = options.conditions || {};
      // AsyncIterableIterator to iterate over blobs
      var iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this57.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, options));
      });
    }
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page blob
     * @param count - Number of bytes to get ranges diff.
     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     * @returns Response data for the Page Blob Get Page Range Diff operation.
     */
  }, {
    key: "getPageRangesDiffForManagedDisks",
    value: (function () {
      var _getPageRangesDiffForManagedDisks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee103(offset, count, prevSnapshotUrl) {
        var _this58 = this;
        var options,
          _args107 = arguments;
        return _regeneratorRuntime().wrap(function _callee103$(_context107) {
          while (1) switch (_context107.prev = _context107.next) {
            case 0:
              options = _args107.length > 3 && _args107[3] !== undefined ? _args107[3] : {};
              options.conditions = options.conditions || {};
              return _context107.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-GetPageRangesDiffForManagedDisks", options, /*#__PURE__*/function () {
                var _ref54 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee102(updatedOptions) {
                  var _a, response;
                  return _regeneratorRuntime().wrap(function _callee102$(_context106) {
                    while (1) switch (_context106.prev = _context106.next) {
                      case 0:
                        _context106.t0 = _utils.assertResponse;
                        _context106.next = 3;
                        return _this58.pageBlobContext.getPageRangesDiff({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          prevSnapshotUrl: prevSnapshotUrl,
                          range: (0, _Range.rangeToString)({
                            offset: offset,
                            count: count
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context106.t1 = _context106.sent;
                        response = (0, _context106.t0)(_context106.t1);
                        return _context106.abrupt("return", (0, _PageBlobRangeResponse.rangeResponseFromModel)(response));
                      case 6:
                      case "end":
                        return _context106.stop();
                    }
                  }, _callee102);
                }));
                return function (_x106) {
                  return _ref54.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context107.stop();
          }
        }, _callee103);
      }));
      function getPageRangesDiffForManagedDisks(_x103, _x104, _x105) {
        return _getPageRangesDiffForManagedDisks.apply(this, arguments);
      }
      return getPageRangesDiffForManagedDisks;
    }()
    /**
     * Resizes the page blob to the specified size (which must be a multiple of 512).
     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
     *
     * @param size - Target size
     * @param options - Options to the Page Blob Resize operation.
     * @returns Response data for the Page Blob Resize operation.
     */
    )
  }, {
    key: "resize",
    value: (function () {
      var _resize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee105(size) {
        var _this59 = this;
        var options,
          _args109 = arguments;
        return _regeneratorRuntime().wrap(function _callee105$(_context109) {
          while (1) switch (_context109.prev = _context109.next) {
            case 0:
              options = _args109.length > 1 && _args109[1] !== undefined ? _args109[1] : {};
              options.conditions = options.conditions || {};
              return _context109.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-resize", options, /*#__PURE__*/function () {
                var _ref55 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee104(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee104$(_context108) {
                    while (1) switch (_context108.prev = _context108.next) {
                      case 0:
                        _context108.t0 = _utils.assertResponse;
                        _context108.next = 3;
                        return _this59.pageBlobContext.resize(size, {
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context108.t1 = _context108.sent;
                        return _context108.abrupt("return", (0, _context108.t0)(_context108.t1));
                      case 5:
                      case "end":
                        return _context108.stop();
                    }
                  }, _callee104);
                }));
                return function (_x108) {
                  return _ref55.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context109.stop();
          }
        }, _callee105);
      }));
      function resize(_x107) {
        return _resize.apply(this, arguments);
      }
      return resize;
    }()
    /**
     * Sets a page blob's sequence number.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
     * @param sequenceNumber - Required if sequenceNumberAction is max or update
     * @param options - Options to the Page Blob Update Sequence Number operation.
     * @returns Response data for the Page Blob Update Sequence Number operation.
     */
    )
  }, {
    key: "updateSequenceNumber",
    value: (function () {
      var _updateSequenceNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee107(sequenceNumberAction, sequenceNumber) {
        var _this60 = this;
        var options,
          _args111 = arguments;
        return _regeneratorRuntime().wrap(function _callee107$(_context111) {
          while (1) switch (_context111.prev = _context111.next) {
            case 0:
              options = _args111.length > 2 && _args111[2] !== undefined ? _args111[2] : {};
              options.conditions = options.conditions || {};
              return _context111.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-updateSequenceNumber", options, /*#__PURE__*/function () {
                var _ref56 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee106(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee106$(_context110) {
                    while (1) switch (_context110.prev = _context110.next) {
                      case 0:
                        _context110.t0 = _utils.assertResponse;
                        _context110.next = 3;
                        return _this60.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {
                          abortSignal: options.abortSignal,
                          blobSequenceNumber: sequenceNumber,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context110.t1 = _context110.sent;
                        return _context110.abrupt("return", (0, _context110.t0)(_context110.t1));
                      case 5:
                      case "end":
                        return _context110.stop();
                    }
                  }, _callee106);
                }));
                return function (_x111) {
                  return _ref56.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context111.stop();
          }
        }, _callee107);
      }));
      function updateSequenceNumber(_x109, _x110) {
        return _updateSequenceNumber.apply(this, arguments);
      }
      return updateSequenceNumber;
    }()
    /**
     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
     * The snapshot is copied such that only the differential changes between the previously
     * copied snapshot are transferred to the destination.
     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
     *
     * @param copySource - Specifies the name of the source page blob snapshot. For example,
     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param options - Options to the Page Blob Copy Incremental operation.
     * @returns Response data for the Page Blob Copy Incremental operation.
     */
    )
  }, {
    key: "startCopyIncremental",
    value: (function () {
      var _startCopyIncremental = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee109(copySource) {
        var _this61 = this;
        var options,
          _args113 = arguments;
        return _regeneratorRuntime().wrap(function _callee109$(_context113) {
          while (1) switch (_context113.prev = _context113.next) {
            case 0:
              options = _args113.length > 1 && _args113[1] !== undefined ? _args113[1] : {};
              return _context113.abrupt("return", _tracing.tracingClient.withSpan("PageBlobClient-startCopyIncremental", options, /*#__PURE__*/function () {
                var _ref57 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee108(updatedOptions) {
                  var _a;
                  return _regeneratorRuntime().wrap(function _callee108$(_context112) {
                    while (1) switch (_context112.prev = _context112.next) {
                      case 0:
                        _context112.t0 = _utils.assertResponse;
                        _context112.next = 3;
                        return _this61.pageBlobContext.copyIncremental(copySource, {
                          abortSignal: options.abortSignal,
                          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
                            ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                          }),
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context112.t1 = _context112.sent;
                        return _context112.abrupt("return", (0, _context112.t0)(_context112.t1));
                      case 5:
                      case "end":
                        return _context112.stop();
                    }
                  }, _callee108);
                }));
                return function (_x113) {
                  return _ref57.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context113.stop();
          }
        }, _callee109);
      }));
      function startCopyIncremental(_x112) {
        return _startCopyIncremental.apply(this, arguments);
      }
      return startCopyIncremental;
    }())
  }]);
}(BlobClient);
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-auth":"node_modules/@azure/core-auth/dist/browser/index.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./BlobDownloadResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js","./BlobQueryResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","./PageBlobRangeResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./pollers/BlobStartCopyFromUrlPoller":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js","./Range":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./utils/Batch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js","../../storage-common/src":"node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./utils/utils.node":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js","./sas/BlobSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","buffer":"node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBodyAsText = getBodyAsText;
exports.utf8ByteLength = utf8ByteLength;
var _utils = require("./utils/utils.browser");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getBodyAsText(_x) {
  return _getBodyAsText.apply(this, arguments);
}
function _getBodyAsText() {
  _getBodyAsText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(batchResponse) {
    var blob;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return batchResponse.blobBody;
        case 2:
          blob = _context.sent;
          return _context.abrupt("return", (0, _utils.blobToString)(blob));
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getBodyAsText.apply(this, arguments);
}
function utf8ByteLength(str) {
  return new Blob([str]).size;
}
},{"./utils/utils.browser":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchResponseParser = void 0;
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreHttpCompat = require("@azure/core-http-compat");
var _constants = require("./utils/constants");
var _BatchUtils = require("./BatchUtils");
var _log = require("./log");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var HTTP_HEADER_DELIMITER = ": ";
var SPACE_DELIMITER = " ";
var NOT_FOUND = -1;
/**
 * Util class for parsing batch response.
 */
var BatchResponseParser = exports.BatchResponseParser = /*#__PURE__*/function () {
  function BatchResponseParser(batchResponse, subRequests) {
    _classCallCheck(this, BatchResponseParser);
    if (!batchResponse || !batchResponse.contentType) {
      // In special case(reported), server may return invalid content-type which could not be parsed.
      throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
    }
    if (!subRequests || subRequests.size === 0) {
      // This should be prevent during coding.
      throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
    }
    this.batchResponse = batchResponse;
    this.subRequests = subRequests;
    this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
    this.perResponsePrefix = "--".concat(this.responseBatchBoundary).concat(_constants.HTTP_LINE_ENDING);
    this.batchResponseEnding = "--".concat(this.responseBatchBoundary, "--");
  }
  // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
  return _createClass(BatchResponseParser, [{
    key: "parseBatchResponse",
    value: function () {
      var _parseBatchResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var responseBodyAsText, subResponses, subResponseCount, deserializedSubResponses, subResponsesSucceededCount, subResponsesFailedCount, index, subResponse, deserializedSubResponse, responseLines, subRespHeaderStartFound, subRespHeaderEndFound, subRespFailed, contentId, _iterator, _step, responseLine, tokens, _tokens;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(this.batchResponse._response.status !== _constants.HTTPURLConnection.HTTP_ACCEPTED)) {
                _context.next = 2;
                break;
              }
              throw new Error("Invalid state: batch request failed with status: '".concat(this.batchResponse._response.status, "'."));
            case 2:
              _context.next = 4;
              return (0, _BatchUtils.getBodyAsText)(this.batchResponse);
            case 4:
              responseBodyAsText = _context.sent;
              subResponses = responseBodyAsText.split(this.batchResponseEnding)[0] // string after ending is useless
              .split(this.perResponsePrefix).slice(1); // string before first response boundary is useless
              subResponseCount = subResponses.length; // Defensive coding in case of potential error parsing.
              // Note: subResponseCount == 1 is special case where sub request is invalid.
              // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.
              // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.
              if (!(subResponseCount !== this.subRequests.size && subResponseCount !== 1)) {
                _context.next = 9;
                break;
              }
              throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
            case 9:
              deserializedSubResponses = new Array(subResponseCount);
              subResponsesSucceededCount = 0;
              subResponsesFailedCount = 0; // Parse sub subResponses.
              index = 0;
            case 13:
              if (!(index < subResponseCount)) {
                _context.next = 59;
                break;
              }
              subResponse = subResponses[index];
              deserializedSubResponse = {};
              deserializedSubResponse.headers = (0, _coreHttpCompat.toHttpHeadersLike)((0, _coreRestPipeline.createHttpHeaders)());
              responseLines = subResponse.split("".concat(_constants.HTTP_LINE_ENDING));
              subRespHeaderStartFound = false;
              subRespHeaderEndFound = false;
              subRespFailed = false;
              contentId = NOT_FOUND;
              _iterator = _createForOfIteratorHelper(responseLines);
              _context.prev = 23;
              _iterator.s();
            case 25:
              if ((_step = _iterator.n()).done) {
                _context.next = 46;
                break;
              }
              responseLine = _step.value;
              if (subRespHeaderStartFound) {
                _context.next = 31;
                break;
              }
              // Convention line to indicate content ID
              if (responseLine.startsWith(_constants.HeaderConstants.CONTENT_ID)) {
                contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
              }
              // Http version line with status code indicates the start of sub request's response.
              // Example: HTTP/1.1 202 Accepted
              if (responseLine.startsWith(_constants.HTTP_VERSION_1_1)) {
                subRespHeaderStartFound = true;
                tokens = responseLine.split(SPACE_DELIMITER);
                deserializedSubResponse.status = parseInt(tokens[1]);
                deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
              }
              return _context.abrupt("continue", 44);
            case 31:
              if (!(responseLine.trim() === "")) {
                _context.next = 34;
                break;
              }
              // Sub response's header start line already found, and the first empty line indicates header end line found.
              if (!subRespHeaderEndFound) {
                subRespHeaderEndFound = true;
              }
              return _context.abrupt("continue", 44);
            case 34:
              if (subRespHeaderEndFound) {
                _context.next = 42;
                break;
              }
              if (!(responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1)) {
                _context.next = 37;
                break;
              }
              throw new Error("Invalid state: find non-empty line '".concat(responseLine, "' without HTTP header delimiter '").concat(HTTP_HEADER_DELIMITER, "'."));
            case 37:
              // Parse headers of sub response.
              _tokens = responseLine.split(HTTP_HEADER_DELIMITER);
              deserializedSubResponse.headers.set(_tokens[0], _tokens[1]);
              if (_tokens[0] === _constants.HeaderConstants.X_MS_ERROR_CODE) {
                deserializedSubResponse.errorCode = _tokens[1];
                subRespFailed = true;
              }
              _context.next = 44;
              break;
            case 42:
              // Assemble body of sub response.
              if (!deserializedSubResponse.bodyAsText) {
                deserializedSubResponse.bodyAsText = "";
              }
              deserializedSubResponse.bodyAsText += responseLine;
            case 44:
              _context.next = 25;
              break;
            case 46:
              _context.next = 51;
              break;
            case 48:
              _context.prev = 48;
              _context.t0 = _context["catch"](23);
              _iterator.e(_context.t0);
            case 51:
              _context.prev = 51;
              _iterator.f();
              return _context.finish(51);
            case 54:
              // Inner for end
              // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.
              // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it
              // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that
              // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.
              if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === undefined) {
                deserializedSubResponse._request = this.subRequests.get(contentId);
                deserializedSubResponses[contentId] = deserializedSubResponse;
              } else {
                _log.logger.error("subResponses[".concat(index, "] is dropped as the Content-ID is not found or invalid, Content-ID: ").concat(contentId));
              }
              if (subRespFailed) {
                subResponsesFailedCount++;
              } else {
                subResponsesSucceededCount++;
              }
            case 56:
              index++;
              _context.next = 13;
              break;
            case 59:
              return _context.abrupt("return", {
                subResponses: deserializedSubResponses,
                subResponsesSucceededCount: subResponsesSucceededCount,
                subResponsesFailedCount: subResponsesFailedCount
              });
            case 60:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[23, 48, 51, 54]]);
      }));
      function parseBatchResponse() {
        return _parseBatchResponse.apply(this, arguments);
      }
      return parseBatchResponse;
    }()
  }]);
}();
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-http-compat":"node_modules/@azure/core-http-compat/dist/browser/index.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./BatchUtils":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mutex = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var MutexLockStatus;
(function (MutexLockStatus) {
  MutexLockStatus[MutexLockStatus["LOCKED"] = 0] = "LOCKED";
  MutexLockStatus[MutexLockStatus["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {}));
/**
 * An async mutex lock.
 */
var Mutex = exports.Mutex = /*#__PURE__*/function () {
  function Mutex() {
    _classCallCheck(this, Mutex);
  }
  return _createClass(Mutex, null, [{
    key: "lock",
    value: (
    /**
     * Lock for a specific key. If the lock has been acquired by another customer, then
     * will wait until getting the lock.
     *
     * @param key - lock key
     */
    function () {
      var _lock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key) {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", new Promise(function (resolve) {
                if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {
                  _this.keys[key] = MutexLockStatus.LOCKED;
                  resolve();
                } else {
                  _this.onUnlockEvent(key, function () {
                    _this.keys[key] = MutexLockStatus.LOCKED;
                    resolve();
                  });
                }
              }));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function lock(_x) {
        return _lock.apply(this, arguments);
      }
      return lock;
    }()
    /**
     * Unlock a key.
     *
     * @param key -
     */
    )
  }, {
    key: "unlock",
    value: (function () {
      var _unlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {
        var _this2 = this;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", new Promise(function (resolve) {
                if (_this2.keys[key] === MutexLockStatus.LOCKED) {
                  _this2.emitUnlockEvent(key);
                }
                delete _this2.keys[key];
                resolve();
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function unlock(_x2) {
        return _unlock.apply(this, arguments);
      }
      return unlock;
    }())
  }, {
    key: "onUnlockEvent",
    value: function onUnlockEvent(key, handler) {
      if (this.listeners[key] === undefined) {
        this.listeners[key] = [handler];
      } else {
        this.listeners[key].push(handler);
      }
    }
  }, {
    key: "emitUnlockEvent",
    value: function emitUnlockEvent(key) {
      var _this3 = this;
      if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {
        var handler = this.listeners[key].shift();
        setImmediate(function () {
          handler.call(_this3);
        });
      }
    }
  }]);
}();
Mutex.keys = {};
Mutex.listeners = {};
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBatch = void 0;
var _coreUtil = require("@azure/core-util");
var _coreAuth = require("@azure/core-auth");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _Clients = require("./Clients");
var _Mutex = require("./utils/Mutex");
var _Pipeline = require("./Pipeline");
var _utils = require("./utils/utils.common");
var _coreXml = require("@azure/core-xml");
var _constants = require("./utils/constants");
var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _tracing = require("./utils/tracing");
var _coreClient = require("@azure/core-client");
var _StorageSharedKeyCredentialPolicyV = require("./policies/StorageSharedKeyCredentialPolicyV2");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A BlobBatch represents an aggregated set of operations on blobs.
 * Currently, only `delete` and `setAccessTier` are supported.
 */
var BlobBatch = exports.BlobBatch = /*#__PURE__*/function () {
  function BlobBatch() {
    _classCallCheck(this, BlobBatch);
    this.batch = "batch";
    this.batchRequest = new InnerBatchRequest();
  }
  /**
   * Get the value of Content-Type for a batch request.
   * The value must be multipart/mixed with a batch boundary.
   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
   */
  return _createClass(BlobBatch, [{
    key: "getMultiPartContentType",
    value: function getMultiPartContentType() {
      return this.batchRequest.getMultipartContentType();
    }
    /**
     * Get assembled HTTP request body for sub requests.
     */
  }, {
    key: "getHttpRequestBody",
    value: function getHttpRequestBody() {
      return this.batchRequest.getHttpRequestBody();
    }
    /**
     * Get sub requests that are added into the batch request.
     */
  }, {
    key: "getSubRequests",
    value: function getSubRequests() {
      return this.batchRequest.getSubRequests();
    }
  }, {
    key: "addSubRequestInternal",
    value: function () {
      var _addSubRequestInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(subRequest, assembleSubRequestFunc) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _Mutex.Mutex.lock(this.batch);
            case 2:
              _context.prev = 2;
              this.batchRequest.preAddSubRequest(subRequest);
              _context.next = 6;
              return assembleSubRequestFunc();
            case 6:
              this.batchRequest.postAddSubRequest(subRequest);
            case 7:
              _context.prev = 7;
              _context.next = 10;
              return _Mutex.Mutex.unlock(this.batch);
            case 10:
              return _context.finish(7);
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2,, 7, 11]]);
      }));
      function addSubRequestInternal(_x, _x2) {
        return _addSubRequestInternal.apply(this, arguments);
      }
      return addSubRequestInternal;
    }()
  }, {
    key: "setBatchType",
    value: function setBatchType(batchType) {
      if (!this.batchType) {
        this.batchType = batchType;
      }
      if (this.batchType !== batchType) {
        throw new RangeError("BlobBatch only supports one operation type per batch and it already is being used for ".concat(this.batchType, " operations."));
      }
    }
  }, {
    key: "deleteBlob",
    value: function () {
      var _deleteBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(urlOrBlobClient, credentialOrOptions, options) {
        var _this = this;
        var url, credential;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(typeof urlOrBlobClient === "string" && (_coreUtil.isNode && credentialOrOptions instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrOptions instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrOptions)))) {
                _context4.next = 5;
                break;
              }
              // First overload
              url = urlOrBlobClient;
              credential = credentialOrOptions;
              _context4.next = 12;
              break;
            case 5:
              if (!(urlOrBlobClient instanceof _Clients.BlobClient)) {
                _context4.next = 11;
                break;
              }
              // Second overload
              url = urlOrBlobClient.url;
              credential = urlOrBlobClient.credential;
              options = credentialOrOptions;
              _context4.next = 12;
              break;
            case 11:
              throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
            case 12:
              if (!options) {
                options = {};
              }
              return _context4.abrupt("return", _tracing.tracingClient.withSpan("BatchDeleteRequest-addSubRequest", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        _this.setBatchType("delete");
                        _context3.next = 3;
                        return _this.addSubRequestInternal({
                          url: url,
                          credential: credential
                        }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                            while (1) switch (_context2.prev = _context2.next) {
                              case 0:
                                _context2.next = 2;
                                return new _Clients.BlobClient(url, _this.batchRequest.createPipeline(credential)).delete(updatedOptions);
                              case 2:
                              case "end":
                                return _context2.stop();
                            }
                          }, _callee2);
                        })));
                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function (_x6) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 14:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function deleteBlob(_x3, _x4, _x5) {
        return _deleteBlob.apply(this, arguments);
      }
      return deleteBlob;
    }()
  }, {
    key: "setBlobAccessTier",
    value: function () {
      var _setBlobAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
        var _this2 = this;
        var url, credential, tier;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(typeof urlOrBlobClient === "string" && (_coreUtil.isNode && credentialOrTier instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrTier instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrTier)))) {
                _context7.next = 6;
                break;
              }
              // First overload
              url = urlOrBlobClient;
              credential = credentialOrTier;
              tier = tierOrOptions;
              _context7.next = 14;
              break;
            case 6:
              if (!(urlOrBlobClient instanceof _Clients.BlobClient)) {
                _context7.next = 13;
                break;
              }
              // Second overload
              url = urlOrBlobClient.url;
              credential = urlOrBlobClient.credential;
              tier = credentialOrTier;
              options = tierOrOptions;
              _context7.next = 14;
              break;
            case 13:
              throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
            case 14:
              if (!options) {
                options = {};
              }
              return _context7.abrupt("return", _tracing.tracingClient.withSpan("BatchSetTierRequest-addSubRequest", options, /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                    while (1) switch (_context6.prev = _context6.next) {
                      case 0:
                        _this2.setBatchType("setAccessTier");
                        _context6.next = 3;
                        return _this2.addSubRequestInternal({
                          url: url,
                          credential: credential
                        }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
                          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                            while (1) switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return new _Clients.BlobClient(url, _this2.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);
                              case 2:
                              case "end":
                                return _context5.stop();
                            }
                          }, _callee5);
                        })));
                      case 3:
                      case "end":
                        return _context6.stop();
                    }
                  }, _callee6);
                }));
                return function (_x11) {
                  return _ref3.apply(this, arguments);
                };
              }()));
            case 16:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function setBlobAccessTier(_x7, _x8, _x9, _x10) {
        return _setBlobAccessTier.apply(this, arguments);
      }
      return setBlobAccessTier;
    }()
  }]);
}();
/**
 * Inner batch request class which is responsible for assembling and serializing sub requests.
 * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.
 */
var InnerBatchRequest = /*#__PURE__*/function () {
  function InnerBatchRequest() {
    _classCallCheck(this, InnerBatchRequest);
    this.operationCount = 0;
    this.body = "";
    var tempGuid = (0, _coreUtil.randomUUID)();
    // batch_{batchid}
    this.boundary = "batch_".concat(tempGuid);
    // --batch_{batchid}
    // Content-Type: application/http
    // Content-Transfer-Encoding: binary
    this.subRequestPrefix = "--".concat(this.boundary).concat(_constants.HTTP_LINE_ENDING).concat(_constants.HeaderConstants.CONTENT_TYPE, ": application/http").concat(_constants.HTTP_LINE_ENDING).concat(_constants.HeaderConstants.CONTENT_TRANSFER_ENCODING, ": binary");
    // multipart/mixed; boundary=batch_{batchid}
    this.multipartContentType = "multipart/mixed; boundary=".concat(this.boundary);
    // --batch_{batchid}--
    this.batchRequestEnding = "--".concat(this.boundary, "--");
    this.subRequests = new Map();
  }
  /**
   * Create pipeline to assemble sub requests. The idea here is to use existing
   * credential and serialization/deserialization components, with additional policies to
   * filter unnecessary headers, assemble sub requests into request's body
   * and intercept request from going to wire.
   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
   */
  return _createClass(InnerBatchRequest, [{
    key: "createPipeline",
    value: function createPipeline(credential) {
      var corePipeline = (0, _coreRestPipeline.createEmptyPipeline)();
      corePipeline.addPolicy((0, _coreClient.serializationPolicy)({
        stringifyXML: _coreXml.stringifyXML,
        serializerOptions: {
          xml: {
            xmlCharKey: "#"
          }
        }
      }), {
        phase: "Serialize"
      });
      // Use batch header filter policy to exclude unnecessary headers
      corePipeline.addPolicy(batchHeaderFilterPolicy());
      // Use batch assemble policy to assemble request and intercept request from going to wire
      corePipeline.addPolicy(batchRequestAssemblePolicy(this), {
        afterPhase: "Sign"
      });
      if ((0, _coreAuth.isTokenCredential)(credential)) {
        corePipeline.addPolicy((0, _coreRestPipeline.bearerTokenAuthenticationPolicy)({
          credential: credential,
          scopes: _constants.StorageOAuthScopes,
          challengeCallbacks: {
            authorizeRequestOnChallenge: _coreClient.authorizeRequestOnTenantChallenge
          }
        }), {
          phase: "Sign"
        });
      } else if (credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential) {
        corePipeline.addPolicy((0, _StorageSharedKeyCredentialPolicyV.storageSharedKeyCredentialPolicy)({
          accountName: credential.accountName,
          accountKey: credential.accountKey
        }), {
          phase: "Sign"
        });
      }
      var pipeline = new _Pipeline.Pipeline([]);
      // attach the v2 pipeline to this one
      pipeline._credential = credential;
      pipeline._corePipeline = corePipeline;
      return pipeline;
    }
  }, {
    key: "appendSubRequestToBody",
    value: function appendSubRequestToBody(request) {
      // Start to assemble sub request
      this.body += [this.subRequestPrefix, // sub request constant prefix
      "".concat(_constants.HeaderConstants.CONTENT_ID, ": ").concat(this.operationCount),
      // sub request's content ID
      "", // empty line after sub request's content ID
      "".concat(request.method.toString(), " ").concat((0, _utils.getURLPathAndQuery)(request.url), " ").concat(_constants.HTTP_VERSION_1_1).concat(_constants.HTTP_LINE_ENDING) // sub request start line with method
      ].join(_constants.HTTP_LINE_ENDING);
      var _iterator = _createForOfIteratorHelper(request.headers),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
            name = _step$value[0],
            value = _step$value[1];
          this.body += "".concat(name, ": ").concat(value).concat(_constants.HTTP_LINE_ENDING);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.body += _constants.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line
      // No body to assemble for current batch request support
      // End to assemble sub request
    }
  }, {
    key: "preAddSubRequest",
    value: function preAddSubRequest(subRequest) {
      if (this.operationCount >= _constants.BATCH_MAX_REQUEST) {
        throw new RangeError("Cannot exceed ".concat(_constants.BATCH_MAX_REQUEST, " sub requests in a single batch"));
      }
      // Fast fail if url for sub request is invalid
      var path = (0, _utils.getURLPath)(subRequest.url);
      if (!path || path === "") {
        throw new RangeError("Invalid url for sub request: '".concat(subRequest.url, "'"));
      }
    }
  }, {
    key: "postAddSubRequest",
    value: function postAddSubRequest(subRequest) {
      this.subRequests.set(this.operationCount, subRequest);
      this.operationCount++;
    }
    // Return the http request body with assembling the ending line to the sub request body.
  }, {
    key: "getHttpRequestBody",
    value: function getHttpRequestBody() {
      return "".concat(this.body).concat(this.batchRequestEnding).concat(_constants.HTTP_LINE_ENDING);
    }
  }, {
    key: "getMultipartContentType",
    value: function getMultipartContentType() {
      return this.multipartContentType;
    }
  }, {
    key: "getSubRequests",
    value: function getSubRequests() {
      return this.subRequests;
    }
  }]);
}();
function batchRequestAssemblePolicy(batchRequest) {
  return {
    name: "batchRequestAssemblePolicy",
    sendRequest: function sendRequest(request) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              batchRequest.appendSubRequestToBody(request);
              return _context8.abrupt("return", {
                request: request,
                status: 200,
                headers: (0, _coreRestPipeline.createHttpHeaders)()
              });
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }))();
    }
  };
}
function batchHeaderFilterPolicy() {
  return {
    name: "batchHeaderFilterPolicy",
    sendRequest: function sendRequest(request, next) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var xMsHeaderName, _iterator2, _step2, _step2$value, name;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              xMsHeaderName = "";
              _iterator2 = _createForOfIteratorHelper(request.headers);
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  _step2$value = _slicedToArray(_step2.value, 1), name = _step2$value[0];
                  if ((0, _utils.iEqual)(name, _constants.HeaderConstants.X_MS_VERSION)) {
                    xMsHeaderName = name;
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              if (xMsHeaderName !== "") {
                request.headers.delete(xMsHeaderName); // The subrequests should not have the x-ms-version header.
              }
              return _context9.abrupt("return", next(request));
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }))();
    }
  };
}
},{"@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","@azure/core-auth":"node_modules/@azure/core-auth/dist/browser/index.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./utils/Mutex":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","@azure/core-xml":"node_modules/@azure/core-xml/dist/browser/index.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","@azure/core-client":"node_modules/@azure/core-client/dist/browser/index.js","./policies/StorageSharedKeyCredentialPolicyV2":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBatchClient = void 0;
var _BatchResponseParser = require("./BatchResponseParser");
var _BatchUtils = require("./BatchUtils");
var _BlobBatch = require("./BlobBatch");
var _tracing = require("./utils/tracing");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _StorageContextClient = require("./StorageContextClient");
var _Pipeline = require("./Pipeline");
var _utils = require("./utils/utils.common");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
 */
var BlobBatchClient = exports.BlobBatchClient = /*#__PURE__*/function () {
  function BlobBatchClient(url, credentialOrPipeline,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    _classCallCheck(this, BlobBatchClient);
    var pipeline;
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (!credentialOrPipeline) {
      // no credential provided
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else {
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
    }
    var storageClientContext = new _StorageContextClient.StorageContextClient(url, (0, _Pipeline.getCoreClientOptions)(pipeline));
    var path = (0, _utils.getURLPath)(url);
    if (path && path !== "/") {
      // Container scoped.
      this.serviceOrContainerContext = storageClientContext.container;
    } else {
      this.serviceOrContainerContext = storageClientContext.service;
    }
  }
  /**
   * Creates a {@link BlobBatch}.
   * A BlobBatch represents an aggregated set of operations on blobs.
   */
  return _createClass(BlobBatchClient, [{
    key: "createBatch",
    value: function createBatch() {
      return new _BlobBatch.BlobBatch();
    }
  }, {
    key: "deleteBlobs",
    value: function () {
      var _deleteBlobs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(urlsOrBlobClients, credentialOrOptions,
      // Legacy, no fix for eslint error without breaking. Disable it for this interface.
      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var batch, _iterator, _step, urlOrBlobClient;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              batch = new _BlobBatch.BlobBatch();
              _iterator = _createForOfIteratorHelper(urlsOrBlobClients);
              _context.prev = 2;
              _iterator.s();
            case 4:
              if ((_step = _iterator.n()).done) {
                _context.next = 15;
                break;
              }
              urlOrBlobClient = _step.value;
              if (!(typeof urlOrBlobClient === "string")) {
                _context.next = 11;
                break;
              }
              _context.next = 9;
              return batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);
            case 9:
              _context.next = 13;
              break;
            case 11:
              _context.next = 13;
              return batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
            case 13:
              _context.next = 4;
              break;
            case 15:
              _context.next = 20;
              break;
            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](2);
              _iterator.e(_context.t0);
            case 20:
              _context.prev = 20;
              _iterator.f();
              return _context.finish(20);
            case 23:
              return _context.abrupt("return", this.submitBatch(batch));
            case 24:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 17, 20, 23]]);
      }));
      function deleteBlobs(_x, _x2, _x3) {
        return _deleteBlobs.apply(this, arguments);
      }
      return deleteBlobs;
    }()
  }, {
    key: "setBlobsAccessTier",
    value: function () {
      var _setBlobsAccessTier = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urlsOrBlobClients, credentialOrTier, tierOrOptions,
      // Legacy, no fix for eslint error without breaking. Disable it for this interface.
      /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
      options) {
        var batch, _iterator2, _step2, urlOrBlobClient;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              batch = new _BlobBatch.BlobBatch();
              _iterator2 = _createForOfIteratorHelper(urlsOrBlobClients);
              _context2.prev = 2;
              _iterator2.s();
            case 4:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 15;
                break;
              }
              urlOrBlobClient = _step2.value;
              if (!(typeof urlOrBlobClient === "string")) {
                _context2.next = 11;
                break;
              }
              _context2.next = 9;
              return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);
            case 9:
              _context2.next = 13;
              break;
            case 11:
              _context2.next = 13;
              return batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
            case 13:
              _context2.next = 4;
              break;
            case 15:
              _context2.next = 20;
              break;
            case 17:
              _context2.prev = 17;
              _context2.t0 = _context2["catch"](2);
              _iterator2.e(_context2.t0);
            case 20:
              _context2.prev = 20;
              _iterator2.f();
              return _context2.finish(20);
            case 23:
              return _context2.abrupt("return", this.submitBatch(batch));
            case 24:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[2, 17, 20, 23]]);
      }));
      function setBlobsAccessTier(_x4, _x5, _x6, _x7) {
        return _setBlobsAccessTier.apply(this, arguments);
      }
      return setBlobsAccessTier;
    }()
    /**
     * Submit batch request which consists of multiple subrequests.
     *
     * Get `blobBatchClient` and other details before running the snippets.
     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
     *
     * Example usage:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.deleteBlob(urlInString0, credential0);
     * await batchRequest.deleteBlob(urlInString1, credential1, {
     *  deleteSnapshots: "include"
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * Example using a lease:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
     * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
     *  conditions: { leaseId: leaseId }
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @param batchRequest - A set of Delete or SetTier operations.
     * @param options -
     */
  }, {
    key: "submitBatch",
    value: (function () {
      var _submitBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(batchRequest) {
        var _this = this;
        var options,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
              if (!(!batchRequest || batchRequest.getSubRequests().size === 0)) {
                _context4.next = 3;
                break;
              }
              throw new RangeError("Batch request should contain one or more sub requests.");
            case 3:
              return _context4.abrupt("return", _tracing.tracingClient.withSpan("BlobBatchClient-submitBatch", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(updatedOptions) {
                  var batchRequestBody, rawBatchResponse, batchResponseParser, responseSummary, res;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.
                        _context3.t0 = _utils.assertResponse;
                        _context3.next = 4;
                        return _this.serviceOrContainerContext.submitBatch((0, _BatchUtils.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions));
                      case 4:
                        _context3.t1 = _context3.sent;
                        rawBatchResponse = (0, _context3.t0)(_context3.t1);
                        // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).
                        batchResponseParser = new _BatchResponseParser.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
                        _context3.next = 9;
                        return batchResponseParser.parseBatchResponse();
                      case 9:
                        responseSummary = _context3.sent;
                        res = {
                          _response: rawBatchResponse._response,
                          contentType: rawBatchResponse.contentType,
                          errorCode: rawBatchResponse.errorCode,
                          requestId: rawBatchResponse.requestId,
                          clientRequestId: rawBatchResponse.clientRequestId,
                          version: rawBatchResponse.version,
                          subResponses: responseSummary.subResponses,
                          subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
                          subResponsesFailedCount: responseSummary.subResponsesFailedCount
                        };
                        return _context3.abrupt("return", res);
                      case 12:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function (_x9) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function submitBatch(_x8) {
        return _submitBatch.apply(this, arguments);
      }
      return submitBatch;
    }())
  }]);
}();
},{"./BatchResponseParser":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js","./BatchUtils":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js","./BlobBatch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./StorageContextClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js":[function(require,module,exports) {
var define;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerClient = void 0;
var _tslib = require("tslib");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreUtil = require("@azure/core-util");
var _coreAuth = require("@azure/core-auth");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _Pipeline = require("./Pipeline");
var _StorageClient2 = require("./StorageClient");
var _tracing = require("./utils/tracing");
var _utils = require("./utils/utils.common");
var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");
var _BlobLeaseClient = require("./BlobLeaseClient");
var _Clients = require("./Clients");
var _BlobBatchClient = require("./BlobBatchClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
/**
 * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.
 */
var ContainerClient = exports.ContainerClient = /*#__PURE__*/function (_StorageClient) {
  function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this;
    _classCallCheck(this, ContainerClient);
    var pipeline;
    var url;
    options = options || {};
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipelineOrContainerName)) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreUtil.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName parameter");
    }
    _this = _callSuper(this, ContainerClient, [url, pipeline]);
    _this._containerName = _this.getContainerNameFromUrl();
    _this.containerContext = _this.storageClientContext.container;
    return _this;
  }
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, the operation fails.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
   *
   * @param options - Options to Container Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * const createContainerResponse = await containerClient.create();
   * console.log("Container was created successfully", createContainerResponse.requestId);
   * ```
   */
  _inherits(ContainerClient, _StorageClient);
  return _createClass(ContainerClient, [{
    key: "containerName",
    get:
    /**
     * The name of the container.
     */
    function get() {
      return this._containerName;
    }
  }, {
    key: "create",
    value: (function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this2 = this;
        var options,
          _args2 = arguments;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
              return _context2.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-create", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = _utils.assertResponse;
                        _context.next = 3;
                        return _this2.containerContext.create(updatedOptions);
                      case 3:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", (0, _context.t0)(_context.t1));
                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function create() {
        return _create.apply(this, arguments);
      }
      return create;
    }()
    /**
     * Creates a new container under the specified account. If the container with
     * the same name already exists, it is not changed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
     *
     * @param options -
     */
    )
  }, {
    key: "createIfNotExists",
    value: (function () {
      var _createIfNotExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var _this3 = this;
        var options,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
              return _context4.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-createIfNotExists", options, /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(updatedOptions) {
                  var _a, _b, res;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.prev = 0;
                        _context3.next = 3;
                        return _this3.create(updatedOptions);
                      case 3:
                        res = _context3.sent;
                        return _context3.abrupt("return", Object.assign(Object.assign({
                          succeeded: true
                        }, res), {
                          _response: res._response
                        }));
                      case 7:
                        _context3.prev = 7;
                        _context3.t0 = _context3["catch"](0);
                        if (!(((_a = _context3.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerAlreadyExists")) {
                          _context3.next = 13;
                          break;
                        }
                        return _context3.abrupt("return", Object.assign(Object.assign({
                          succeeded: false
                        }, (_b = _context3.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                          _response: _context3.t0.response
                        }));
                      case 13:
                        throw _context3.t0;
                      case 14:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3, null, [[0, 7]]);
                }));
                return function (_x2) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function createIfNotExists() {
        return _createIfNotExists.apply(this, arguments);
      }
      return createIfNotExists;
    }()
    /**
     * Returns true if the Azure container resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing container might be deleted by other clients or
     * applications. Vice versa new containers with the same name might be added by other clients or
     * applications after this function completes.
     *
     * @param options -
     */
    )
  }, {
    key: "exists",
    value: (function () {
      var _exists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var _this4 = this;
        var options,
          _args6 = arguments;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
              return _context6.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-exists", options, /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.prev = 0;
                        _context5.next = 3;
                        return _this4.getProperties({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        return _context5.abrupt("return", true);
                      case 6:
                        _context5.prev = 6;
                        _context5.t0 = _context5["catch"](0);
                        if (!(_context5.t0.statusCode === 404)) {
                          _context5.next = 10;
                          break;
                        }
                        return _context5.abrupt("return", false);
                      case 10:
                        throw _context5.t0;
                      case 11:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5, null, [[0, 6]]);
                }));
                return function (_x3) {
                  return _ref3.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function exists() {
        return _exists.apply(this, arguments);
      }
      return exists;
    }()
    /**
     * Creates a {@link BlobClient}
     *
     * @param blobName - A blob name
     * @returns A new BlobClient object for the given blob name.
     */
    )
  }, {
    key: "getBlobClient",
    value: function getBlobClient(blobName) {
      return new _Clients.BlobClient((0, _utils.appendToURLPath)(this.url, (0, _utils.EscapePath)(blobName)), this.pipeline);
    }
    /**
     * Creates an {@link AppendBlobClient}
     *
     * @param blobName - An append blob name
     */
  }, {
    key: "getAppendBlobClient",
    value: function getAppendBlobClient(blobName) {
      return new _Clients.AppendBlobClient((0, _utils.appendToURLPath)(this.url, (0, _utils.EscapePath)(blobName)), this.pipeline);
    }
    /**
     * Creates a {@link BlockBlobClient}
     *
     * @param blobName - A block blob name
     *
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     *
     * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */
  }, {
    key: "getBlockBlobClient",
    value: function getBlockBlobClient(blobName) {
      return new _Clients.BlockBlobClient((0, _utils.appendToURLPath)(this.url, (0, _utils.EscapePath)(blobName)), this.pipeline);
    }
    /**
     * Creates a {@link PageBlobClient}
     *
     * @param blobName - A page blob name
     */
  }, {
    key: "getPageBlobClient",
    value: function getPageBlobClient(blobName) {
      return new _Clients.PageBlobClient((0, _utils.appendToURLPath)(this.url, (0, _utils.EscapePath)(blobName)), this.pipeline);
    }
    /**
     * Returns all user-defined metadata and system properties for the specified
     * container. The data returned does not include the container's list of blobs.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param options - Options to Container Get Properties operation.
     */
  }, {
    key: "getProperties",
    value: (function () {
      var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var _this5 = this;
        var options,
          _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context8.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-getProperties", options, /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                    while (1) switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.t0 = _utils.assertResponse;
                        _context7.next = 3;
                        return _this5.containerContext.getProperties(Object.assign(Object.assign({
                          abortSignal: options.abortSignal
                        }, options.conditions), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        _context7.t1 = _context7.sent;
                        return _context7.abrupt("return", (0, _context7.t0)(_context7.t1));
                      case 5:
                      case "end":
                        return _context7.stop();
                    }
                  }, _callee7);
                }));
                return function (_x4) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function getProperties() {
        return _getProperties.apply(this, arguments);
      }
      return getProperties;
    }()
    /**
     * Marks the specified container for deletion. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param options - Options to Container Delete operation.
     */
    )
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var _this6 = this;
        var options,
          _args10 = arguments;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context10.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-delete", options, /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                    while (1) switch (_context9.prev = _context9.next) {
                      case 0:
                        _context9.t0 = _utils.assertResponse;
                        _context9.next = 3;
                        return _this6.containerContext.delete({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context9.t1 = _context9.sent;
                        return _context9.abrupt("return", (0, _context9.t0)(_context9.t1));
                      case 5:
                      case "end":
                        return _context9.stop();
                    }
                  }, _callee9);
                }));
                return function (_x5) {
                  return _ref5.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
    /**
     * Marks the specified container for deletion if it exists. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param options - Options to Container Delete operation.
     */
    )
  }, {
    key: "deleteIfExists",
    value: (function () {
      var _deleteIfExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var _this7 = this;
        var options,
          _args12 = arguments;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
              return _context12.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-deleteIfExists", options, /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(updatedOptions) {
                  var _a, _b, res;
                  return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                    while (1) switch (_context11.prev = _context11.next) {
                      case 0:
                        _context11.prev = 0;
                        _context11.next = 3;
                        return _this7.delete(updatedOptions);
                      case 3:
                        res = _context11.sent;
                        return _context11.abrupt("return", Object.assign(Object.assign({
                          succeeded: true
                        }, res), {
                          _response: res._response
                        }));
                      case 7:
                        _context11.prev = 7;
                        _context11.t0 = _context11["catch"](0);
                        if (!(((_a = _context11.t0.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerNotFound")) {
                          _context11.next = 11;
                          break;
                        }
                        return _context11.abrupt("return", Object.assign(Object.assign({
                          succeeded: false
                        }, (_b = _context11.t0.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                          _response: _context11.t0.response
                        }));
                      case 11:
                        throw _context11.t0;
                      case 12:
                      case "end":
                        return _context11.stop();
                    }
                  }, _callee11, null, [[0, 7]]);
                }));
                return function (_x6) {
                  return _ref6.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function deleteIfExists() {
        return _deleteIfExists.apply(this, arguments);
      }
      return deleteIfExists;
    }()
    /**
     * Sets one or more user-defined name-value pairs for the specified container.
     *
     * If no option provided, or no metadata defined in the parameter, the container
     * metadata will be removed.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
     *
     * @param metadata - Replace existing metadata with this value.
     *                            If no value provided the existing metadata will be removed.
     * @param options - Options to Container Set Metadata operation.
     */
    )
  }, {
    key: "setMetadata",
    value: (function () {
      var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(metadata) {
        var _this8 = this;
        var options,
          _args14 = arguments;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
              if (!options.conditions) {
                options.conditions = {};
              }
              if (!options.conditions.ifUnmodifiedSince) {
                _context14.next = 4;
                break;
              }
              throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
            case 4:
              return _context14.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-setMetadata", options, /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                    while (1) switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.t0 = _utils.assertResponse;
                        _context13.next = 3;
                        return _this8.containerContext.setMetadata({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          metadata: metadata,
                          modifiedAccessConditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context13.t1 = _context13.sent;
                        return _context13.abrupt("return", (0, _context13.t0)(_context13.t1));
                      case 5:
                      case "end":
                        return _context13.stop();
                    }
                  }, _callee13);
                }));
                return function (_x8) {
                  return _ref7.apply(this, arguments);
                };
              }()));
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function setMetadata(_x7) {
        return _setMetadata.apply(this, arguments);
      }
      return setMetadata;
    }()
    /**
     * Gets the permissions for the specified container. The permissions indicate
     * whether container data may be accessed publicly.
     *
     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
     * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
     *
     * @param options - Options to Container Get Access Policy operation.
     */
    )
  }, {
    key: "getAccessPolicy",
    value: (function () {
      var _getAccessPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        var _this9 = this;
        var options,
          _args16 = arguments;
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
              if (!options.conditions) {
                options.conditions = {};
              }
              return _context16.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-getAccessPolicy", options, /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(updatedOptions) {
                  var response, res, _iterator, _step, identifier, accessPolicy;
                  return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                    while (1) switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.t0 = _utils.assertResponse;
                        _context15.next = 3;
                        return _this9.containerContext.getAccessPolicy({
                          abortSignal: options.abortSignal,
                          leaseAccessConditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context15.t1 = _context15.sent;
                        response = (0, _context15.t0)(_context15.t1);
                        res = {
                          _response: response._response,
                          blobPublicAccess: response.blobPublicAccess,
                          date: response.date,
                          etag: response.etag,
                          errorCode: response.errorCode,
                          lastModified: response.lastModified,
                          requestId: response.requestId,
                          clientRequestId: response.clientRequestId,
                          signedIdentifiers: [],
                          version: response.version
                        };
                        _iterator = _createForOfIteratorHelper(response);
                        try {
                          for (_iterator.s(); !(_step = _iterator.n()).done;) {
                            identifier = _step.value;
                            accessPolicy = undefined;
                            if (identifier.accessPolicy) {
                              accessPolicy = {
                                permissions: identifier.accessPolicy.permissions
                              };
                              if (identifier.accessPolicy.expiresOn) {
                                accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
                              }
                              if (identifier.accessPolicy.startsOn) {
                                accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
                              }
                            }
                            res.signedIdentifiers.push({
                              accessPolicy: accessPolicy,
                              id: identifier.id
                            });
                          }
                        } catch (err) {
                          _iterator.e(err);
                        } finally {
                          _iterator.f();
                        }
                        return _context15.abrupt("return", res);
                      case 9:
                      case "end":
                        return _context15.stop();
                    }
                  }, _callee15);
                }));
                return function (_x9) {
                  return _ref8.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function getAccessPolicy() {
        return _getAccessPolicy.apply(this, arguments);
      }
      return getAccessPolicy;
    }()
    /**
     * Sets the permissions for the specified container. The permissions indicate
     * whether blobs in a container may be accessed publicly.
     *
     * When you set permissions for a container, the existing permissions are replaced.
     * If no access or containerAcl provided, the existing container ACL will be
     * removed.
     *
     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
     * During this interval, a shared access signature that is associated with the stored access policy will
     * fail with status code 403 (Forbidden), until the access policy becomes active.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
     *
     * @param access - The level of public access to data in the container.
     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
     * @param options - Options to Container Set Access Policy operation.
     */
    )
  }, {
    key: "setAccessPolicy",
    value: (function () {
      var _setAccessPolicy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(access, containerAcl) {
        var _this10 = this;
        var options,
          _args18 = arguments;
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};
              options.conditions = options.conditions || {};
              return _context18.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-setAccessPolicy", options, /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(updatedOptions) {
                  var acl, _iterator2, _step2, identifier;
                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                    while (1) switch (_context17.prev = _context17.next) {
                      case 0:
                        acl = [];
                        _iterator2 = _createForOfIteratorHelper(containerAcl || []);
                        try {
                          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                            identifier = _step2.value;
                            acl.push({
                              accessPolicy: {
                                expiresOn: identifier.accessPolicy.expiresOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.expiresOn) : "",
                                permissions: identifier.accessPolicy.permissions,
                                startsOn: identifier.accessPolicy.startsOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.startsOn) : ""
                              },
                              id: identifier.id
                            });
                          }
                        } catch (err) {
                          _iterator2.e(err);
                        } finally {
                          _iterator2.f();
                        }
                        _context17.t0 = _utils.assertResponse;
                        _context17.next = 6;
                        return _this10.containerContext.setAccessPolicy({
                          abortSignal: options.abortSignal,
                          access: access,
                          containerAcl: acl,
                          leaseAccessConditions: options.conditions,
                          modifiedAccessConditions: options.conditions,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 6:
                        _context17.t1 = _context17.sent;
                        return _context17.abrupt("return", (0, _context17.t0)(_context17.t1));
                      case 8:
                      case "end":
                        return _context17.stop();
                    }
                  }, _callee17);
                }));
                return function (_x12) {
                  return _ref9.apply(this, arguments);
                };
              }()));
            case 3:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function setAccessPolicy(_x10, _x11) {
        return _setAccessPolicy.apply(this, arguments);
      }
      return setAccessPolicy;
    }()
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the container.
     *
     * @param proposeLeaseId - Initial proposed lease Id.
     * @returns A new BlobLeaseClient object for managing leases on the container.
     */
    )
  }, {
    key: "getBlobLeaseClient",
    value: function getBlobLeaseClient(proposeLeaseId) {
      return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
    }
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     *
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
     * performance with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param blobName - Name of the block blob to create or update.
     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param options - Options to configure the Block Blob Upload operation.
     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
     */
  }, {
    key: "uploadBlockBlob",
    value: (function () {
      var _uploadBlockBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(blobName, body, contentLength) {
        var _this11 = this;
        var options,
          _args20 = arguments;
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              options = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
              return _context20.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-uploadBlockBlob", options, /*#__PURE__*/function () {
                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(updatedOptions) {
                  var blockBlobClient, response;
                  return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                    while (1) switch (_context19.prev = _context19.next) {
                      case 0:
                        blockBlobClient = _this11.getBlockBlobClient(blobName);
                        _context19.next = 3;
                        return blockBlobClient.upload(body, contentLength, updatedOptions);
                      case 3:
                        response = _context19.sent;
                        return _context19.abrupt("return", {
                          blockBlobClient: blockBlobClient,
                          response: response
                        });
                      case 5:
                      case "end":
                        return _context19.stop();
                    }
                  }, _callee19);
                }));
                return function (_x16) {
                  return _ref10.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function uploadBlockBlob(_x13, _x14, _x15) {
        return _uploadBlockBlob.apply(this, arguments);
      }
      return uploadBlockBlob;
    }()
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param blobName -
     * @param options - Options to Blob Delete operation.
     * @returns Block blob deletion response data.
     */
    )
  }, {
    key: "deleteBlob",
    value: (function () {
      var _deleteBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(blobName) {
        var _this12 = this;
        var options,
          _args22 = arguments;
        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              options = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : {};
              return _context22.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-deleteBlob", options, /*#__PURE__*/function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(updatedOptions) {
                  var blobClient;
                  return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                    while (1) switch (_context21.prev = _context21.next) {
                      case 0:
                        blobClient = _this12.getBlobClient(blobName);
                        if (options.versionId) {
                          blobClient = blobClient.withVersion(options.versionId);
                        }
                        return _context21.abrupt("return", blobClient.delete(updatedOptions));
                      case 3:
                      case "end":
                        return _context21.stop();
                    }
                  }, _callee21);
                }));
                return function (_x18) {
                  return _ref11.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context22.stop();
          }
        }, _callee22);
      }));
      function deleteBlob(_x17) {
        return _deleteBlob.apply(this, arguments);
      }
      return deleteBlob;
    }()
    /**
     * listBlobFlatSegment returns a single segment of blobs starting from the
     * specified Marker. Use an empty Marker to start enumeration from the beginning.
     * After getting a segment, process it, and then call listBlobsFlatSegment again
     * (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
     * @param options - Options to Container List Blob Flat Segment operation.
     */
    )
  }, {
    key: "listBlobFlatSegment",
    value: (function () {
      var _listBlobFlatSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(marker) {
        var _this13 = this;
        var options,
          _args24 = arguments;
        return _regeneratorRuntime().wrap(function _callee24$(_context24) {
          while (1) switch (_context24.prev = _context24.next) {
            case 0:
              options = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};
              return _context24.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-listBlobFlatSegment", options, /*#__PURE__*/function () {
                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(updatedOptions) {
                  var response, wrappedResponse;
                  return _regeneratorRuntime().wrap(function _callee23$(_context23) {
                    while (1) switch (_context23.prev = _context23.next) {
                      case 0:
                        _context23.t0 = _utils.assertResponse;
                        _context23.next = 3;
                        return _this13.containerContext.listBlobFlatSegment(Object.assign(Object.assign({
                          marker: marker
                        }, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        _context23.t1 = _context23.sent;
                        response = (0, _context23.t0)(_context23.t1);
                        wrappedResponse = Object.assign(Object.assign({}, response), {
                          _response: Object.assign(Object.assign({}, response._response), {
                            parsedBody: (0, _utils.ConvertInternalResponseOfListBlobFlat)(response._response.parsedBody)
                          }),
                          segment: Object.assign(Object.assign({}, response.segment), {
                            blobItems: response.segment.blobItems.map(function (blobItemInternal) {
                              var blobItem = Object.assign(Object.assign({}, blobItemInternal), {
                                name: (0, _utils.BlobNameToString)(blobItemInternal.name),
                                tags: (0, _utils.toTags)(blobItemInternal.blobTags),
                                objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata)
                              });
                              return blobItem;
                            })
                          })
                        });
                        return _context23.abrupt("return", wrappedResponse);
                      case 7:
                      case "end":
                        return _context23.stop();
                    }
                  }, _callee23);
                }));
                return function (_x20) {
                  return _ref12.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context24.stop();
          }
        }, _callee24);
      }));
      function listBlobFlatSegment(_x19) {
        return _listBlobFlatSegment.apply(this, arguments);
      }
      return listBlobFlatSegment;
    }()
    /**
     * listBlobHierarchySegment returns a single segment of blobs starting from
     * the specified Marker. Use an empty Marker to start enumeration from the
     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
     * again (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
     * @param options - Options to Container List Blob Hierarchy Segment operation.
     */
    )
  }, {
    key: "listBlobHierarchySegment",
    value: (function () {
      var _listBlobHierarchySegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(delimiter, marker) {
        var _this14 = this;
        var options,
          _args26 = arguments;
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              options = _args26.length > 2 && _args26[2] !== undefined ? _args26[2] : {};
              return _context26.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-listBlobHierarchySegment", options, /*#__PURE__*/function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(updatedOptions) {
                  var _a, response, wrappedResponse;
                  return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                    while (1) switch (_context25.prev = _context25.next) {
                      case 0:
                        _context25.t0 = _utils.assertResponse;
                        _context25.next = 3;
                        return _this14.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({
                          marker: marker
                        }, options), {
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        _context25.t1 = _context25.sent;
                        response = (0, _context25.t0)(_context25.t1);
                        wrappedResponse = Object.assign(Object.assign({}, response), {
                          _response: Object.assign(Object.assign({}, response._response), {
                            parsedBody: (0, _utils.ConvertInternalResponseOfListBlobHierarchy)(response._response.parsedBody)
                          }),
                          segment: Object.assign(Object.assign({}, response.segment), {
                            blobItems: response.segment.blobItems.map(function (blobItemInternal) {
                              var blobItem = Object.assign(Object.assign({}, blobItemInternal), {
                                name: (0, _utils.BlobNameToString)(blobItemInternal.name),
                                tags: (0, _utils.toTags)(blobItemInternal.blobTags),
                                objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata)
                              });
                              return blobItem;
                            }),
                            blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map(function (blobPrefixInternal) {
                              var blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), {
                                name: (0, _utils.BlobNameToString)(blobPrefixInternal.name)
                              });
                              return blobPrefix;
                            })
                          })
                        });
                        return _context25.abrupt("return", wrappedResponse);
                      case 7:
                      case "end":
                        return _context25.stop();
                    }
                  }, _callee25);
                }));
                return function (_x23) {
                  return _ref13.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function listBlobHierarchySegment(_x21, _x22) {
        return _listBlobHierarchySegment.apply(this, arguments);
      }
      return listBlobHierarchySegment;
    }()
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
     *
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to list blobs operation.
     */
    )
  }, {
    key: "listSegments",
    value: function listSegments(marker_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listSegments_1(marker) {
        var _this15 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
          var listBlobsFlatSegmentResponse;
          return _regeneratorRuntime().wrap(function _callee27$(_context27) {
            while (1) switch (_context27.prev = _context27.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context27.next = 14;
                  break;
                }
              case 1:
                _context27.next = 3;
                return (0, _tslib.__await)(_this15.listBlobFlatSegment(marker, options));
              case 3:
                listBlobsFlatSegmentResponse = _context27.sent;
                marker = listBlobsFlatSegmentResponse.continuationToken;
                _context27.t0 = _tslib.__await;
                _context27.next = 8;
                return (0, _tslib.__await)(listBlobsFlatSegmentResponse);
              case 8:
                _context27.t1 = _context27.sent;
                _context27.next = 11;
                return (0, _context27.t0)(_context27.t1);
              case 11:
                _context27.next = 13;
                return _context27.sent;
              case 13:
                if (marker) {
                  _context27.next = 1;
                  break;
                }
              case 14:
              case "end":
                return _context27.stop();
            }
          }, _callee27);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator of {@link BlobItem} objects
     *
     * @param options - Options to list blobs operation.
     */
  }, {
    key: "listItems",
    value: function listItems() {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listItems_1() {
        var _this16 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
          var _a, e_1, _b, _c, marker, _d, _e, _f, listBlobsFlatSegmentResponse;
          return _regeneratorRuntime().wrap(function _callee28$(_context28) {
            while (1) switch (_context28.prev = _context28.next) {
              case 0:
                _context28.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this16.listSegments(marker, options));
              case 2:
                _context28.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context28.sent;
                _a = _f.done;
                if (_a) {
                  _context28.next = 18;
                  break;
                }
                _c = _f.value;
                _d = false;
                listBlobsFlatSegmentResponse = _c;
                _context28.t0 = _tslib.__await;
                return _context28.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)), "t1", 12);
              case 12:
                _context28.t2 = _context28.t1;
                _context28.next = 15;
                return (0, _context28.t0)(_context28.t2);
              case 15:
                _d = true;
                _context28.next = 2;
                break;
              case 18:
                _context28.next = 23;
                break;
              case 20:
                _context28.prev = 20;
                _context28.t3 = _context28["catch"](0);
                e_1 = {
                  error: _context28.t3
                };
              case 23:
                _context28.prev = 23;
                _context28.prev = 24;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context28.next = 28;
                  break;
                }
                _context28.next = 28;
                return (0, _tslib.__await)(_b.call(_e));
              case 28:
                _context28.prev = 28;
                if (!e_1) {
                  _context28.next = 31;
                  break;
                }
                throw e_1.error;
              case 31:
                return _context28.finish(28);
              case 32:
                return _context28.finish(23);
              case 33:
              case "end":
                return _context28.stop();
            }
          }, _callee28, null, [[0, 20, 23, 33], [24,, 28, 32]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to list all the blobs
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * // Get the containerClient before you run these snippets,
     * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
     * let i = 1;
     * for await (const blob of containerClient.listBlobsFlat()) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = containerClient.listBlobsFlat();
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     *
     * // Passing next marker as continuationToken
     *
     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * @param options - Options to list blobs.
     * @returns An asyncIterableIterator that supports paging.
     */
  }, {
    key: "listBlobsFlat",
    value: function listBlobsFlat() {
      var _this17 = this;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var include = [];
      if (options.includeCopy) {
        include.push("copy");
      }
      if (options.includeDeleted) {
        include.push("deleted");
      }
      if (options.includeMetadata) {
        include.push("metadata");
      }
      if (options.includeSnapshots) {
        include.push("snapshots");
      }
      if (options.includeVersions) {
        include.push("versions");
      }
      if (options.includeUncommitedBlobs) {
        include.push("uncommittedblobs");
      }
      if (options.includeTags) {
        include.push("tags");
      }
      if (options.includeDeletedWithVersions) {
        include.push("deletedwithversions");
      }
      if (options.includeImmutabilityPolicy) {
        include.push("immutabilitypolicy");
      }
      if (options.includeLegalHold) {
        include.push("legalhold");
      }
      if (options.prefix === "") {
        options.prefix = undefined;
      }
      var updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
        include: include
      } : {});
      // AsyncIterableIterator to iterate over blobs
      var iter = this.listItems(updatedOptions);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this17.listSegments(settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, updatedOptions));
      });
    }
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to list blobs operation.
     */
  }, {
    key: "listHierarchySegments",
    value: function listHierarchySegments(delimiter_1, marker_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listHierarchySegments_1(delimiter, marker) {
        var _this18 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
          var listBlobsHierarchySegmentResponse;
          return _regeneratorRuntime().wrap(function _callee29$(_context29) {
            while (1) switch (_context29.prev = _context29.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context29.next = 14;
                  break;
                }
              case 1:
                _context29.next = 3;
                return (0, _tslib.__await)(_this18.listBlobHierarchySegment(delimiter, marker, options));
              case 3:
                listBlobsHierarchySegmentResponse = _context29.sent;
                marker = listBlobsHierarchySegmentResponse.continuationToken;
                _context29.t0 = _tslib.__await;
                _context29.next = 8;
                return (0, _tslib.__await)(listBlobsHierarchySegmentResponse);
              case 8:
                _context29.t1 = _context29.sent;
                _context29.next = 11;
                return (0, _context29.t0)(_context29.t1);
              case 11:
                _context29.next = 13;
                return _context29.sent;
              case 13:
                if (marker) {
                  _context29.next = 1;
                  break;
                }
              case 14:
              case "end":
                return _context29.stop();
            }
          }, _callee29);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param options - Options to list blobs operation.
     */
  }, {
    key: "listItemsByHierarchy",
    value: function listItemsByHierarchy(delimiter_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listItemsByHierarchy_1(delimiter) {
        var _this19 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
          var _a, e_2, _b, _c, marker, _d, _e, _f, listBlobsHierarchySegmentResponse, segment, _iterator3, _step3, prefix, _iterator4, _step4, blob;
          return _regeneratorRuntime().wrap(function _callee30$(_context30) {
            while (1) switch (_context30.prev = _context30.next) {
              case 0:
                _context30.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this19.listHierarchySegments(delimiter, marker, options));
              case 2:
                _context30.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context30.sent;
                _a = _f.done;
                if (_a) {
                  _context30.next = 53;
                  break;
                }
                _c = _f.value;
                _d = false;
                listBlobsHierarchySegmentResponse = _c;
                segment = listBlobsHierarchySegmentResponse.segment;
                if (!segment.blobPrefixes) {
                  _context30.next = 31;
                  break;
                }
                _iterator3 = _createForOfIteratorHelper(segment.blobPrefixes);
                _context30.prev = 13;
                _iterator3.s();
              case 15:
                if ((_step3 = _iterator3.n()).done) {
                  _context30.next = 23;
                  break;
                }
                prefix = _step3.value;
                _context30.next = 19;
                return (0, _tslib.__await)(Object.assign({
                  kind: "prefix"
                }, prefix));
              case 19:
                _context30.next = 21;
                return _context30.sent;
              case 21:
                _context30.next = 15;
                break;
              case 23:
                _context30.next = 28;
                break;
              case 25:
                _context30.prev = 25;
                _context30.t0 = _context30["catch"](13);
                _iterator3.e(_context30.t0);
              case 28:
                _context30.prev = 28;
                _iterator3.f();
                return _context30.finish(28);
              case 31:
                _iterator4 = _createForOfIteratorHelper(segment.blobItems);
                _context30.prev = 32;
                _iterator4.s();
              case 34:
                if ((_step4 = _iterator4.n()).done) {
                  _context30.next = 42;
                  break;
                }
                blob = _step4.value;
                _context30.next = 38;
                return (0, _tslib.__await)(Object.assign({
                  kind: "blob"
                }, blob));
              case 38:
                _context30.next = 40;
                return _context30.sent;
              case 40:
                _context30.next = 34;
                break;
              case 42:
                _context30.next = 47;
                break;
              case 44:
                _context30.prev = 44;
                _context30.t1 = _context30["catch"](32);
                _iterator4.e(_context30.t1);
              case 47:
                _context30.prev = 47;
                _iterator4.f();
                return _context30.finish(47);
              case 50:
                _d = true;
                _context30.next = 2;
                break;
              case 53:
                _context30.next = 58;
                break;
              case 55:
                _context30.prev = 55;
                _context30.t2 = _context30["catch"](0);
                e_2 = {
                  error: _context30.t2
                };
              case 58:
                _context30.prev = 58;
                _context30.prev = 59;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context30.next = 63;
                  break;
                }
                _context30.next = 63;
                return (0, _tslib.__await)(_b.call(_e));
              case 63:
                _context30.prev = 63;
                if (!e_2) {
                  _context30.next = 66;
                  break;
                }
                throw e_2.error;
              case 66:
                return _context30.finish(63);
              case 67:
                return _context30.finish(58);
              case 68:
              case "end":
                return _context30.stop();
            }
          }, _callee30, null, [[0, 55, 58, 68], [13, 25, 28, 31], [32, 44, 47, 50], [59,, 63, 67]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to list all the blobs by hierarchy.
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * for await (const item of containerClient.listBlobsByHierarchy("/")) {
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}`);
     *   }
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
     * let entity = await iter.next();
     * while (!entity.done) {
     *   let item = entity.value;
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}`);
     *   }
     *   entity = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page");
     * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
     *   const segment = response.segment;
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a max page size:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
     *
     * let i = 1;
     * for await (const response of containerClient
     *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
     *   .byPage({ maxPageSize: 2 })) {
     *   console.log(`Page ${i++}`);
     *   const segment = response.segment;
     *
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param options - Options to list blobs operation.
     */
  }, {
    key: "listBlobsByHierarchy",
    value: function listBlobsByHierarchy(delimiter) {
      var _this20 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (delimiter === "") {
        throw new RangeError("delimiter should contain one or more characters");
      }
      var include = [];
      if (options.includeCopy) {
        include.push("copy");
      }
      if (options.includeDeleted) {
        include.push("deleted");
      }
      if (options.includeMetadata) {
        include.push("metadata");
      }
      if (options.includeSnapshots) {
        include.push("snapshots");
      }
      if (options.includeVersions) {
        include.push("versions");
      }
      if (options.includeUncommitedBlobs) {
        include.push("uncommittedblobs");
      }
      if (options.includeTags) {
        include.push("tags");
      }
      if (options.includeDeletedWithVersions) {
        include.push("deletedwithversions");
      }
      if (options.includeImmutabilityPolicy) {
        include.push("immutabilitypolicy");
      }
      if (options.includeLegalHold) {
        include.push("legalhold");
      }
      if (options.prefix === "") {
        options.prefix = undefined;
      }
      var updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
        include: include
      } : {});
      // AsyncIterableIterator to iterate over blob prefixes and blobs
      var iter = this.listItemsByHierarchy(delimiter, updatedOptions);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
            return _regeneratorRuntime().wrap(function _callee31$(_context31) {
              while (1) switch (_context31.prev = _context31.next) {
                case 0:
                  return _context31.abrupt("return", iter.next());
                case 1:
                case "end":
                  return _context31.stop();
              }
            }, _callee31);
          }))();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this20.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, updatedOptions));
      });
    }
    /**
     * The Filter Blobs operation enables callers to list blobs in the container whose tags
     * match a given search expression.
     *
     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                        The given expression must evaluate to true for a blob to be returned in the results.
     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */
  }, {
    key: "findBlobsByTagsSegment",
    value: (function () {
      var _findBlobsByTagsSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(tagFilterSqlExpression, marker) {
        var _this21 = this;
        var options,
          _args33 = arguments;
        return _regeneratorRuntime().wrap(function _callee33$(_context33) {
          while (1) switch (_context33.prev = _context33.next) {
            case 0:
              options = _args33.length > 2 && _args33[2] !== undefined ? _args33[2] : {};
              return _context33.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-findBlobsByTagsSegment", options, /*#__PURE__*/function () {
                var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(updatedOptions) {
                  var response, wrappedResponse;
                  return _regeneratorRuntime().wrap(function _callee32$(_context32) {
                    while (1) switch (_context32.prev = _context32.next) {
                      case 0:
                        _context32.t0 = _utils.assertResponse;
                        _context32.next = 3;
                        return _this21.containerContext.filterBlobs({
                          abortSignal: options.abortSignal,
                          where: tagFilterSqlExpression,
                          marker: marker,
                          maxPageSize: options.maxPageSize,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context32.t1 = _context32.sent;
                        response = (0, _context32.t0)(_context32.t1);
                        wrappedResponse = Object.assign(Object.assign({}, response), {
                          _response: response._response,
                          blobs: response.blobs.map(function (blob) {
                            var _a;
                            var tagValue = "";
                            if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {
                              tagValue = blob.tags.blobTagSet[0].value;
                            }
                            return Object.assign(Object.assign({}, blob), {
                              tags: (0, _utils.toTags)(blob.tags),
                              tagValue: tagValue
                            });
                          })
                        });
                        return _context32.abrupt("return", wrappedResponse);
                      case 7:
                      case "end":
                        return _context32.stop();
                    }
                  }, _callee32);
                }));
                return function (_x26) {
                  return _ref16.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context33.stop();
          }
        }, _callee33);
      }));
      function findBlobsByTagsSegment(_x24, _x25) {
        return _findBlobsByTagsSegment.apply(this, arguments);
      }
      return findBlobsByTagsSegment;
    }()
    /**
     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */
    )
  }, {
    key: "findBlobsByTagsSegments",
    value: function findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsSegments_1(tagFilterSqlExpression, marker) {
        var _this22 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
          var response;
          return _regeneratorRuntime().wrap(function _callee34$(_context34) {
            while (1) switch (_context34.prev = _context34.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context34.next = 11;
                  break;
                }
              case 1:
                _context34.next = 3;
                return (0, _tslib.__await)(_this22.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));
              case 3:
                response = _context34.sent;
                response.blobs = response.blobs || [];
                marker = response.continuationToken;
                _context34.next = 8;
                return (0, _tslib.__await)(response);
              case 8:
                _context34.next = 10;
                return _context34.sent;
              case 10:
                if (marker) {
                  _context34.next = 1;
                  break;
                }
              case 11:
              case "end":
                return _context34.stop();
            }
          }, _callee34);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator for blobs.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to findBlobsByTagsItems.
     */
  }, {
    key: "findBlobsByTagsItems",
    value: function findBlobsByTagsItems(tagFilterSqlExpression_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsItems_1(tagFilterSqlExpression) {
        var _this23 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
          var _a, e_3, _b, _c, marker, _d, _e, _f, segment;
          return _regeneratorRuntime().wrap(function _callee35$(_context35) {
            while (1) switch (_context35.prev = _context35.next) {
              case 0:
                _context35.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this23.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));
              case 2:
                _context35.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context35.sent;
                _a = _f.done;
                if (_a) {
                  _context35.next = 18;
                  break;
                }
                _c = _f.value;
                _d = false;
                segment = _c;
                _context35.t0 = _tslib.__await;
                return _context35.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.blobs)), "t1", 12);
              case 12:
                _context35.t2 = _context35.t1;
                _context35.next = 15;
                return (0, _context35.t0)(_context35.t2);
              case 15:
                _d = true;
                _context35.next = 2;
                break;
              case 18:
                _context35.next = 23;
                break;
              case 20:
                _context35.prev = 20;
                _context35.t3 = _context35["catch"](0);
                e_3 = {
                  error: _context35.t3
                };
              case 23:
                _context35.prev = 23;
                _context35.prev = 24;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context35.next = 28;
                  break;
                }
                _context35.next = 28;
                return (0, _tslib.__await)(_b.call(_e));
              case 28:
                _context35.prev = 28;
                if (!e_3) {
                  _context35.next = 31;
                  break;
                }
                throw e_3.error;
              case 31:
                return _context35.finish(28);
              case 32:
                return _context35.finish(23);
              case 33:
              case "end":
                return _context35.stop();
            }
          }, _callee35, null, [[0, 20, 23, 33], [24,, 28, 32]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to find all blobs with specified tag
     * under the specified container.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
     *   if (response.blobs) {
     *     for (const blob of response.blobs) {
     *       console.log(`Blob ${i++}: ${blob.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = containerClient
     *   .findBlobsByTags("tagkey='tagvalue'")
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *      console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to find blobs by tags.
     */
  }, {
    key: "findBlobsByTags",
    value: function findBlobsByTags(tagFilterSqlExpression) {
      var _this24 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // AsyncIterableIterator to iterate over blobs
      var listSegmentOptions = Object.assign({}, options);
      var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this24.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, listSegmentOptions));
      });
    }
    /**
     * The Get Account Information operation returns the sku name and account kind
     * for the specified account.
     * The Get Account Information operation is available on service versions beginning
     * with version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
     *
     * @param options - Options to the Service Get Account Info operation.
     * @returns Response data for the Service Get Account Info operation.
     */
  }, {
    key: "getAccountInfo",
    value: (function () {
      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
        var _this25 = this;
        var options,
          _args37 = arguments;
        return _regeneratorRuntime().wrap(function _callee37$(_context37) {
          while (1) switch (_context37.prev = _context37.next) {
            case 0:
              options = _args37.length > 0 && _args37[0] !== undefined ? _args37[0] : {};
              return _context37.abrupt("return", _tracing.tracingClient.withSpan("ContainerClient-getAccountInfo", options, /*#__PURE__*/function () {
                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee36$(_context36) {
                    while (1) switch (_context36.prev = _context36.next) {
                      case 0:
                        _context36.t0 = _utils.assertResponse;
                        _context36.next = 3;
                        return _this25.containerContext.getAccountInfo({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context36.t1 = _context36.sent;
                        return _context36.abrupt("return", (0, _context36.t0)(_context36.t1));
                      case 5:
                      case "end":
                        return _context36.stop();
                    }
                  }, _callee36);
                }));
                return function (_x27) {
                  return _ref18.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context37.stop();
          }
        }, _callee37);
      }));
      function getAccountInfo() {
        return _getAccountInfo.apply(this, arguments);
      }
      return getAccountInfo;
    }())
  }, {
    key: "getContainerNameFromUrl",
    value: function getContainerNameFromUrl() {
      var containerName;
      try {
        //  URL may look like the following
        // "https://myaccount.blob.core.windows.net/mycontainer?sasString";
        // "https://myaccount.blob.core.windows.net/mycontainer";
        // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`
        // http://localhost:10001/devstoreaccount1/containername
        var parsedUrl = new URL(this.url);
        if (parsedUrl.hostname.split(".")[1] === "blob") {
          // "https://myaccount.blob.core.windows.net/containername".
          // "https://customdomain.com/containername".
          // .getPath() -> /containername
          containerName = parsedUrl.pathname.split("/")[1];
        } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
          // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername
          // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername
          // .getPath() -> /devstoreaccount1/containername
          containerName = parsedUrl.pathname.split("/")[2];
        } else {
          // "https://customdomain.com/containername".
          // .getPath() -> /containername
          containerName = parsedUrl.pathname.split("/")[1];
        }
        // decode the encoded containerName - to get all the special characters that might be present in it
        containerName = decodeURIComponent(containerName);
        if (!containerName) {
          throw new Error("Provided containerName is invalid.");
        }
        return containerName;
      } catch (error) {
        throw new Error("Unable to extract containerName with provided information.");
      }
    }
    /**
     * Only available for ContainerClient constructed with a shared key credential.
     *
     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     * @param options - Optional parameters.
     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */
  }, {
    key: "generateSasUrl",
    value: function generateSasUrl(options) {
      var _this26 = this;
      return new Promise(function (resolve) {
        if (!(_this26.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
          throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
        }
        var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)(Object.assign({
          containerName: _this26._containerName
        }, options), _this26.credential).toString();
        resolve((0, _utils.appendToURLQuery)(_this26.url, sas));
      });
    }
    /**
     * Creates a BlobBatchClient object to conduct batch operations.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @returns A new BlobBatchClient object for this container.
     */
  }, {
    key: "getBlobBatchClient",
    value: function getBlobBatchClient() {
      return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
    }
  }]);
}(_StorageClient2.StorageClient);
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","@azure/core-auth":"node_modules/@azure/core-auth/dist/browser/index.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./sas/BlobSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASPermissions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the
 * values are set, this should be serialized with toString and set as the permissions field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var AccountSASPermissions = exports.AccountSASPermissions = /*#__PURE__*/function () {
  function AccountSASPermissions() {
    _classCallCheck(this, AccountSASPermissions);
    /**
     * Permission to read resources and list queues and tables granted.
     */
    this.read = false;
    /**
     * Permission to write resources granted.
     */
    this.write = false;
    /**
     * Permission to delete blobs and files granted.
     */
    this.delete = false;
    /**
     * Permission to delete versions granted.
     */
    this.deleteVersion = false;
    /**
     * Permission to list blob containers, blobs, shares, directories, and files granted.
     */
    this.list = false;
    /**
     * Permission to add messages, table entities, and append to blobs granted.
     */
    this.add = false;
    /**
     * Permission to create blobs and files granted.
     */
    this.create = false;
    /**
     * Permissions to update messages and table entities granted.
     */
    this.update = false;
    /**
     * Permission to get and delete messages granted.
     */
    this.process = false;
    /**
     * Specfies Tag access granted.
     */
    this.tag = false;
    /**
     * Permission to filter blobs.
     */
    this.filter = false;
    /**
     * Permission to set immutability policy.
     */
    this.setImmutabilityPolicy = false;
    /**
     * Specifies that Permanent Delete is permitted.
     */
    this.permanentDelete = false;
  }
  /**
   * Parse initializes the AccountSASPermissions fields from a string.
   *
   * @param permissions -
   */
  return _createClass(AccountSASPermissions, [{
    key: "toString",
    value:
    /**
     * Produces the SAS permissions string for an Azure Storage account.
     * Call this method to set AccountSASSignatureValues Permissions field.
     *
     * Using this method will guarantee the resource types are in
     * an order accepted by the service.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     */
    function toString() {
      // The order of the characters should be as specified here to ensure correctness:
      // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
      // Use a string array instead of string concatenating += operator for performance
      var permissions = [];
      if (this.read) {
        permissions.push("r");
      }
      if (this.write) {
        permissions.push("w");
      }
      if (this.delete) {
        permissions.push("d");
      }
      if (this.deleteVersion) {
        permissions.push("x");
      }
      if (this.filter) {
        permissions.push("f");
      }
      if (this.tag) {
        permissions.push("t");
      }
      if (this.list) {
        permissions.push("l");
      }
      if (this.add) {
        permissions.push("a");
      }
      if (this.create) {
        permissions.push("c");
      }
      if (this.update) {
        permissions.push("u");
      }
      if (this.process) {
        permissions.push("p");
      }
      if (this.setImmutabilityPolicy) {
        permissions.push("i");
      }
      if (this.permanentDelete) {
        permissions.push("y");
      }
      return permissions.join("");
    }
  }], [{
    key: "parse",
    value: function parse(permissions) {
      var accountSASPermissions = new AccountSASPermissions();
      var _iterator = _createForOfIteratorHelper(permissions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var c = _step.value;
          switch (c) {
            case "r":
              accountSASPermissions.read = true;
              break;
            case "w":
              accountSASPermissions.write = true;
              break;
            case "d":
              accountSASPermissions.delete = true;
              break;
            case "x":
              accountSASPermissions.deleteVersion = true;
              break;
            case "l":
              accountSASPermissions.list = true;
              break;
            case "a":
              accountSASPermissions.add = true;
              break;
            case "c":
              accountSASPermissions.create = true;
              break;
            case "u":
              accountSASPermissions.update = true;
              break;
            case "p":
              accountSASPermissions.process = true;
              break;
            case "t":
              accountSASPermissions.tag = true;
              break;
            case "f":
              accountSASPermissions.filter = true;
              break;
            case "i":
              accountSASPermissions.setImmutabilityPolicy = true;
              break;
            case "y":
              accountSASPermissions.permanentDelete = true;
              break;
            default:
              throw new RangeError("Invalid permission character: ".concat(c));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return accountSASPermissions;
    }
    /**
     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */
  }, {
    key: "from",
    value: function from(permissionLike) {
      var accountSASPermissions = new AccountSASPermissions();
      if (permissionLike.read) {
        accountSASPermissions.read = true;
      }
      if (permissionLike.write) {
        accountSASPermissions.write = true;
      }
      if (permissionLike.delete) {
        accountSASPermissions.delete = true;
      }
      if (permissionLike.deleteVersion) {
        accountSASPermissions.deleteVersion = true;
      }
      if (permissionLike.filter) {
        accountSASPermissions.filter = true;
      }
      if (permissionLike.tag) {
        accountSASPermissions.tag = true;
      }
      if (permissionLike.list) {
        accountSASPermissions.list = true;
      }
      if (permissionLike.add) {
        accountSASPermissions.add = true;
      }
      if (permissionLike.create) {
        accountSASPermissions.create = true;
      }
      if (permissionLike.update) {
        accountSASPermissions.update = true;
      }
      if (permissionLike.process) {
        accountSASPermissions.process = true;
      }
      if (permissionLike.setImmutabilityPolicy) {
        accountSASPermissions.setImmutabilityPolicy = true;
      }
      if (permissionLike.permanentDelete) {
        accountSASPermissions.permanentDelete = true;
      }
      return accountSASPermissions;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASResourceTypes = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the
 * values are set, this should be serialized with toString and set as the resources field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but
 * the order of the resources is particular and this class guarantees correctness.
 */
var AccountSASResourceTypes = exports.AccountSASResourceTypes = /*#__PURE__*/function () {
  function AccountSASResourceTypes() {
    _classCallCheck(this, AccountSASResourceTypes);
    /**
     * Permission to access service level APIs granted.
     */
    this.service = false;
    /**
     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.
     */
    this.container = false;
    /**
     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.
     */
    this.object = false;
  }
  /**
   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid resource type.
   *
   * @param resourceTypes -
   */
  return _createClass(AccountSASResourceTypes, [{
    key: "toString",
    value:
    /**
     * Converts the given resource types to a string.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     */
    function toString() {
      var resourceTypes = [];
      if (this.service) {
        resourceTypes.push("s");
      }
      if (this.container) {
        resourceTypes.push("c");
      }
      if (this.object) {
        resourceTypes.push("o");
      }
      return resourceTypes.join("");
    }
  }], [{
    key: "parse",
    value: function parse(resourceTypes) {
      var accountSASResourceTypes = new AccountSASResourceTypes();
      var _iterator = _createForOfIteratorHelper(resourceTypes),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var c = _step.value;
          switch (c) {
            case "s":
              accountSASResourceTypes.service = true;
              break;
            case "c":
              accountSASResourceTypes.container = true;
              break;
            case "o":
              accountSASResourceTypes.object = true;
              break;
            default:
              throw new RangeError("Invalid resource type: ".concat(c));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return accountSASResourceTypes;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASServices = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that service. Once all the
 * values are set, this should be serialized with toString and set as the services field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but
 * the order of the services is particular and this class guarantees correctness.
 */
var AccountSASServices = exports.AccountSASServices = /*#__PURE__*/function () {
  function AccountSASServices() {
    _classCallCheck(this, AccountSASServices);
    /**
     * Permission to access blob resources granted.
     */
    this.blob = false;
    /**
     * Permission to access file resources granted.
     */
    this.file = false;
    /**
     * Permission to access queue resources granted.
     */
    this.queue = false;
    /**
     * Permission to access table resources granted.
     */
    this.table = false;
  }
  /**
   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid service.
   *
   * @param services -
   */
  return _createClass(AccountSASServices, [{
    key: "toString",
    value:
    /**
     * Converts the given services to a string.
     *
     */
    function toString() {
      var services = [];
      if (this.blob) {
        services.push("b");
      }
      if (this.table) {
        services.push("t");
      }
      if (this.queue) {
        services.push("q");
      }
      if (this.file) {
        services.push("f");
      }
      return services.join("");
    }
  }], [{
    key: "parse",
    value: function parse(services) {
      var accountSASServices = new AccountSASServices();
      var _iterator = _createForOfIteratorHelper(services),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var c = _step.value;
          switch (c) {
            case "b":
              accountSASServices.blob = true;
              break;
            case "f":
              accountSASServices.file = true;
              break;
            case "q":
              accountSASServices.queue = true;
              break;
            case "t":
              accountSASServices.table = true;
              break;
            default:
              throw new RangeError("Invalid service character: ".concat(c));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return accountSASServices;
    }
  }]);
}();
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateAccountSASQueryParameters = generateAccountSASQueryParameters;
var _AccountSASPermissions = require("./AccountSASPermissions");
var _AccountSASResourceTypes = require("./AccountSASResourceTypes");
var _AccountSASServices = require("./AccountSASServices");
var _SasIPRange = require("./SasIPRange");
var _SASQueryParameters = require("./SASQueryParameters");
var _constants = require("../utils/constants");
var _utils = require("../utils/utils.common");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual
 * REST request.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
 *
 * @param accountSASSignatureValues -
 * @param sharedKeyCredential -
 */
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
  var version = accountSASSignatureValues.version ? accountSASSignatureValues.version : _constants.SERVICE_VERSION;
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
  }
  if (accountSASSignatureValues.encryptionScope && version < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  var parsedPermissions = _AccountSASPermissions.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());
  var parsedServices = _AccountSASServices.AccountSASServices.parse(accountSASSignatureValues.services).toString();
  var parsedResourceTypes = _AccountSASResourceTypes.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
  var stringToSign;
  if (version >= "2020-12-06") {
    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false) : "", (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "", "" // Account SAS requires an additional newline character
    ].join("\n");
  } else {
    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false) : "", (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, "" // Account SAS requires an additional newline character
    ].join("\n");
  }
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);
}
},{"./AccountSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js","./AccountSASResourceTypes":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js","./AccountSASServices":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js","./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","./SASQueryParameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobServiceClient = void 0;
var _tslib = require("tslib");
var _coreAuth = require("@azure/core-auth");
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _coreUtil = require("@azure/core-util");
var _Pipeline = require("./Pipeline");
var _ContainerClient = require("./ContainerClient");
var _utils = require("./utils/utils.common");
var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _AnonymousCredential = require("./credentials/AnonymousCredential");
var _tracing = require("./utils/tracing");
var _BlobBatchClient = require("./BlobBatchClient");
var _StorageClient2 = require("./StorageClient");
var _AccountSASPermissions = require("./sas/AccountSASPermissions");
var _AccountSASSignatureValues = require("./sas/AccountSASSignatureValues");
var _AccountSASServices = require("./sas/AccountSASServices");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); } // Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you
 * to manipulate blob containers.
 */
var BlobServiceClient = exports.BlobServiceClient = /*#__PURE__*/function (_StorageClient) {
  function BlobServiceClient(url, credentialOrPipeline,
  // Legacy, no fix for eslint error without breaking. Disable it for this interface.
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  options) {
    var _this;
    _classCallCheck(this, BlobServiceClient);
    var pipeline;
    if ((0, _Pipeline.isPipelineLike)(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (_coreUtil.isNode && credentialOrPipeline instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipeline instanceof _AnonymousCredential.AnonymousCredential || (0, _coreAuth.isTokenCredential)(credentialOrPipeline)) {
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
    } else {
      // The second parameter is undefined. Use anonymous credential
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    }
    _this = _callSuper(this, BlobServiceClient, [url, pipeline]);
    _this.serviceContext = _this.storageClientContext.service;
    return _this;
  }
  /**
   * Creates a {@link ContainerClient} object
   *
   * @param containerName - A container name
   * @returns A new ContainerClient object for the given container name.
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * ```
   */
  _inherits(BlobServiceClient, _StorageClient);
  return _createClass(BlobServiceClient, [{
    key: "getContainerClient",
    value: function getContainerClient(containerName) {
      return new _ContainerClient.ContainerClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);
    }
    /**
     * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     *
     * @param containerName - Name of the container to create.
     * @param options - Options to configure Container Create operation.
     * @returns Container creation response and the corresponding container client.
     */
  }, {
    key: "createContainer",
    value: (function () {
      var _createContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(containerName) {
        var _this2 = this;
        var options,
          _args2 = arguments;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
              return _context2.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-createContainer", options, /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(updatedOptions) {
                  var containerClient, containerCreateResponse;
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        containerClient = _this2.getContainerClient(containerName);
                        _context.next = 3;
                        return containerClient.create(updatedOptions);
                      case 3:
                        containerCreateResponse = _context.sent;
                        return _context.abrupt("return", {
                          containerClient: containerClient,
                          containerCreateResponse: containerCreateResponse
                        });
                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function (_x2) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function createContainer(_x) {
        return _createContainer.apply(this, arguments);
      }
      return createContainer;
    }()
    /**
     * Deletes a Blob container.
     *
     * @param containerName - Name of the container to delete.
     * @param options - Options to configure Container Delete operation.
     * @returns Container deletion response.
     */
    )
  }, {
    key: "deleteContainer",
    value: (function () {
      var _deleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(containerName) {
        var _this3 = this;
        var options,
          _args4 = arguments;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
              return _context4.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-deleteContainer", options, /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(updatedOptions) {
                  var containerClient;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        containerClient = _this3.getContainerClient(containerName);
                        return _context3.abrupt("return", containerClient.delete(updatedOptions));
                      case 2:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function (_x4) {
                  return _ref2.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function deleteContainer(_x3) {
        return _deleteContainer.apply(this, arguments);
      }
      return deleteContainer;
    }()
    /**
     * Restore a previously deleted Blob container.
     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
     *
     * @param deletedContainerName - Name of the previously deleted container.
     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
     * @param options - Options to configure Container Restore operation.
     * @returns Container deletion response.
     */
    )
  }, {
    key: "undeleteContainer",
    value: (function () {
      var _undeleteContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(deletedContainerName, deletedContainerVersion) {
        var _this4 = this;
        var options,
          _args6 = arguments;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};
              return _context6.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-undeleteContainer", options, /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(updatedOptions) {
                  var containerClient, containerContext, containerUndeleteResponse;
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        containerClient = _this4.getContainerClient(options.destinationContainerName || deletedContainerName); // Hack to access a protected member.
                        containerContext = containerClient["storageClientContext"].container;
                        _context5.t0 = _utils.assertResponse;
                        _context5.next = 5;
                        return containerContext.restore({
                          deletedContainerName: deletedContainerName,
                          deletedContainerVersion: deletedContainerVersion,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 5:
                        _context5.t1 = _context5.sent;
                        containerUndeleteResponse = (0, _context5.t0)(_context5.t1);
                        return _context5.abrupt("return", {
                          containerClient: containerClient,
                          containerUndeleteResponse: containerUndeleteResponse
                        });
                      case 8:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5);
                }));
                return function (_x7) {
                  return _ref3.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function undeleteContainer(_x5, _x6) {
        return _undeleteContainer.apply(this, arguments);
      }
      return undeleteContainer;
    }()
    /**
     * Rename an existing Blob Container.
     *
     * @param sourceContainerName - The name of the source container.
     * @param destinationContainerName - The new name of the container.
     * @param options - Options to configure Container Rename operation.
     */
    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.
    )
  }, {
    key: "renameContainer",
    value: (function () {
      var _renameContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(sourceContainerName, destinationContainerName) {
        var _this5 = this;
        var options,
          _args8 = arguments;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};
              return _context8.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-renameContainer", options, /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(updatedOptions) {
                  var _a, containerClient, containerContext, containerRenameResponse;
                  return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                    while (1) switch (_context7.prev = _context7.next) {
                      case 0:
                        containerClient = _this5.getContainerClient(destinationContainerName); // Hack to access a protected member.
                        containerContext = containerClient["storageClientContext"].container;
                        _context7.t0 = _utils.assertResponse;
                        _context7.next = 5;
                        return containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), {
                          sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId
                        }));
                      case 5:
                        _context7.t1 = _context7.sent;
                        containerRenameResponse = (0, _context7.t0)(_context7.t1);
                        return _context7.abrupt("return", {
                          containerClient: containerClient,
                          containerRenameResponse: containerRenameResponse
                        });
                      case 8:
                      case "end":
                        return _context7.stop();
                    }
                  }, _callee7);
                }));
                return function (_x10) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function renameContainer(_x8, _x9) {
        return _renameContainer.apply(this, arguments);
      }
      return renameContainer;
    }()
    /**
     * Gets the properties of a storage account’s Blob service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * @param options - Options to the Service Get Properties operation.
     * @returns Response data for the Service Get Properties operation.
     */
    )
  }, {
    key: "getProperties",
    value: (function () {
      var _getProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var _this6 = this;
        var options,
          _args10 = arguments;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
              return _context10.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-getProperties", options, /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                    while (1) switch (_context9.prev = _context9.next) {
                      case 0:
                        _context9.t0 = _utils.assertResponse;
                        _context9.next = 3;
                        return _this6.serviceContext.getProperties({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context9.t1 = _context9.sent;
                        return _context9.abrupt("return", (0, _context9.t0)(_context9.t1));
                      case 5:
                      case "end":
                        return _context9.stop();
                    }
                  }, _callee9);
                }));
                return function (_x11) {
                  return _ref5.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
      function getProperties() {
        return _getProperties.apply(this, arguments);
      }
      return getProperties;
    }()
    /**
     * Sets properties for a storage account’s Blob service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
     *
     * @param properties -
     * @param options - Options to the Service Set Properties operation.
     * @returns Response data for the Service Set Properties operation.
     */
    )
  }, {
    key: "setProperties",
    value: (function () {
      var _setProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(properties) {
        var _this7 = this;
        var options,
          _args12 = arguments;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
              return _context12.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-setProperties", options, /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                    while (1) switch (_context11.prev = _context11.next) {
                      case 0:
                        _context11.t0 = _utils.assertResponse;
                        _context11.next = 3;
                        return _this7.serviceContext.setProperties(properties, {
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context11.t1 = _context11.sent;
                        return _context11.abrupt("return", (0, _context11.t0)(_context11.t1));
                      case 5:
                      case "end":
                        return _context11.stop();
                    }
                  }, _callee11);
                }));
                return function (_x13) {
                  return _ref6.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
      function setProperties(_x12) {
        return _setProperties.apply(this, arguments);
      }
      return setProperties;
    }()
    /**
     * Retrieves statistics related to replication for the Blob service. It is only
     * available on the secondary location endpoint when read-access geo-redundant
     * replication is enabled for the storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
     *
     * @param options - Options to the Service Get Statistics operation.
     * @returns Response data for the Service Get Statistics operation.
     */
    )
  }, {
    key: "getStatistics",
    value: (function () {
      var _getStatistics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        var _this8 = this;
        var options,
          _args14 = arguments;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
              return _context14.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-getStatistics", options, /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                    while (1) switch (_context13.prev = _context13.next) {
                      case 0:
                        _context13.t0 = _utils.assertResponse;
                        _context13.next = 3;
                        return _this8.serviceContext.getStatistics({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context13.t1 = _context13.sent;
                        return _context13.abrupt("return", (0, _context13.t0)(_context13.t1));
                      case 5:
                      case "end":
                        return _context13.stop();
                    }
                  }, _callee13);
                }));
                return function (_x14) {
                  return _ref7.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function getStatistics() {
        return _getStatistics.apply(this, arguments);
      }
      return getStatistics;
    }()
    /**
     * The Get Account Information operation returns the sku name and account kind
     * for the specified account.
     * The Get Account Information operation is available on service versions beginning
     * with version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
     *
     * @param options - Options to the Service Get Account Info operation.
     * @returns Response data for the Service Get Account Info operation.
     */
    )
  }, {
    key: "getAccountInfo",
    value: (function () {
      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
        var _this9 = this;
        var options,
          _args16 = arguments;
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
              return _context16.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-getAccountInfo", options, /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                    while (1) switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.t0 = _utils.assertResponse;
                        _context15.next = 3;
                        return _this9.serviceContext.getAccountInfo({
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context15.t1 = _context15.sent;
                        return _context15.abrupt("return", (0, _context15.t0)(_context15.t1));
                      case 5:
                      case "end":
                        return _context15.stop();
                    }
                  }, _callee15);
                }));
                return function (_x15) {
                  return _ref8.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context16.stop();
          }
        }, _callee16);
      }));
      function getAccountInfo() {
        return _getAccountInfo.apply(this, arguments);
      }
      return getAccountInfo;
    }()
    /**
     * Returns a list of the containers under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
     *
     * @param marker - A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param options - Options to the Service List Container Segment operation.
     * @returns Response data for the Service List Container Segment operation.
     */
    )
  }, {
    key: "listContainersSegment",
    value: (function () {
      var _listContainersSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(marker) {
        var _this10 = this;
        var options,
          _args18 = arguments;
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};
              return _context18.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-listContainersSegment", options, /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(updatedOptions) {
                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                    while (1) switch (_context17.prev = _context17.next) {
                      case 0:
                        _context17.t0 = _utils.assertResponse;
                        _context17.next = 3;
                        return _this10.serviceContext.listContainersSegment(Object.assign(Object.assign({
                          abortSignal: options.abortSignal,
                          marker: marker
                        }, options), {
                          include: typeof options.include === "string" ? [options.include] : options.include,
                          tracingOptions: updatedOptions.tracingOptions
                        }));
                      case 3:
                        _context17.t1 = _context17.sent;
                        return _context17.abrupt("return", (0, _context17.t0)(_context17.t1));
                      case 5:
                      case "end":
                        return _context17.stop();
                    }
                  }, _callee17);
                }));
                return function (_x17) {
                  return _ref9.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context18.stop();
          }
        }, _callee18);
      }));
      function listContainersSegment(_x16) {
        return _listContainersSegment.apply(this, arguments);
      }
      return listContainersSegment;
    }()
    /**
     * The Filter Blobs operation enables callers to list blobs across all containers whose tags
     * match a given search expression. Filter blobs searches across all containers within a
     * storage account but can be scoped within the expression to a single container.
     *
     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                        The given expression must evaluate to true for a blob to be returned in the results.
     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */
    )
  }, {
    key: "findBlobsByTagsSegment",
    value: (function () {
      var _findBlobsByTagsSegment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(tagFilterSqlExpression, marker) {
        var _this11 = this;
        var options,
          _args20 = arguments;
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
              return _context20.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-findBlobsByTagsSegment", options, /*#__PURE__*/function () {
                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(updatedOptions) {
                  var response, wrappedResponse;
                  return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                    while (1) switch (_context19.prev = _context19.next) {
                      case 0:
                        _context19.t0 = _utils.assertResponse;
                        _context19.next = 3;
                        return _this11.serviceContext.filterBlobs({
                          abortSignal: options.abortSignal,
                          where: tagFilterSqlExpression,
                          marker: marker,
                          maxPageSize: options.maxPageSize,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context19.t1 = _context19.sent;
                        response = (0, _context19.t0)(_context19.t1);
                        wrappedResponse = Object.assign(Object.assign({}, response), {
                          _response: response._response,
                          blobs: response.blobs.map(function (blob) {
                            var _a;
                            var tagValue = "";
                            if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {
                              tagValue = blob.tags.blobTagSet[0].value;
                            }
                            return Object.assign(Object.assign({}, blob), {
                              tags: (0, _utils.toTags)(blob.tags),
                              tagValue: tagValue
                            });
                          })
                        });
                        return _context19.abrupt("return", wrappedResponse);
                      case 7:
                      case "end":
                        return _context19.stop();
                    }
                  }, _callee19);
                }));
                return function (_x20) {
                  return _ref10.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context20.stop();
          }
        }, _callee20);
      }));
      function findBlobsByTagsSegment(_x18, _x19) {
        return _findBlobsByTagsSegment.apply(this, arguments);
      }
      return findBlobsByTagsSegment;
    }()
    /**
     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */
    )
  }, {
    key: "findBlobsByTagsSegments",
    value: function findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsSegments_1(tagFilterSqlExpression, marker) {
        var _this12 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
          var response;
          return _regeneratorRuntime().wrap(function _callee21$(_context21) {
            while (1) switch (_context21.prev = _context21.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context21.next = 11;
                  break;
                }
              case 1:
                _context21.next = 3;
                return (0, _tslib.__await)(_this12.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));
              case 3:
                response = _context21.sent;
                response.blobs = response.blobs || [];
                marker = response.continuationToken;
                _context21.next = 8;
                return (0, _tslib.__await)(response);
              case 8:
                _context21.next = 10;
                return _context21.sent;
              case 10:
                if (marker) {
                  _context21.next = 1;
                  break;
                }
              case 11:
              case "end":
                return _context21.stop();
            }
          }, _callee21);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator for blobs.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to findBlobsByTagsItems.
     */
  }, {
    key: "findBlobsByTagsItems",
    value: function findBlobsByTagsItems(tagFilterSqlExpression_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsItems_1(tagFilterSqlExpression) {
        var _this13 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
          var _a, e_1, _b, _c, marker, _d, _e, _f, segment;
          return _regeneratorRuntime().wrap(function _callee22$(_context22) {
            while (1) switch (_context22.prev = _context22.next) {
              case 0:
                _context22.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this13.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));
              case 2:
                _context22.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context22.sent;
                _a = _f.done;
                if (_a) {
                  _context22.next = 18;
                  break;
                }
                _c = _f.value;
                _d = false;
                segment = _c;
                _context22.t0 = _tslib.__await;
                return _context22.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.blobs)), "t1", 12);
              case 12:
                _context22.t2 = _context22.t1;
                _context22.next = 15;
                return (0, _context22.t0)(_context22.t2);
              case 15:
                _d = true;
                _context22.next = 2;
                break;
              case 18:
                _context22.next = 23;
                break;
              case 20:
                _context22.prev = 20;
                _context22.t3 = _context22["catch"](0);
                e_1 = {
                  error: _context22.t3
                };
              case 23:
                _context22.prev = 23;
                _context22.prev = 24;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context22.next = 28;
                  break;
                }
                _context22.next = 28;
                return (0, _tslib.__await)(_b.call(_e));
              case 28:
                _context22.prev = 28;
                if (!e_1) {
                  _context22.next = 31;
                  break;
                }
                throw e_1.error;
              case 31:
                return _context22.finish(28);
              case 32:
                return _context22.finish(23);
              case 33:
              case "end":
                return _context22.stop();
            }
          }, _callee22, null, [[0, 20, 23, 33], [24,, 28, 32]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to find all blobs with specified tag
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
     *   console.log(`Blob ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
     *   if (response.blobs) {
     *     for (const blob of response.blobs) {
     *       console.log(`Blob ${i++}: ${blob.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .findBlobsByTags("tagkey='tagvalue'")
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *      console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to find blobs by tags.
     */
  }, {
    key: "findBlobsByTags",
    value: function findBlobsByTags(tagFilterSqlExpression) {
      var _this14 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // AsyncIterableIterator to iterate over blobs
      var listSegmentOptions = Object.assign({}, options);
      var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this14.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, listSegmentOptions));
      });
    }
    /**
     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
     *
     * @param marker - A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param options - Options to list containers operation.
     */
  }, {
    key: "listSegments",
    value: function listSegments(marker_1) {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listSegments_1(marker) {
        var _this15 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
          var listContainersSegmentResponse;
          return _regeneratorRuntime().wrap(function _callee23$(_context23) {
            while (1) switch (_context23.prev = _context23.next) {
              case 0:
                if (!(!!marker || marker === undefined)) {
                  _context23.next = 15;
                  break;
                }
              case 1:
                _context23.next = 3;
                return (0, _tslib.__await)(_this15.listContainersSegment(marker, options));
              case 3:
                listContainersSegmentResponse = _context23.sent;
                listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
                marker = listContainersSegmentResponse.continuationToken;
                _context23.t0 = _tslib.__await;
                _context23.next = 9;
                return (0, _tslib.__await)(listContainersSegmentResponse);
              case 9:
                _context23.t1 = _context23.sent;
                _context23.next = 12;
                return (0, _context23.t0)(_context23.t1);
              case 12:
                _context23.next = 14;
                return _context23.sent;
              case 14:
                if (marker) {
                  _context23.next = 1;
                  break;
                }
              case 15:
              case "end":
                return _context23.stop();
            }
          }, _callee23);
        })();
      });
    }
    /**
     * Returns an AsyncIterableIterator for Container Items
     *
     * @param options - Options to list containers operation.
     */
  }, {
    key: "listItems",
    value: function listItems() {
      return (0, _tslib.__asyncGenerator)(this, arguments, function listItems_1() {
        var _this16 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
          var _a, e_2, _b, _c, marker, _d, _e, _f, segment;
          return _regeneratorRuntime().wrap(function _callee24$(_context24) {
            while (1) switch (_context24.prev = _context24.next) {
              case 0:
                _context24.prev = 0;
                _d = true, _e = (0, _tslib.__asyncValues)(_this16.listSegments(marker, options));
              case 2:
                _context24.next = 4;
                return (0, _tslib.__await)(_e.next());
              case 4:
                _f = _context24.sent;
                _a = _f.done;
                if (_a) {
                  _context24.next = 18;
                  break;
                }
                _c = _f.value;
                _d = false;
                segment = _c;
                _context24.t0 = _tslib.__await;
                return _context24.delegateYield((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.containerItems)), "t1", 12);
              case 12:
                _context24.t2 = _context24.t1;
                _context24.next = 15;
                return (0, _context24.t0)(_context24.t2);
              case 15:
                _d = true;
                _context24.next = 2;
                break;
              case 18:
                _context24.next = 23;
                break;
              case 20:
                _context24.prev = 20;
                _context24.t3 = _context24["catch"](0);
                e_2 = {
                  error: _context24.t3
                };
              case 23:
                _context24.prev = 23;
                _context24.prev = 24;
                if (!(!_d && !_a && (_b = _e.return))) {
                  _context24.next = 28;
                  break;
                }
                _context24.next = 28;
                return (0, _tslib.__await)(_b.call(_e));
              case 28:
                _context24.prev = 28;
                if (!e_2) {
                  _context24.next = 31;
                  break;
                }
                throw e_2.error;
              case 31:
                return _context24.finish(28);
              case 32:
                return _context24.finish(23);
              case 33:
              case "end":
                return _context24.stop();
            }
          }, _callee24, null, [[0, 20, 23, 33], [24,, 28, 32]]);
        })();
      });
    }
    /**
     * Returns an async iterable iterator to list all the containers
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the containers in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const container of blobServiceClient.listContainers()) {
     *   console.log(`Container ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.listContainers();
     * let containerItem = await iter.next();
     * while (!containerItem.done) {
     *   console.log(`Container ${i++}: ${containerItem.value.name}`);
     *   containerItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
     *   if (response.containerItems) {
     *     for (const container of response.containerItems) {
     *       console.log(`Container ${i++}: ${container.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *     console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .listContainers()
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *      console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     * ```
     *
     * @param options - Options to list containers.
     * @returns An asyncIterableIterator that supports paging.
     */
  }, {
    key: "listContainers",
    value: function listContainers() {
      var _this17 = this;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (options.prefix === "") {
        options.prefix = undefined;
      }
      var include = [];
      if (options.includeDeleted) {
        include.push("deleted");
      }
      if (options.includeMetadata) {
        include.push("metadata");
      }
      if (options.includeSystem) {
        include.push("system");
      }
      // AsyncIterableIterator to iterate over containers
      var listSegmentOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
        include: include
      } : {});
      var iter = this.listItems(listSegmentOptions);
      return _defineProperty(_defineProperty({
        /**
         * The next method, part of the iteration protocol
         */
        next: function next() {
          return iter.next();
        }
      }, Symbol.asyncIterator, function () {
        return this;
      }), "byPage", function byPage() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _this17.listSegments(settings.continuationToken, Object.assign({
          maxPageSize: settings.maxPageSize
        }, listSegmentOptions));
      });
    }
    /**
     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
     *
     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
     * bearer token authentication.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
     *
     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
     */
  }, {
    key: "getUserDelegationKey",
    value: (function () {
      var _getUserDelegationKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(startsOn, expiresOn) {
        var _this18 = this;
        var options,
          _args26 = arguments;
        return _regeneratorRuntime().wrap(function _callee26$(_context26) {
          while (1) switch (_context26.prev = _context26.next) {
            case 0:
              options = _args26.length > 2 && _args26[2] !== undefined ? _args26[2] : {};
              return _context26.abrupt("return", _tracing.tracingClient.withSpan("BlobServiceClient-getUserDelegationKey", options, /*#__PURE__*/function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(updatedOptions) {
                  var response, userDelegationKey, res;
                  return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                    while (1) switch (_context25.prev = _context25.next) {
                      case 0:
                        _context25.t0 = _utils.assertResponse;
                        _context25.next = 3;
                        return _this18.serviceContext.getUserDelegationKey({
                          startsOn: (0, _utils.truncatedISO8061Date)(startsOn, false),
                          expiresOn: (0, _utils.truncatedISO8061Date)(expiresOn, false)
                        }, {
                          abortSignal: options.abortSignal,
                          tracingOptions: updatedOptions.tracingOptions
                        });
                      case 3:
                        _context25.t1 = _context25.sent;
                        response = (0, _context25.t0)(_context25.t1);
                        userDelegationKey = {
                          signedObjectId: response.signedObjectId,
                          signedTenantId: response.signedTenantId,
                          signedStartsOn: new Date(response.signedStartsOn),
                          signedExpiresOn: new Date(response.signedExpiresOn),
                          signedService: response.signedService,
                          signedVersion: response.signedVersion,
                          value: response.value
                        };
                        res = Object.assign({
                          _response: response._response,
                          requestId: response.requestId,
                          clientRequestId: response.clientRequestId,
                          version: response.version,
                          date: response.date,
                          errorCode: response.errorCode
                        }, userDelegationKey);
                        return _context25.abrupt("return", res);
                      case 8:
                      case "end":
                        return _context25.stop();
                    }
                  }, _callee25);
                }));
                return function (_x23) {
                  return _ref13.apply(this, arguments);
                };
              }()));
            case 2:
            case "end":
              return _context26.stop();
          }
        }, _callee26);
      }));
      function getUserDelegationKey(_x21, _x22) {
        return _getUserDelegationKey.apply(this, arguments);
      }
      return getUserDelegationKey;
    }()
    /**
     * Creates a BlobBatchClient object to conduct batch operations.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @returns A new BlobBatchClient object for this service.
     */
    )
  }, {
    key: "getBlobBatchClient",
    value: function getBlobBatchClient() {
      return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
    }
    /**
     * Only available for BlobServiceClient constructed with a shared key credential.
     *
     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
     *
     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
     * @param permissions - Specifies the list of permissions to be associated with the SAS.
     * @param resourceTypes - Specifies the resource types associated with the shared access signature.
     * @param options - Optional parameters.
     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */
  }, {
    key: "generateAccountSasUrl",
    value: function generateAccountSasUrl(expiresOn) {
      var permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _AccountSASPermissions.AccountSASPermissions.parse("r");
      var resourceTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "sco";
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (!(this.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
        throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
      }
      if (expiresOn === undefined) {
        var now = new Date();
        expiresOn = new Date(now.getTime() + 3600 * 1000);
      }
      var sas = (0, _AccountSASSignatureValues.generateAccountSASQueryParameters)(Object.assign({
        permissions: permissions,
        expiresOn: expiresOn,
        resourceTypes: resourceTypes,
        services: _AccountSASServices.AccountSASServices.parse("b").toString()
      }, options), this.credential).toString();
      return (0, _utils.appendToURLQuery)(this.url, sas);
    }
  }], [{
    key: "fromConnectionString",
    value:
    /**
     *
     * Creates an instance of BlobServiceClient from connection string.
     *
     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    function fromConnectionString(connectionString,
    // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
    options) {
      options = options || {};
      var extractedCreds = (0, _utils.extractConnectionStringParts)(connectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (_coreUtil.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          if (!options.proxyOptions) {
            options.proxyOptions = (0, _coreRestPipeline.getDefaultProxySettings)(extractedCreds.proxyUri);
          }
          var pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
          return new BlobServiceClient(extractedCreds.url, pipeline);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        var _pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
        return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, _pipeline);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    }
  }]);
}(_StorageClient2.StorageClient);
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-auth":"node_modules/@azure/core-auth/dist/browser/index.js","@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","@azure/core-util":"node_modules/@azure/core-util/dist/browser/index.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./ContainerClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./sas/AccountSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js","./sas/AccountSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js","./sas/AccountSASServices":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownEncryptionAlgorithmType = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/** Known values of {@link EncryptionAlgorithmType} that the service accepts. */
var KnownEncryptionAlgorithmType;
(function (KnownEncryptionAlgorithmType) {
  KnownEncryptionAlgorithmType["AES256"] = "AES256";
})(KnownEncryptionAlgorithmType || (exports.KnownEncryptionAlgorithmType = KnownEncryptionAlgorithmType = {}));
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  RestError: true,
  BlockBlobTier: true,
  PremiumPageBlobTier: true,
  Pipeline: true,
  isPipelineLike: true,
  newPipeline: true,
  StorageOAuthScopes: true,
  BaseRequestPolicy: true,
  logger: true
};
Object.defineProperty(exports, "BaseRequestPolicy", {
  enumerable: true,
  get: function () {
    return _RequestPolicy.BaseRequestPolicy;
  }
});
Object.defineProperty(exports, "BlockBlobTier", {
  enumerable: true,
  get: function () {
    return _models.BlockBlobTier;
  }
});
Object.defineProperty(exports, "Pipeline", {
  enumerable: true,
  get: function () {
    return _Pipeline.Pipeline;
  }
});
Object.defineProperty(exports, "PremiumPageBlobTier", {
  enumerable: true,
  get: function () {
    return _models.PremiumPageBlobTier;
  }
});
Object.defineProperty(exports, "RestError", {
  enumerable: true,
  get: function () {
    return _coreRestPipeline.RestError;
  }
});
Object.defineProperty(exports, "StorageOAuthScopes", {
  enumerable: true,
  get: function () {
    return _Pipeline.StorageOAuthScopes;
  }
});
Object.defineProperty(exports, "isPipelineLike", {
  enumerable: true,
  get: function () {
    return _Pipeline.isPipelineLike;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return _log.logger;
  }
});
Object.defineProperty(exports, "newPipeline", {
  enumerable: true,
  get: function () {
    return _Pipeline.newPipeline;
  }
});
var _coreRestPipeline = require("@azure/core-rest-pipeline");
var _BlobServiceClient = require("./BlobServiceClient");
Object.keys(_BlobServiceClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobServiceClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobServiceClient[key];
    }
  });
});
var _Clients = require("./Clients");
Object.keys(_Clients).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Clients[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Clients[key];
    }
  });
});
var _ContainerClient = require("./ContainerClient");
Object.keys(_ContainerClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ContainerClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ContainerClient[key];
    }
  });
});
var _BlobLeaseClient = require("./BlobLeaseClient");
Object.keys(_BlobLeaseClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobLeaseClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobLeaseClient[key];
    }
  });
});
var _BlobBatch = require("./BlobBatch");
Object.keys(_BlobBatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobBatch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobBatch[key];
    }
  });
});
var _BlobBatchClient = require("./BlobBatchClient");
Object.keys(_BlobBatchClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobBatchClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobBatchClient[key];
    }
  });
});
var _BatchResponse = require("./BatchResponse");
Object.keys(_BatchResponse).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BatchResponse[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BatchResponse[key];
    }
  });
});
var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");
Object.keys(_StorageBrowserPolicyFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StorageBrowserPolicyFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StorageBrowserPolicyFactory[key];
    }
  });
});
var _AnonymousCredential = require("./credentials/AnonymousCredential");
Object.keys(_AnonymousCredential).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AnonymousCredential[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AnonymousCredential[key];
    }
  });
});
var _Credential = require("./credentials/Credential");
Object.keys(_Credential).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Credential[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Credential[key];
    }
  });
});
var _models = require("./models");
var _Pipeline = require("./Pipeline");
var _RequestPolicy = require("./policies/RequestPolicy");
var _AnonymousCredentialPolicy = require("./policies/AnonymousCredentialPolicy");
Object.keys(_AnonymousCredentialPolicy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AnonymousCredentialPolicy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AnonymousCredentialPolicy[key];
    }
  });
});
var _CredentialPolicy = require("./policies/CredentialPolicy");
Object.keys(_CredentialPolicy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _CredentialPolicy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _CredentialPolicy[key];
    }
  });
});
var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");
Object.keys(_StorageRetryPolicyFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StorageRetryPolicyFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StorageRetryPolicyFactory[key];
    }
  });
});
var _generatedModels = require("./generatedModels");
Object.keys(_generatedModels).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generatedModels[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generatedModels[key];
    }
  });
});
var _log = require("./log");
},{"@azure/core-rest-pipeline":"node_modules/@azure/core-rest-pipeline/dist/browser/index.js","./BlobServiceClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./ContainerClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","./BlobBatch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","./BatchResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js","./StorageBrowserPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/Credential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js","./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./policies/RequestPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js","./policies/AnonymousCredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","./policies/CredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js","./StorageRetryPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","./generatedModels":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"azureFiles.js":[function(require,module,exports) {
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _asyncIterator(r) { var n, t, o, e = 2; for ("undefined" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = "@@asyncIterator", o = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(r) { var n = this.s.return; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, throw: function _throw(r) { var n = this.s.return; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); }
var _require = require("@azure/storage-blob"),
  BlobServiceClient = _require.BlobServiceClient;
var fileNameID = document.getElementsByName('fileName');

// const selectContainer = document.getElementById('select-container');
// const folderNameID = document.getElementsByName('folderName');
// const createFolderID = document.getElementsById('createFolder');
// let filesId = document.getElementById('files');

var containerNames = [];
var folderList = [];
var fileList = [];
var selectedFolder = '';
var selectedFile = '';
var containerIndex = 0;

// Create a new BlobServiceClient
var blobSasUrl = "https://masudastorage.blob.core.windows.net/?sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-08-24T15:57:57Z&st=2024-07-25T07:57:57Z&spr=https&sig=YREqciDdoSS1UlQG2%2FHlAXSO%2BgOHFOGNoNxXVhF6CMg%3D";
var blobServiceClient = new BlobServiceClient(blobSasUrl);
main(blobServiceClient);
function reDrawView() {
  return _reDrawView.apply(this, arguments);
}
function _reDrawView() {
  _reDrawView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return setContainer();
        case 2:
          _context2.next = 4;
          return folderNames();
        case 4:
          _context2.next = 6;
          return fileNames();
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _reDrawView.apply(this, arguments);
}
function main(_x, _x2) {
  return _main.apply(this, arguments);
}
function _main() {
  _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(blobServiceClient, containerNamePrefix) {
    var options, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, containerItem, select, option, text;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          console.log("listContainers StorageName: masudastorage");
          options = {
            includeDeleted: false,
            includeMetadata: true,
            includeSystem: false,
            prefix: containerNamePrefix
          };
          _iteratorAbruptCompletion = false;
          _didIteratorError = false;
          _context3.prev = 4;
          _iterator = _asyncIterator(blobServiceClient.listContainers(options));
        case 6:
          _context3.next = 8;
          return _iterator.next();
        case 8:
          if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {
            _context3.next = 19;
            break;
          }
          containerItem = _step.value;
          select = document.getElementById('select-container');
          option = document.createElement('option');
          text = document.createTextNode(containerItem.name);
          option.appendChild(text);
          containerNames.push(containerItem.name);
          select.appendChild(option);
        case 16:
          _iteratorAbruptCompletion = false;
          _context3.next = 6;
          break;
        case 19:
          _context3.next = 25;
          break;
        case 21:
          _context3.prev = 21;
          _context3.t0 = _context3["catch"](4);
          _didIteratorError = true;
          _iteratorError = _context3.t0;
        case 25:
          _context3.prev = 25;
          _context3.prev = 26;
          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
            _context3.next = 30;
            break;
          }
          _context3.next = 30;
          return _iterator.return();
        case 30:
          _context3.prev = 30;
          if (!_didIteratorError) {
            _context3.next = 33;
            break;
          }
          throw _iteratorError;
        case 33:
          return _context3.finish(30);
        case 34:
          return _context3.finish(25);
        case 35:
          // console.log("containerNames:", containerNames);
          select = document.getElementById('select-container');
          select.addEventListener("change", selectContainerFunc);
          select = document.getElementById('createButton');
          select.addEventListener("click", createFolderFunc);
          select = document.getElementById('loadFile');
          select.addEventListener("click", loadFileFunc);
          select = document.getElementById('deleteFile');
          select.addEventListener("click", deleteFileFunc);
          select = document.getElementById('uploadFile');
          select.addEventListener("change", uploadFileFunc);
          _context3.next = 47;
          return reDrawView();
        case 47:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 21, 25, 35], [26,, 30, 34]]);
  }));
  return _main.apply(this, arguments);
}
var uploadFileFunc = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var select, promises, filename, _iterator2, _step2, file, containerClient, blockBlobClient;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          console.log("Uploading file");
          select = document.getElementById('uploadFile');
          console.log("  fileList:", select.files);
          console.log("  selectedFolder:", selectedFolder);

          // const checkFolder = selectedFolder + '/';
          promises = [];
          _iterator2 = _createForOfIteratorHelper(select.files);
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              file = _step2.value;
              if (selectedFolder === '/') {
                filename = file.name;
              } else {
                filename = selectedFolder + '/' + file.name;
              }
              console.log("  filename:", filename);
              containerClient = blobServiceClient.getContainerClient(containerNames[containerIndex]);
              blockBlobClient = containerClient.getBlockBlobClient(filename);
              promises.push(blockBlobClient.uploadData(file));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          _context.next = 10;
          return Promise.all(promises);
        case 10:
          console.log("  Done.");
          _context.next = 13;
          return reDrawView();
        case 13:
          _context.next = 18;
          break;
        case 15:
          _context.prev = 15;
          _context.t0 = _context["catch"](0);
          console.log(_context.t0.message);
        case 18:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 15]]);
  }));
  return function uploadFileFunc() {
    return _ref.apply(this, arguments);
  };
}();
function createFolderFunc() {
  return _createFolderFunc.apply(this, arguments);
}
function _createFolderFunc() {
  _createFolderFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var select, content, blobName, containerClient, blockBlobClient, uploadBlobResponse;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          console.log("createFolder");
          select = document.getElementById('newFolder'); // console.log("  createFolder:", select.value);
          if (!(select.value === "")) {
            _context4.next = 6;
            break;
          }
          console.log("  input folder name!:");
          _context4.next = 15;
          break;
        case 6:
          content = "Dummy data to hold the folder";
          blobName = select.value + "/DummyData";
          selectedFolder = select.value;
          containerClient = blobServiceClient.getContainerClient(containerNames[containerIndex]); // console.log("setContainer containerName:", containerNames[containerIndex]);
          blockBlobClient = containerClient.getBlockBlobClient(blobName);
          _context4.next = 13;
          return blockBlobClient.upload(content, content.length);
        case 13:
          uploadBlobResponse = _context4.sent;
          console.log("  Upload block blob ".concat(blobName, " successfully"));
        case 15:
          _context4.next = 17;
          return reDrawView();
        case 17:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _createFolderFunc.apply(this, arguments);
}
function selectContainerFunc() {
  return _selectContainerFunc.apply(this, arguments);
}
function _selectContainerFunc() {
  _selectContainerFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var select;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          select = document.getElementById('select-container'); // console.log(select.selectedIndex);
          containerIndex = select.selectedIndex;
          _context5.next = 4;
          return reDrawView();
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _selectContainerFunc.apply(this, arguments);
}
function loadFileFunc() {
  return _loadFileFunc.apply(this, arguments);
} // [Browsers only] A helper method used to convert a browser Blob by Promise.
function _loadFileFunc() {
  _loadFileFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    var containerClient, i, blobName, blobClient, downloadBlockBlobResponse, blobBody, downloaded, exportLink, blob;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          console.log("loadFile");
          containerClient = blobServiceClient.getContainerClient(containerNames[containerIndex]);
          for (i = 0; i < fileNameID.length; i++) {
            if (fileNameID[i].checked === true) {
              selectedFile = fileNameID[i].value;
            }
          }
          if (selectedFolder === '/') {
            blobName = selectedFile;
          } else {
            blobName = selectedFolder + '/' + selectedFile;
          }
          console.log("  blobName:", blobName);
          blobClient = containerClient.getBlobClient(blobName); // Download and convert a blob to a string
          _context6.next = 8;
          return blobClient.download();
        case 8:
          downloadBlockBlobResponse = _context6.sent;
          _context6.next = 11;
          return downloadBlockBlobResponse.blobBody;
        case 11:
          blobBody = _context6.sent;
          _context6.next = 14;
          return blobPromiseRead(blobBody);
        case 14:
          downloaded = _context6.sent;
          // console.log("  downloaded blob:", downloaded);
          exportLink = document.createElement('a'); // const blob = new Blob([downloaded], { type: 'text/plane' });
          blob = new Blob([downloaded]);
          exportLink.href = URL.createObjectURL(blob);
          exportLink.download = blobName;
          exportLink.click();
        case 20:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _loadFileFunc.apply(this, arguments);
}
function blobPromiseRead(_x3) {
  return _blobPromiseRead.apply(this, arguments);
}
function _blobPromiseRead() {
  _blobPromiseRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(blob) {
    var fileReader;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          fileReader = new FileReader();
          return _context7.abrupt("return", new Promise(function (resolve, reject) {
            fileReader.onloadend = function (ev) {
              resolve(ev.target.result);
            };
            fileReader.onerror = reject;
            // fileReader.readAsText(blob);
            fileReader.readAsArrayBuffer(blob);
          }));
        case 2:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _blobPromiseRead.apply(this, arguments);
}
function deleteFileFunc() {
  return _deleteFileFunc.apply(this, arguments);
}
function _deleteFileFunc() {
  _deleteFileFunc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
    var i, containerClient, blobName, blockBlobClient, deleteBlobResponse;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          console.log("deleteFile");

          // console.log("  fileNameID:", fileNameID);
          // console.log("  fileNameID.length:", fileNameID.length);

          for (i = 0; i < fileNameID.length; i++) {
            if (fileNameID[i].checked === true) {
              selectedFile = fileNameID[i].value;
              // console.log("select file:", selectedFile);
            }
          }
          containerClient = blobServiceClient.getContainerClient(containerNames[containerIndex]); // console.log("setContainer containerName:", containerNames[containerIndex]);
          // const blobName = selectedFolder + '/' + selectedFile;
          // console.log(blobName);
          if (selectedFolder === '/') {
            blobName = selectedFile;
          } else {
            blobName = selectedFolder + '/' + selectedFile;
          }
          console.log("  blobName:", blobName);
          blockBlobClient = containerClient.getBlockBlobClient(blobName);
          _context8.next = 8;
          return blockBlobClient.delete();
        case 8:
          deleteBlobResponse = _context8.sent;
          console.log("  delete block blob ".concat(blobName, " successfully"));
          _context8.next = 12;
          return reDrawView();
        case 12:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _deleteFileFunc.apply(this, arguments);
}
function setContainer() {
  return _setContainer.apply(this, arguments);
}
function _setContainer() {
  _setContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
    var containerClient, delimiter, iter, blobItem;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          containerClient = blobServiceClient.getContainerClient(containerNames[containerIndex]); // console.log("setContainer containerName:", containerNames[containerIndex]);
          folderList = [];
          delimiter = '/';
          _context9.next = 5;
          return containerClient.listBlobsByHierarchy(delimiter);
        case 5:
          iter = _context9.sent;
          _context9.next = 8;
          return iter.next();
        case 8:
          blobItem = _context9.sent;
        case 9:
          if (blobItem.done) {
            _context9.next = 16;
            break;
          }
          folderList.push(blobItem.value.name);
          _context9.next = 13;
          return iter.next();
        case 13:
          blobItem = _context9.sent;
          _context9.next = 9;
          break;
        case 16:
          fileList = [];
          _context9.next = 19;
          return containerClient.listBlobsFlat();
        case 19:
          iter = _context9.sent;
          _context9.next = 22;
          return iter.next();
        case 22:
          blobItem = _context9.sent;
        case 23:
          if (blobItem.done) {
            _context9.next = 30;
            break;
          }
          fileList.push(blobItem.value.name);
          _context9.next = 27;
          return iter.next();
        case 27:
          blobItem = _context9.sent;
          _context9.next = 23;
          break;
        case 30:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _setContainer.apply(this, arguments);
}
;
function changeFolder() {
  var folderNameID = document.getElementsByName('folderName');
  for (var i = 0; i < folderNameID.length; i++) {
    if (folderNameID[i].checked === true) {
      selectedFolder = folderNameID[i].value;
      console.log("select folder:", selectedFolder);
    }
  }
  fileNames();
}
;
function folderNames() {
  return _folderNames.apply(this, arguments);
}
function _folderNames() {
  _folderNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
    var folderID, folderNameID, count, i, parent, _iterator3, _step3, element, label, input, br;
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          // ReDrawにはこれは必須
          // console.log("set folderNames");
          folderID = document.getElementById('folder');
          folderNameID = document.getElementsByName('folderName'); // console.log("  folderNameID.length:", folderNameID.length);
          count = folderNameID.length;
          for (i = 1; i < count; i++) {
            // console.log("  fileNameID[]:", fileNameID[i]);
            parent = folderNameID[1].parentElement; // console.log("  parent:", i, parent);
            parent.remove();
          }
          _iterator3 = _createForOfIteratorHelper(folderList);
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              element = _step3.value;
              if (element.endsWith('/')) {
                // console.log("  ", element.slice(0, element.length-1));
                label = document.createElement('label');
                input = document.createElement('input');
                input.type = 'radio';
                input.name = 'folderName';
                input.value = element.slice(0, element.length - 1);
                folderID.appendChild(label);
                label.appendChild(input);
                label.appendChild(document.createTextNode(element.slice(0, element.length - 1)));
                br = document.createElement("br");
                label.appendChild(br);
              }
              ;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          if (selectedFolder == "") {
            selectedFolder = '/';
          }

          // folderNameID[0].checked =true;
          folderNameID[0].value = '/';
          for (i = 0; i < folderNameID.length; i++) {
            if (folderNameID[i].value == selectedFolder) {
              folderNameID[i].checked = true;
            }
            // console.log(folderNameID[i].value);
            folderNameID[i].addEventListener("change", changeFolder);
          }
          // console.log("  folderNameID.length:", folderNameID.length);
        case 9:
        case "end":
          return _context10.stop();
      }
    }, _callee10);
  }));
  return _folderNames.apply(this, arguments);
}
;
function fileNames() {
  return _fileNames.apply(this, arguments);
}
function _fileNames() {
  _fileNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
    var checkFolder, count, i, parent, _iterator4, _step4, element, label, input, br, element2, _label, _input, _br;
    return _regeneratorRuntime().wrap(function _callee11$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          // console.log("fileNames selectedFolder:", selectedFolder);
          // console.log("fileList:", fileList);
          checkFolder = selectedFolder + '/';
          console.log("  checkFolder:", checkFolder);
          filesId = document.getElementById('files');

          // console.log("  fileNameID.length:", fileNameID.length);
          count = fileNameID.length;
          for (i = 0; i < count; i++) {
            // console.log("  fileNameID[]:", fileNameID[i]);
            parent = fileNameID[0].parentElement; // console.log("  parent:", i, parent);
            parent.remove();
          }
          _iterator4 = _createForOfIteratorHelper(fileList);
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              element = _step4.value;
              if (checkFolder === '//') {
                if (element.indexOf('/') === -1) {
                  // console.log(" ", element);
                  label = document.createElement('label');
                  input = document.createElement('input');
                  input.type = 'radio';
                  input.name = 'fileName';
                  input.value = element;
                  filesId.appendChild(label);
                  label.appendChild(input);
                  label.appendChild(document.createTextNode(element));
                  br = document.createElement("br");
                  label.appendChild(br);
                }
              } else {
                if (element.indexOf(checkFolder) === 0) {
                  // console.log(" ", element);
                  element2 = element.substr(checkFolder.length);
                  _label = document.createElement('label');
                  _input = document.createElement('input');
                  _input.type = 'radio';
                  _input.name = 'fileName';
                  _input.value = element2;
                  filesId.appendChild(_label);
                  _label.appendChild(_input);
                  _label.appendChild(document.createTextNode(element2));
                  _br = document.createElement("br");
                  _label.appendChild(_br);
                }
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          filesId = document.getElementById('files');
          // console.log("  fileNameID.length:", fileNameID.length);
        case 8:
        case "end":
          return _context11.stop();
      }
    }, _callee11);
  }));
  return _fileNames.apply(this, arguments);
}
},{"@azure/storage-blob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "60739" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","azureFiles.js"], null)
//# sourceMappingURL=/azureFiles.fe8d04fa.js.map